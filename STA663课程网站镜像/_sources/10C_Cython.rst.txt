
Cython
======

Cython is an "optimizing static compiler " that combines Python with C
to generate optimized code. Since Cython is a superset of Python, all
valid Python programs are also valid Cython programs. However, by
providing hints and static typing, we can get much faster programs. Note
that while ``numba`` often provides similar speedups with less work,, an
advantage of Cython is that it is easy to distribute optimized Cython
modules since they can be built with the standard Python ``setup.py``
script.

We have already seen how to use Cython to wrap C and C++ functions from
existing libraries. Here we will see how to use Cython to speed up
Python functions.

.. code:: python

    %matplotlib inline
    import matplotlib.pyplot as plt

Resources
~~~~~~~~~

-  `Cython documentation <http://docs.cython.org/index.html>`__
-  `Cython: A guide for Python
   programmers <http://www.amazon.com/Cython-Kurt-W-Smith/dp/1491901551>`__

**Utility function for timing functions**

.. code:: python

    import time

.. code:: python

    def timer(f, *args, **kwargs):
        start = time.clock()
        ans = f(*args, **kwargs)
        return ans, time.clock() - start

.. code:: python

    def report(fs, *args, **kwargs):
        ans, t = timer(fs[0], *args, **kwargs)
        for f in fs[1:]:
            ans_, t_ = timer(f, *args, **kwargs)
            print('%s: %.1f' % (f.__name__, t/t_))

Incremental improvements
------------------------

Generally, we start with a pure Python function, run it through Cython
with the annotate ``-a`` flag, and incrementally modify the code until
the yellow parts are minimized.

How to build Cython modules
---------------------------

From `official docs <http://docs.cython.org/index.html>`__

Using Cython consists of these steps:

-  Write a .pyx source file
-  Run the Cython compiler to generate a C file
-  Run a C compiler to generate a compiled library
-  Run the Python interpreter and ask it to import the module

In the Jupyter notebook, we can use the ``%%cython`` cell magic to
automate these steps.

.. code:: python

    %load_ext cython

Matrix multiplication example
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. code:: python

    def matrix_multiply(u, v, res):
        m, n = u.shape
        n, p = v.shape
        for i in range(m):
            for j in range(p):
                res[i,j] = 0
                for k in range(n):
                    res[i,j] += u[i,k] * v[k,j]
        return res

.. code:: python

    import numpy as np
    u = np.random.random((10,20))
    v = np.random.random((20,5))

.. code:: python

    res = np.zeros((u.shape[0], v.shape[1]))
    matrix_multiply(u, v, res)




.. parsed-literal::

    array([[ 3.11449823,  5.35977303,  5.48778181,  5.14085938,  4.54520686],
           [ 3.68374999,  4.67333347,  4.37704824,  4.61282881,  3.85293391],
           [ 4.01582061,  5.53693287,  5.23375753,  4.67309499,  4.59460048],
           [ 4.07493259,  4.63093078,  5.00670814,  4.92908673,  4.23099528],
           [ 3.56821364,  4.64831502,  3.89552072,  4.74094422,  3.83194289],
           [ 3.59114576,  4.14569789,  4.77227321,  4.45942977,  3.77867553],
           [ 5.17616931,  5.73851388,  5.6071998 ,  5.99414005,  5.01139514],
           [ 2.89575575,  4.00384915,  4.71317099,  4.75876412,  4.30115292],
           [ 4.08424318,  5.54013852,  5.29577668,  5.74588951,  4.45967311],
           [ 3.95142186,  5.68656356,  5.02933096,  5.7503449 ,  5.06054258]])



.. code:: python

    res = np.zeros((u.shape[0], v.shape[1]))
    %timeit -r3 -n3 matrix_multiply(u, v, res)


.. parsed-literal::

    3 loops, best of 3: 653 Âµs per loop


Using Cython annnotations to identify bottlenecks
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code:: python

    %%cython -a
    
    import numpy as np
    
    def matrix_multiply1(u, v, res):
        m, n = u.shape
        n, p = v.shape
        for i in range(m):
            for j in range(p):
                res[i,j] = 0
                for k in range(n):
                    res[i,j] += u[i,k] * v[k,j]
        return res




.. raw:: html

    <!DOCTYPE html>
    <!-- Generated by Cython 0.23.5 -->
    <html>
    <head>
        <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
        <title>Cython: _cython_magic_65555dffd12a135eb525e1912be8f576.pyx</title>
        <style type="text/css">
        
    body.cython { font-family: courier; font-size: 12; }
    
    .cython.tag  {  }
    .cython.line { margin: 0em }
    .cython.code { font-size: 9; color: #444444; display: none; margin: 0px 0px 0px 8px; border-left: 8px none; }
    
    .cython.line .run { background-color: #B0FFB0; }
    .cython.line .mis { background-color: #FFB0B0; }
    .cython.code.run  { border-left: 8px solid #B0FFB0; }
    .cython.code.mis  { border-left: 8px solid #FFB0B0; }
    
    .cython.code .py_c_api  { color: red; }
    .cython.code .py_macro_api  { color: #FF7000; }
    .cython.code .pyx_c_api  { color: #FF3000; }
    .cython.code .pyx_macro_api  { color: #FF7000; }
    .cython.code .refnanny  { color: #FFA000; }
    .cython.code .trace  { color: #FFA000; }
    .cython.code .error_goto  { color: #FFA000; }
    
    .cython.code .coerce  { color: #008000; border: 1px dotted #008000 }
    .cython.code .py_attr { color: #FF0000; font-weight: bold; }
    .cython.code .c_attr  { color: #0000FF; }
    .cython.code .py_call { color: #FF0000; font-weight: bold; }
    .cython.code .c_call  { color: #0000FF; }
    
    .cython.score-0 {background-color: #FFFFff;}
    .cython.score-1 {background-color: #FFFFe7;}
    .cython.score-2 {background-color: #FFFFd4;}
    .cython.score-3 {background-color: #FFFFc4;}
    .cython.score-4 {background-color: #FFFFb6;}
    .cython.score-5 {background-color: #FFFFaa;}
    .cython.score-6 {background-color: #FFFF9f;}
    .cython.score-7 {background-color: #FFFF96;}
    .cython.score-8 {background-color: #FFFF8d;}
    .cython.score-9 {background-color: #FFFF86;}
    .cython.score-10 {background-color: #FFFF7f;}
    .cython.score-11 {background-color: #FFFF79;}
    .cython.score-12 {background-color: #FFFF73;}
    .cython.score-13 {background-color: #FFFF6e;}
    .cython.score-14 {background-color: #FFFF6a;}
    .cython.score-15 {background-color: #FFFF66;}
    .cython.score-16 {background-color: #FFFF62;}
    .cython.score-17 {background-color: #FFFF5e;}
    .cython.score-18 {background-color: #FFFF5b;}
    .cython.score-19 {background-color: #FFFF57;}
    .cython.score-20 {background-color: #FFFF55;}
    .cython.score-21 {background-color: #FFFF52;}
    .cython.score-22 {background-color: #FFFF4f;}
    .cython.score-23 {background-color: #FFFF4d;}
    .cython.score-24 {background-color: #FFFF4b;}
    .cython.score-25 {background-color: #FFFF48;}
    .cython.score-26 {background-color: #FFFF46;}
    .cython.score-27 {background-color: #FFFF44;}
    .cython.score-28 {background-color: #FFFF43;}
    .cython.score-29 {background-color: #FFFF41;}
    .cython.score-30 {background-color: #FFFF3f;}
    .cython.score-31 {background-color: #FFFF3e;}
    .cython.score-32 {background-color: #FFFF3c;}
    .cython.score-33 {background-color: #FFFF3b;}
    .cython.score-34 {background-color: #FFFF39;}
    .cython.score-35 {background-color: #FFFF38;}
    .cython.score-36 {background-color: #FFFF37;}
    .cython.score-37 {background-color: #FFFF36;}
    .cython.score-38 {background-color: #FFFF35;}
    .cython.score-39 {background-color: #FFFF34;}
    .cython.score-40 {background-color: #FFFF33;}
    .cython.score-41 {background-color: #FFFF32;}
    .cython.score-42 {background-color: #FFFF31;}
    .cython.score-43 {background-color: #FFFF30;}
    .cython.score-44 {background-color: #FFFF2f;}
    .cython.score-45 {background-color: #FFFF2e;}
    .cython.score-46 {background-color: #FFFF2d;}
    .cython.score-47 {background-color: #FFFF2c;}
    .cython.score-48 {background-color: #FFFF2b;}
    .cython.score-49 {background-color: #FFFF2b;}
    .cython.score-50 {background-color: #FFFF2a;}
    .cython.score-51 {background-color: #FFFF29;}
    .cython.score-52 {background-color: #FFFF29;}
    .cython.score-53 {background-color: #FFFF28;}
    .cython.score-54 {background-color: #FFFF27;}
    .cython.score-55 {background-color: #FFFF27;}
    .cython.score-56 {background-color: #FFFF26;}
    .cython.score-57 {background-color: #FFFF26;}
    .cython.score-58 {background-color: #FFFF25;}
    .cython.score-59 {background-color: #FFFF24;}
    .cython.score-60 {background-color: #FFFF24;}
    .cython.score-61 {background-color: #FFFF23;}
    .cython.score-62 {background-color: #FFFF23;}
    .cython.score-63 {background-color: #FFFF22;}
    .cython.score-64 {background-color: #FFFF22;}
    .cython.score-65 {background-color: #FFFF22;}
    .cython.score-66 {background-color: #FFFF21;}
    .cython.score-67 {background-color: #FFFF21;}
    .cython.score-68 {background-color: #FFFF20;}
    .cython.score-69 {background-color: #FFFF20;}
    .cython.score-70 {background-color: #FFFF1f;}
    .cython.score-71 {background-color: #FFFF1f;}
    .cython.score-72 {background-color: #FFFF1f;}
    .cython.score-73 {background-color: #FFFF1e;}
    .cython.score-74 {background-color: #FFFF1e;}
    .cython.score-75 {background-color: #FFFF1e;}
    .cython.score-76 {background-color: #FFFF1d;}
    .cython.score-77 {background-color: #FFFF1d;}
    .cython.score-78 {background-color: #FFFF1c;}
    .cython.score-79 {background-color: #FFFF1c;}
    .cython.score-80 {background-color: #FFFF1c;}
    .cython.score-81 {background-color: #FFFF1c;}
    .cython.score-82 {background-color: #FFFF1b;}
    .cython.score-83 {background-color: #FFFF1b;}
    .cython.score-84 {background-color: #FFFF1b;}
    .cython.score-85 {background-color: #FFFF1a;}
    .cython.score-86 {background-color: #FFFF1a;}
    .cython.score-87 {background-color: #FFFF1a;}
    .cython.score-88 {background-color: #FFFF1a;}
    .cython.score-89 {background-color: #FFFF19;}
    .cython.score-90 {background-color: #FFFF19;}
    .cython.score-91 {background-color: #FFFF19;}
    .cython.score-92 {background-color: #FFFF19;}
    .cython.score-93 {background-color: #FFFF18;}
    .cython.score-94 {background-color: #FFFF18;}
    .cython.score-95 {background-color: #FFFF18;}
    .cython.score-96 {background-color: #FFFF18;}
    .cython.score-97 {background-color: #FFFF17;}
    .cython.score-98 {background-color: #FFFF17;}
    .cython.score-99 {background-color: #FFFF17;}
    .cython.score-100 {background-color: #FFFF17;}
    .cython.score-101 {background-color: #FFFF16;}
    .cython.score-102 {background-color: #FFFF16;}
    .cython.score-103 {background-color: #FFFF16;}
    .cython.score-104 {background-color: #FFFF16;}
    .cython.score-105 {background-color: #FFFF16;}
    .cython.score-106 {background-color: #FFFF15;}
    .cython.score-107 {background-color: #FFFF15;}
    .cython.score-108 {background-color: #FFFF15;}
    .cython.score-109 {background-color: #FFFF15;}
    .cython.score-110 {background-color: #FFFF15;}
    .cython.score-111 {background-color: #FFFF15;}
    .cython.score-112 {background-color: #FFFF14;}
    .cython.score-113 {background-color: #FFFF14;}
    .cython.score-114 {background-color: #FFFF14;}
    .cython.score-115 {background-color: #FFFF14;}
    .cython.score-116 {background-color: #FFFF14;}
    .cython.score-117 {background-color: #FFFF14;}
    .cython.score-118 {background-color: #FFFF13;}
    .cython.score-119 {background-color: #FFFF13;}
    .cython.score-120 {background-color: #FFFF13;}
    .cython.score-121 {background-color: #FFFF13;}
    .cython.score-122 {background-color: #FFFF13;}
    .cython.score-123 {background-color: #FFFF13;}
    .cython.score-124 {background-color: #FFFF13;}
    .cython.score-125 {background-color: #FFFF12;}
    .cython.score-126 {background-color: #FFFF12;}
    .cython.score-127 {background-color: #FFFF12;}
    .cython.score-128 {background-color: #FFFF12;}
    .cython.score-129 {background-color: #FFFF12;}
    .cython.score-130 {background-color: #FFFF12;}
    .cython.score-131 {background-color: #FFFF12;}
    .cython.score-132 {background-color: #FFFF11;}
    .cython.score-133 {background-color: #FFFF11;}
    .cython.score-134 {background-color: #FFFF11;}
    .cython.score-135 {background-color: #FFFF11;}
    .cython.score-136 {background-color: #FFFF11;}
    .cython.score-137 {background-color: #FFFF11;}
    .cython.score-138 {background-color: #FFFF11;}
    .cython.score-139 {background-color: #FFFF11;}
    .cython.score-140 {background-color: #FFFF11;}
    .cython.score-141 {background-color: #FFFF10;}
    .cython.score-142 {background-color: #FFFF10;}
    .cython.score-143 {background-color: #FFFF10;}
    .cython.score-144 {background-color: #FFFF10;}
    .cython.score-145 {background-color: #FFFF10;}
    .cython.score-146 {background-color: #FFFF10;}
    .cython.score-147 {background-color: #FFFF10;}
    .cython.score-148 {background-color: #FFFF10;}
    .cython.score-149 {background-color: #FFFF10;}
    .cython.score-150 {background-color: #FFFF0f;}
    .cython.score-151 {background-color: #FFFF0f;}
    .cython.score-152 {background-color: #FFFF0f;}
    .cython.score-153 {background-color: #FFFF0f;}
    .cython.score-154 {background-color: #FFFF0f;}
    .cython.score-155 {background-color: #FFFF0f;}
    .cython.score-156 {background-color: #FFFF0f;}
    .cython.score-157 {background-color: #FFFF0f;}
    .cython.score-158 {background-color: #FFFF0f;}
    .cython.score-159 {background-color: #FFFF0f;}
    .cython.score-160 {background-color: #FFFF0f;}
    .cython.score-161 {background-color: #FFFF0e;}
    .cython.score-162 {background-color: #FFFF0e;}
    .cython.score-163 {background-color: #FFFF0e;}
    .cython.score-164 {background-color: #FFFF0e;}
    .cython.score-165 {background-color: #FFFF0e;}
    .cython.score-166 {background-color: #FFFF0e;}
    .cython.score-167 {background-color: #FFFF0e;}
    .cython.score-168 {background-color: #FFFF0e;}
    .cython.score-169 {background-color: #FFFF0e;}
    .cython.score-170 {background-color: #FFFF0e;}
    .cython.score-171 {background-color: #FFFF0e;}
    .cython.score-172 {background-color: #FFFF0e;}
    .cython.score-173 {background-color: #FFFF0d;}
    .cython.score-174 {background-color: #FFFF0d;}
    .cython.score-175 {background-color: #FFFF0d;}
    .cython.score-176 {background-color: #FFFF0d;}
    .cython.score-177 {background-color: #FFFF0d;}
    .cython.score-178 {background-color: #FFFF0d;}
    .cython.score-179 {background-color: #FFFF0d;}
    .cython.score-180 {background-color: #FFFF0d;}
    .cython.score-181 {background-color: #FFFF0d;}
    .cython.score-182 {background-color: #FFFF0d;}
    .cython.score-183 {background-color: #FFFF0d;}
    .cython.score-184 {background-color: #FFFF0d;}
    .cython.score-185 {background-color: #FFFF0d;}
    .cython.score-186 {background-color: #FFFF0d;}
    .cython.score-187 {background-color: #FFFF0c;}
    .cython.score-188 {background-color: #FFFF0c;}
    .cython.score-189 {background-color: #FFFF0c;}
    .cython.score-190 {background-color: #FFFF0c;}
    .cython.score-191 {background-color: #FFFF0c;}
    .cython.score-192 {background-color: #FFFF0c;}
    .cython.score-193 {background-color: #FFFF0c;}
    .cython.score-194 {background-color: #FFFF0c;}
    .cython.score-195 {background-color: #FFFF0c;}
    .cython.score-196 {background-color: #FFFF0c;}
    .cython.score-197 {background-color: #FFFF0c;}
    .cython.score-198 {background-color: #FFFF0c;}
    .cython.score-199 {background-color: #FFFF0c;}
    .cython.score-200 {background-color: #FFFF0c;}
    .cython.score-201 {background-color: #FFFF0c;}
    .cython.score-202 {background-color: #FFFF0c;}
    .cython.score-203 {background-color: #FFFF0b;}
    .cython.score-204 {background-color: #FFFF0b;}
    .cython.score-205 {background-color: #FFFF0b;}
    .cython.score-206 {background-color: #FFFF0b;}
    .cython.score-207 {background-color: #FFFF0b;}
    .cython.score-208 {background-color: #FFFF0b;}
    .cython.score-209 {background-color: #FFFF0b;}
    .cython.score-210 {background-color: #FFFF0b;}
    .cython.score-211 {background-color: #FFFF0b;}
    .cython.score-212 {background-color: #FFFF0b;}
    .cython.score-213 {background-color: #FFFF0b;}
    .cython.score-214 {background-color: #FFFF0b;}
    .cython.score-215 {background-color: #FFFF0b;}
    .cython.score-216 {background-color: #FFFF0b;}
    .cython.score-217 {background-color: #FFFF0b;}
    .cython.score-218 {background-color: #FFFF0b;}
    .cython.score-219 {background-color: #FFFF0b;}
    .cython.score-220 {background-color: #FFFF0b;}
    .cython.score-221 {background-color: #FFFF0b;}
    .cython.score-222 {background-color: #FFFF0a;}
    .cython.score-223 {background-color: #FFFF0a;}
    .cython.score-224 {background-color: #FFFF0a;}
    .cython.score-225 {background-color: #FFFF0a;}
    .cython.score-226 {background-color: #FFFF0a;}
    .cython.score-227 {background-color: #FFFF0a;}
    .cython.score-228 {background-color: #FFFF0a;}
    .cython.score-229 {background-color: #FFFF0a;}
    .cython.score-230 {background-color: #FFFF0a;}
    .cython.score-231 {background-color: #FFFF0a;}
    .cython.score-232 {background-color: #FFFF0a;}
    .cython.score-233 {background-color: #FFFF0a;}
    .cython.score-234 {background-color: #FFFF0a;}
    .cython.score-235 {background-color: #FFFF0a;}
    .cython.score-236 {background-color: #FFFF0a;}
    .cython.score-237 {background-color: #FFFF0a;}
    .cython.score-238 {background-color: #FFFF0a;}
    .cython.score-239 {background-color: #FFFF0a;}
    .cython.score-240 {background-color: #FFFF0a;}
    .cython.score-241 {background-color: #FFFF0a;}
    .cython.score-242 {background-color: #FFFF0a;}
    .cython.score-243 {background-color: #FFFF0a;}
    .cython.score-244 {background-color: #FFFF0a;}
    .cython.score-245 {background-color: #FFFF0a;}
    .cython.score-246 {background-color: #FFFF09;}
    .cython.score-247 {background-color: #FFFF09;}
    .cython.score-248 {background-color: #FFFF09;}
    .cython.score-249 {background-color: #FFFF09;}
    .cython.score-250 {background-color: #FFFF09;}
    .cython.score-251 {background-color: #FFFF09;}
    .cython.score-252 {background-color: #FFFF09;}
    .cython.score-253 {background-color: #FFFF09;}
    .cython.score-254 {background-color: #FFFF09;}
    .cython .hll { background-color: #ffffcc }
    .cython  { background: #f8f8f8; }
    .cython .c { color: #408080; font-style: italic } /* Comment */
    .cython .err { border: 1px solid #FF0000 } /* Error */
    .cython .k { color: #008000; font-weight: bold } /* Keyword */
    .cython .o { color: #666666 } /* Operator */
    .cython .ch { color: #408080; font-style: italic } /* Comment.Hashbang */
    .cython .cm { color: #408080; font-style: italic } /* Comment.Multiline */
    .cython .cp { color: #BC7A00 } /* Comment.Preproc */
    .cython .cpf { color: #408080; font-style: italic } /* Comment.PreprocFile */
    .cython .c1 { color: #408080; font-style: italic } /* Comment.Single */
    .cython .cs { color: #408080; font-style: italic } /* Comment.Special */
    .cython .gd { color: #A00000 } /* Generic.Deleted */
    .cython .ge { font-style: italic } /* Generic.Emph */
    .cython .gr { color: #FF0000 } /* Generic.Error */
    .cython .gh { color: #000080; font-weight: bold } /* Generic.Heading */
    .cython .gi { color: #00A000 } /* Generic.Inserted */
    .cython .go { color: #888888 } /* Generic.Output */
    .cython .gp { color: #000080; font-weight: bold } /* Generic.Prompt */
    .cython .gs { font-weight: bold } /* Generic.Strong */
    .cython .gu { color: #800080; font-weight: bold } /* Generic.Subheading */
    .cython .gt { color: #0044DD } /* Generic.Traceback */
    .cython .kc { color: #008000; font-weight: bold } /* Keyword.Constant */
    .cython .kd { color: #008000; font-weight: bold } /* Keyword.Declaration */
    .cython .kn { color: #008000; font-weight: bold } /* Keyword.Namespace */
    .cython .kp { color: #008000 } /* Keyword.Pseudo */
    .cython .kr { color: #008000; font-weight: bold } /* Keyword.Reserved */
    .cython .kt { color: #B00040 } /* Keyword.Type */
    .cython .m { color: #666666 } /* Literal.Number */
    .cython .s { color: #BA2121 } /* Literal.String */
    .cython .na { color: #7D9029 } /* Name.Attribute */
    .cython .nb { color: #008000 } /* Name.Builtin */
    .cython .nc { color: #0000FF; font-weight: bold } /* Name.Class */
    .cython .no { color: #880000 } /* Name.Constant */
    .cython .nd { color: #AA22FF } /* Name.Decorator */
    .cython .ni { color: #999999; font-weight: bold } /* Name.Entity */
    .cython .ne { color: #D2413A; font-weight: bold } /* Name.Exception */
    .cython .nf { color: #0000FF } /* Name.Function */
    .cython .nl { color: #A0A000 } /* Name.Label */
    .cython .nn { color: #0000FF; font-weight: bold } /* Name.Namespace */
    .cython .nt { color: #008000; font-weight: bold } /* Name.Tag */
    .cython .nv { color: #19177C } /* Name.Variable */
    .cython .ow { color: #AA22FF; font-weight: bold } /* Operator.Word */
    .cython .w { color: #bbbbbb } /* Text.Whitespace */
    .cython .mb { color: #666666 } /* Literal.Number.Bin */
    .cython .mf { color: #666666 } /* Literal.Number.Float */
    .cython .mh { color: #666666 } /* Literal.Number.Hex */
    .cython .mi { color: #666666 } /* Literal.Number.Integer */
    .cython .mo { color: #666666 } /* Literal.Number.Oct */
    .cython .sb { color: #BA2121 } /* Literal.String.Backtick */
    .cython .sc { color: #BA2121 } /* Literal.String.Char */
    .cython .sd { color: #BA2121; font-style: italic } /* Literal.String.Doc */
    .cython .s2 { color: #BA2121 } /* Literal.String.Double */
    .cython .se { color: #BB6622; font-weight: bold } /* Literal.String.Escape */
    .cython .sh { color: #BA2121 } /* Literal.String.Heredoc */
    .cython .si { color: #BB6688; font-weight: bold } /* Literal.String.Interpol */
    .cython .sx { color: #008000 } /* Literal.String.Other */
    .cython .sr { color: #BB6688 } /* Literal.String.Regex */
    .cython .s1 { color: #BA2121 } /* Literal.String.Single */
    .cython .ss { color: #19177C } /* Literal.String.Symbol */
    .cython .bp { color: #008000 } /* Name.Builtin.Pseudo */
    .cython .vc { color: #19177C } /* Name.Variable.Class */
    .cython .vg { color: #19177C } /* Name.Variable.Global */
    .cython .vi { color: #19177C } /* Name.Variable.Instance */
    .cython .il { color: #666666 } /* Literal.Number.Integer.Long */
        </style>
        <script>
        function toggleDiv(id) {
            theDiv = id.nextElementSibling
            if (theDiv.style.display != 'block') theDiv.style.display = 'block';
            else theDiv.style.display = 'none';
        }
        </script>
    </head>
    <body class="cython">
    <p><span style="border-bottom: solid 1px grey;">Generated by Cython 0.23.5</span></p>
    <p>
        <span style="background-color: #FFFF00">Yellow lines</span> hint at Python interaction.<br />
        Click on a line that starts with a "<code>+</code>" to see the C code that Cython generated for it.
    </p>
    <div class="cython"><pre class="cython line score-0">&#xA0;<span class="">01</span>: </pre>
    <pre class="cython line score-8" onclick='toggleDiv(this)'>+<span class="">02</span>: <span class="k">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="nn">np</span></pre>
    <pre class='cython code score-8 '>  __pyx_t_1 = <span class='pyx_c_api'>__Pyx_Import</span>(__pyx_n_s_numpy, 0, -1);<span class='error_goto'> if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2; __pyx_clineno = __LINE__; goto __pyx_L1_error;}</span>
      <span class='refnanny'>__Pyx_GOTREF</span>(__pyx_t_1);
      if (<span class='py_c_api'>PyDict_SetItem</span>(__pyx_d, __pyx_n_s_np, __pyx_t_1) &lt; 0) <span class='error_goto'>{__pyx_filename = __pyx_f[0]; __pyx_lineno = 2; __pyx_clineno = __LINE__; goto __pyx_L1_error;}</span>
      <span class='pyx_macro_api'>__Pyx_DECREF</span>(__pyx_t_1); __pyx_t_1 = 0;
    </pre><pre class="cython line score-0">&#xA0;<span class="">03</span>: </pre>
    <pre class="cython line score-66" onclick='toggleDiv(this)'>+<span class="">04</span>: <span class="k">def</span> <span class="nf">matrix_multiply1</span><span class="p">(</span><span class="n">u</span><span class="p">,</span> <span class="n">v</span><span class="p">,</span> <span class="n">res</span><span class="p">):</span></pre>
    <pre class='cython code score-66 '>/* Python wrapper */
    static PyObject *__pyx_pw_46_cython_magic_65555dffd12a135eb525e1912be8f576_1matrix_multiply1(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
    static PyMethodDef __pyx_mdef_46_cython_magic_65555dffd12a135eb525e1912be8f576_1matrix_multiply1 = {"matrix_multiply1", (PyCFunction)__pyx_pw_46_cython_magic_65555dffd12a135eb525e1912be8f576_1matrix_multiply1, METH_VARARGS|METH_KEYWORDS, 0};
    static PyObject *__pyx_pw_46_cython_magic_65555dffd12a135eb525e1912be8f576_1matrix_multiply1(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
      PyObject *__pyx_v_u = 0;
      PyObject *__pyx_v_v = 0;
      PyObject *__pyx_v_res = 0;
      PyObject *__pyx_r = 0;
      <span class='refnanny'>__Pyx_RefNannyDeclarations</span>
      <span class='refnanny'>__Pyx_RefNannySetupContext</span>("matrix_multiply1 (wrapper)", 0);
      {
        static PyObject **__pyx_pyargnames[] = {&amp;__pyx_n_s_u,&amp;__pyx_n_s_v,&amp;__pyx_n_s_res,0};
        PyObject* values[3] = {0,0,0};
        if (unlikely(__pyx_kwds)) {
          Py_ssize_t kw_args;
          const Py_ssize_t pos_args = <span class='py_macro_api'>PyTuple_GET_SIZE</span>(__pyx_args);
          switch (pos_args) {
            case  3: values[2] = <span class='py_macro_api'>PyTuple_GET_ITEM</span>(__pyx_args, 2);
            case  2: values[1] = <span class='py_macro_api'>PyTuple_GET_ITEM</span>(__pyx_args, 1);
            case  1: values[0] = <span class='py_macro_api'>PyTuple_GET_ITEM</span>(__pyx_args, 0);
            case  0: break;
            default: goto __pyx_L5_argtuple_error;
          }
          kw_args = <span class='py_c_api'>PyDict_Size</span>(__pyx_kwds);
          switch (pos_args) {
            case  0:
            if (likely((values[0] = <span class='py_c_api'>PyDict_GetItem</span>(__pyx_kwds, __pyx_n_s_u)) != 0)) kw_args--;
            else goto __pyx_L5_argtuple_error;
            case  1:
            if (likely((values[1] = <span class='py_c_api'>PyDict_GetItem</span>(__pyx_kwds, __pyx_n_s_v)) != 0)) kw_args--;
            else {
              <span class='pyx_c_api'>__Pyx_RaiseArgtupleInvalid</span>("matrix_multiply1", 1, 3, 3, 1); <span class='error_goto'>{__pyx_filename = __pyx_f[0]; __pyx_lineno = 4; __pyx_clineno = __LINE__; goto __pyx_L3_error;}</span>
            }
            case  2:
            if (likely((values[2] = <span class='py_c_api'>PyDict_GetItem</span>(__pyx_kwds, __pyx_n_s_res)) != 0)) kw_args--;
            else {
              <span class='pyx_c_api'>__Pyx_RaiseArgtupleInvalid</span>("matrix_multiply1", 1, 3, 3, 2); <span class='error_goto'>{__pyx_filename = __pyx_f[0]; __pyx_lineno = 4; __pyx_clineno = __LINE__; goto __pyx_L3_error;}</span>
            }
          }
          if (unlikely(kw_args &gt; 0)) {
            if (unlikely(<span class='pyx_c_api'>__Pyx_ParseOptionalKeywords</span>(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "matrix_multiply1") &lt; 0)) <span class='error_goto'>{__pyx_filename = __pyx_f[0]; __pyx_lineno = 4; __pyx_clineno = __LINE__; goto __pyx_L3_error;}</span>
          }
        } else if (<span class='py_macro_api'>PyTuple_GET_SIZE</span>(__pyx_args) != 3) {
          goto __pyx_L5_argtuple_error;
        } else {
          values[0] = <span class='py_macro_api'>PyTuple_GET_ITEM</span>(__pyx_args, 0);
          values[1] = <span class='py_macro_api'>PyTuple_GET_ITEM</span>(__pyx_args, 1);
          values[2] = <span class='py_macro_api'>PyTuple_GET_ITEM</span>(__pyx_args, 2);
        }
        __pyx_v_u = values[0];
        __pyx_v_v = values[1];
        __pyx_v_res = values[2];
      }
      goto __pyx_L4_argument_unpacking_done;
      __pyx_L5_argtuple_error:;
      <span class='pyx_c_api'>__Pyx_RaiseArgtupleInvalid</span>("matrix_multiply1", 1, 3, 3, <span class='py_macro_api'>PyTuple_GET_SIZE</span>(__pyx_args)); <span class='error_goto'>{__pyx_filename = __pyx_f[0]; __pyx_lineno = 4; __pyx_clineno = __LINE__; goto __pyx_L3_error;}</span>
      __pyx_L3_error:;
      <span class='pyx_c_api'>__Pyx_AddTraceback</span>("_cython_magic_65555dffd12a135eb525e1912be8f576.matrix_multiply1", __pyx_clineno, __pyx_lineno, __pyx_filename);
      <span class='refnanny'>__Pyx_RefNannyFinishContext</span>();
      return NULL;
      __pyx_L4_argument_unpacking_done:;
      __pyx_r = __pyx_pf_46_cython_magic_65555dffd12a135eb525e1912be8f576_matrix_multiply1(__pyx_self, __pyx_v_u, __pyx_v_v, __pyx_v_res);
      int __pyx_lineno = 0;
      const char *__pyx_filename = NULL;
      int __pyx_clineno = 0;
    
      /* function exit code */
      <span class='refnanny'>__Pyx_RefNannyFinishContext</span>();
      return __pyx_r;
    }
    
    static PyObject *__pyx_pf_46_cython_magic_65555dffd12a135eb525e1912be8f576_matrix_multiply1(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_u, PyObject *__pyx_v_v, PyObject *__pyx_v_res) {
      PyObject *__pyx_v_m = NULL;
      PyObject *__pyx_v_n = NULL;
      PyObject *__pyx_v_p = NULL;
      PyObject *__pyx_v_i = NULL;
      PyObject *__pyx_v_j = NULL;
      PyObject *__pyx_v_k = NULL;
      PyObject *__pyx_r = NULL;
      <span class='refnanny'>__Pyx_RefNannyDeclarations</span>
      <span class='refnanny'>__Pyx_RefNannySetupContext</span>("matrix_multiply1", 0);
    /* â¦ */
      /* function exit code */
      __pyx_L1_error:;
      <span class='pyx_macro_api'>__Pyx_XDECREF</span>(__pyx_t_1);
      <span class='pyx_macro_api'>__Pyx_XDECREF</span>(__pyx_t_2);
      <span class='pyx_macro_api'>__Pyx_XDECREF</span>(__pyx_t_3);
      <span class='pyx_macro_api'>__Pyx_XDECREF</span>(__pyx_t_4);
      <span class='pyx_macro_api'>__Pyx_XDECREF</span>(__pyx_t_12);
      <span class='pyx_macro_api'>__Pyx_XDECREF</span>(__pyx_t_13);
      <span class='pyx_macro_api'>__Pyx_XDECREF</span>(__pyx_t_14);
      <span class='pyx_macro_api'>__Pyx_XDECREF</span>(__pyx_t_15);
      <span class='pyx_c_api'>__Pyx_AddTraceback</span>("_cython_magic_65555dffd12a135eb525e1912be8f576.matrix_multiply1", __pyx_clineno, __pyx_lineno, __pyx_filename);
      __pyx_r = NULL;
      __pyx_L0:;
      <span class='pyx_macro_api'>__Pyx_XDECREF</span>(__pyx_v_m);
      <span class='pyx_macro_api'>__Pyx_XDECREF</span>(__pyx_v_n);
      <span class='pyx_macro_api'>__Pyx_XDECREF</span>(__pyx_v_p);
      <span class='pyx_macro_api'>__Pyx_XDECREF</span>(__pyx_v_i);
      <span class='pyx_macro_api'>__Pyx_XDECREF</span>(__pyx_v_j);
      <span class='pyx_macro_api'>__Pyx_XDECREF</span>(__pyx_v_k);
      <span class='refnanny'>__Pyx_XGIVEREF</span>(__pyx_r);
      <span class='refnanny'>__Pyx_RefNannyFinishContext</span>();
      return __pyx_r;
    }
    /* â¦ */
      __pyx_tuple_ = <span class='py_c_api'>PyTuple_Pack</span>(9, __pyx_n_s_u, __pyx_n_s_v, __pyx_n_s_res, __pyx_n_s_m, __pyx_n_s_n, __pyx_n_s_p, __pyx_n_s_i, __pyx_n_s_j, __pyx_n_s_k);<span class='error_goto'> if (unlikely(!__pyx_tuple_)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 4; __pyx_clineno = __LINE__; goto __pyx_L1_error;}</span>
      <span class='refnanny'>__Pyx_GOTREF</span>(__pyx_tuple_);
      <span class='refnanny'>__Pyx_GIVEREF</span>(__pyx_tuple_);
    /* â¦ */
      __pyx_t_1 = PyCFunction_NewEx(&amp;__pyx_mdef_46_cython_magic_65555dffd12a135eb525e1912be8f576_1matrix_multiply1, NULL, __pyx_n_s_cython_magic_65555dffd12a135eb5);<span class='error_goto'> if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 4; __pyx_clineno = __LINE__; goto __pyx_L1_error;}</span>
      <span class='refnanny'>__Pyx_GOTREF</span>(__pyx_t_1);
      if (<span class='py_c_api'>PyDict_SetItem</span>(__pyx_d, __pyx_n_s_matrix_multiply1, __pyx_t_1) &lt; 0) <span class='error_goto'>{__pyx_filename = __pyx_f[0]; __pyx_lineno = 4; __pyx_clineno = __LINE__; goto __pyx_L1_error;}</span>
      <span class='pyx_macro_api'>__Pyx_DECREF</span>(__pyx_t_1); __pyx_t_1 = 0;
    </pre><pre class="cython line score-49" onclick='toggleDiv(this)'>+<span class="">05</span>:     <span class="n">m</span><span class="p">,</span> <span class="n">n</span> <span class="o">=</span> <span class="n">u</span><span class="o">.</span><span class="n">shape</span></pre>
    <pre class='cython code score-49 '>  __pyx_t_1 = <span class='pyx_c_api'>__Pyx_PyObject_GetAttrStr</span>(__pyx_v_u, __pyx_n_s_shape);<span class='error_goto'> if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 5; __pyx_clineno = __LINE__; goto __pyx_L1_error;}</span>
      <span class='refnanny'>__Pyx_GOTREF</span>(__pyx_t_1);
      if ((likely(<span class='py_c_api'>PyTuple_CheckExact</span>(__pyx_t_1))) || (<span class='py_c_api'>PyList_CheckExact</span>(__pyx_t_1))) {
        PyObject* sequence = __pyx_t_1;
        #if CYTHON_COMPILING_IN_CPYTHON
        Py_ssize_t size = Py_SIZE(sequence);
        #else
        Py_ssize_t size = <span class='py_c_api'>PySequence_Size</span>(sequence);
        #endif
        if (unlikely(size != 2)) {
          if (size &gt; 2) <span class='pyx_c_api'>__Pyx_RaiseTooManyValuesError</span>(2);
          else if (size &gt;= 0) <span class='pyx_c_api'>__Pyx_RaiseNeedMoreValuesError</span>(size);
          <span class='error_goto'>{__pyx_filename = __pyx_f[0]; __pyx_lineno = 5; __pyx_clineno = __LINE__; goto __pyx_L1_error;}</span>
        }
        #if CYTHON_COMPILING_IN_CPYTHON
        if (likely(<span class='py_c_api'>PyTuple_CheckExact</span>(sequence))) {
          __pyx_t_2 = <span class='py_macro_api'>PyTuple_GET_ITEM</span>(sequence, 0); 
          __pyx_t_3 = <span class='py_macro_api'>PyTuple_GET_ITEM</span>(sequence, 1); 
        } else {
          __pyx_t_2 = <span class='py_macro_api'>PyList_GET_ITEM</span>(sequence, 0); 
          __pyx_t_3 = <span class='py_macro_api'>PyList_GET_ITEM</span>(sequence, 1); 
        }
        <span class='pyx_macro_api'>__Pyx_INCREF</span>(__pyx_t_2);
        <span class='pyx_macro_api'>__Pyx_INCREF</span>(__pyx_t_3);
        #else
        __pyx_t_2 = <span class='py_macro_api'>PySequence_ITEM</span>(sequence, 0);<span class='error_goto'> if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 5; __pyx_clineno = __LINE__; goto __pyx_L1_error;}</span>
        <span class='refnanny'>__Pyx_GOTREF</span>(__pyx_t_2);
        __pyx_t_3 = <span class='py_macro_api'>PySequence_ITEM</span>(sequence, 1);<span class='error_goto'> if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 5; __pyx_clineno = __LINE__; goto __pyx_L1_error;}</span>
        <span class='refnanny'>__Pyx_GOTREF</span>(__pyx_t_3);
        #endif
        <span class='pyx_macro_api'>__Pyx_DECREF</span>(__pyx_t_1); __pyx_t_1 = 0;
      } else {
        Py_ssize_t index = -1;
        __pyx_t_4 = <span class='py_c_api'>PyObject_GetIter</span>(__pyx_t_1);<span class='error_goto'> if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 5; __pyx_clineno = __LINE__; goto __pyx_L1_error;}</span>
        <span class='refnanny'>__Pyx_GOTREF</span>(__pyx_t_4);
        <span class='pyx_macro_api'>__Pyx_DECREF</span>(__pyx_t_1); __pyx_t_1 = 0;
        __pyx_t_5 = Py_TYPE(__pyx_t_4)-&gt;tp_iternext;
        index = 0; __pyx_t_2 = __pyx_t_5(__pyx_t_4); if (unlikely(!__pyx_t_2)) goto __pyx_L3_unpacking_failed;
        <span class='refnanny'>__Pyx_GOTREF</span>(__pyx_t_2);
        index = 1; __pyx_t_3 = __pyx_t_5(__pyx_t_4); if (unlikely(!__pyx_t_3)) goto __pyx_L3_unpacking_failed;
        <span class='refnanny'>__Pyx_GOTREF</span>(__pyx_t_3);
        if (<span class='pyx_c_api'>__Pyx_IternextUnpackEndCheck</span>(__pyx_t_5(__pyx_t_4), 2) &lt; 0) <span class='error_goto'>{__pyx_filename = __pyx_f[0]; __pyx_lineno = 5; __pyx_clineno = __LINE__; goto __pyx_L1_error;}</span>
        __pyx_t_5 = NULL;
        <span class='pyx_macro_api'>__Pyx_DECREF</span>(__pyx_t_4); __pyx_t_4 = 0;
        goto __pyx_L4_unpacking_done;
        __pyx_L3_unpacking_failed:;
        <span class='pyx_macro_api'>__Pyx_DECREF</span>(__pyx_t_4); __pyx_t_4 = 0;
        __pyx_t_5 = NULL;
        if (<span class='pyx_c_api'>__Pyx_IterFinish</span>() == 0) <span class='pyx_c_api'>__Pyx_RaiseNeedMoreValuesError</span>(index);
        <span class='error_goto'>{__pyx_filename = __pyx_f[0]; __pyx_lineno = 5; __pyx_clineno = __LINE__; goto __pyx_L1_error;}</span>
        __pyx_L4_unpacking_done:;
      }
      __pyx_v_m = __pyx_t_2;
      __pyx_t_2 = 0;
      __pyx_v_n = __pyx_t_3;
      __pyx_t_3 = 0;
    </pre><pre class="cython line score-50" onclick='toggleDiv(this)'>+<span class="">06</span>:     <span class="n">n</span><span class="p">,</span> <span class="n">p</span> <span class="o">=</span> <span class="n">v</span><span class="o">.</span><span class="n">shape</span></pre>
    <pre class='cython code score-50 '>  __pyx_t_1 = <span class='pyx_c_api'>__Pyx_PyObject_GetAttrStr</span>(__pyx_v_v, __pyx_n_s_shape);<span class='error_goto'> if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 6; __pyx_clineno = __LINE__; goto __pyx_L1_error;}</span>
      <span class='refnanny'>__Pyx_GOTREF</span>(__pyx_t_1);
      if ((likely(<span class='py_c_api'>PyTuple_CheckExact</span>(__pyx_t_1))) || (<span class='py_c_api'>PyList_CheckExact</span>(__pyx_t_1))) {
        PyObject* sequence = __pyx_t_1;
        #if CYTHON_COMPILING_IN_CPYTHON
        Py_ssize_t size = Py_SIZE(sequence);
        #else
        Py_ssize_t size = <span class='py_c_api'>PySequence_Size</span>(sequence);
        #endif
        if (unlikely(size != 2)) {
          if (size &gt; 2) <span class='pyx_c_api'>__Pyx_RaiseTooManyValuesError</span>(2);
          else if (size &gt;= 0) <span class='pyx_c_api'>__Pyx_RaiseNeedMoreValuesError</span>(size);
          <span class='error_goto'>{__pyx_filename = __pyx_f[0]; __pyx_lineno = 6; __pyx_clineno = __LINE__; goto __pyx_L1_error;}</span>
        }
        #if CYTHON_COMPILING_IN_CPYTHON
        if (likely(<span class='py_c_api'>PyTuple_CheckExact</span>(sequence))) {
          __pyx_t_3 = <span class='py_macro_api'>PyTuple_GET_ITEM</span>(sequence, 0); 
          __pyx_t_2 = <span class='py_macro_api'>PyTuple_GET_ITEM</span>(sequence, 1); 
        } else {
          __pyx_t_3 = <span class='py_macro_api'>PyList_GET_ITEM</span>(sequence, 0); 
          __pyx_t_2 = <span class='py_macro_api'>PyList_GET_ITEM</span>(sequence, 1); 
        }
        <span class='pyx_macro_api'>__Pyx_INCREF</span>(__pyx_t_3);
        <span class='pyx_macro_api'>__Pyx_INCREF</span>(__pyx_t_2);
        #else
        __pyx_t_3 = <span class='py_macro_api'>PySequence_ITEM</span>(sequence, 0);<span class='error_goto'> if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 6; __pyx_clineno = __LINE__; goto __pyx_L1_error;}</span>
        <span class='refnanny'>__Pyx_GOTREF</span>(__pyx_t_3);
        __pyx_t_2 = <span class='py_macro_api'>PySequence_ITEM</span>(sequence, 1);<span class='error_goto'> if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 6; __pyx_clineno = __LINE__; goto __pyx_L1_error;}</span>
        <span class='refnanny'>__Pyx_GOTREF</span>(__pyx_t_2);
        #endif
        <span class='pyx_macro_api'>__Pyx_DECREF</span>(__pyx_t_1); __pyx_t_1 = 0;
      } else {
        Py_ssize_t index = -1;
        __pyx_t_4 = <span class='py_c_api'>PyObject_GetIter</span>(__pyx_t_1);<span class='error_goto'> if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 6; __pyx_clineno = __LINE__; goto __pyx_L1_error;}</span>
        <span class='refnanny'>__Pyx_GOTREF</span>(__pyx_t_4);
        <span class='pyx_macro_api'>__Pyx_DECREF</span>(__pyx_t_1); __pyx_t_1 = 0;
        __pyx_t_5 = Py_TYPE(__pyx_t_4)-&gt;tp_iternext;
        index = 0; __pyx_t_3 = __pyx_t_5(__pyx_t_4); if (unlikely(!__pyx_t_3)) goto __pyx_L5_unpacking_failed;
        <span class='refnanny'>__Pyx_GOTREF</span>(__pyx_t_3);
        index = 1; __pyx_t_2 = __pyx_t_5(__pyx_t_4); if (unlikely(!__pyx_t_2)) goto __pyx_L5_unpacking_failed;
        <span class='refnanny'>__Pyx_GOTREF</span>(__pyx_t_2);
        if (<span class='pyx_c_api'>__Pyx_IternextUnpackEndCheck</span>(__pyx_t_5(__pyx_t_4), 2) &lt; 0) <span class='error_goto'>{__pyx_filename = __pyx_f[0]; __pyx_lineno = 6; __pyx_clineno = __LINE__; goto __pyx_L1_error;}</span>
        __pyx_t_5 = NULL;
        <span class='pyx_macro_api'>__Pyx_DECREF</span>(__pyx_t_4); __pyx_t_4 = 0;
        goto __pyx_L6_unpacking_done;
        __pyx_L5_unpacking_failed:;
        <span class='pyx_macro_api'>__Pyx_DECREF</span>(__pyx_t_4); __pyx_t_4 = 0;
        __pyx_t_5 = NULL;
        if (<span class='pyx_c_api'>__Pyx_IterFinish</span>() == 0) <span class='pyx_c_api'>__Pyx_RaiseNeedMoreValuesError</span>(index);
        <span class='error_goto'>{__pyx_filename = __pyx_f[0]; __pyx_lineno = 6; __pyx_clineno = __LINE__; goto __pyx_L1_error;}</span>
        __pyx_L6_unpacking_done:;
      }
      <span class='pyx_macro_api'>__Pyx_DECREF_SET</span>(__pyx_v_n, __pyx_t_3);
      __pyx_t_3 = 0;
      __pyx_v_p = __pyx_t_2;
      __pyx_t_2 = 0;
    </pre><pre class="cython line score-57" onclick='toggleDiv(this)'>+<span class="">07</span>:     <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">m</span><span class="p">):</span></pre>
    <pre class='cython code score-57 '>  __pyx_t_1 = <span class='py_c_api'>PyTuple_New</span>(1);<span class='error_goto'> if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 7; __pyx_clineno = __LINE__; goto __pyx_L1_error;}</span>
      <span class='refnanny'>__Pyx_GOTREF</span>(__pyx_t_1);
      <span class='pyx_macro_api'>__Pyx_INCREF</span>(__pyx_v_m);
      <span class='refnanny'>__Pyx_GIVEREF</span>(__pyx_v_m);
      <span class='py_macro_api'>PyTuple_SET_ITEM</span>(__pyx_t_1, 0, __pyx_v_m);
      __pyx_t_2 = <span class='pyx_c_api'>__Pyx_PyObject_Call</span>(__pyx_builtin_range, __pyx_t_1, NULL);<span class='error_goto'> if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 7; __pyx_clineno = __LINE__; goto __pyx_L1_error;}</span>
      <span class='refnanny'>__Pyx_GOTREF</span>(__pyx_t_2);
      <span class='pyx_macro_api'>__Pyx_DECREF</span>(__pyx_t_1); __pyx_t_1 = 0;
      if (likely(<span class='py_c_api'>PyList_CheckExact</span>(__pyx_t_2)) || <span class='py_c_api'>PyTuple_CheckExact</span>(__pyx_t_2)) {
        __pyx_t_1 = __pyx_t_2; <span class='pyx_macro_api'>__Pyx_INCREF</span>(__pyx_t_1); __pyx_t_6 = 0;
        __pyx_t_7 = NULL;
      } else {
        __pyx_t_6 = -1; __pyx_t_1 = <span class='py_c_api'>PyObject_GetIter</span>(__pyx_t_2);<span class='error_goto'> if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 7; __pyx_clineno = __LINE__; goto __pyx_L1_error;}</span>
        <span class='refnanny'>__Pyx_GOTREF</span>(__pyx_t_1);
        __pyx_t_7 = Py_TYPE(__pyx_t_1)-&gt;tp_iternext;<span class='error_goto'> if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 7; __pyx_clineno = __LINE__; goto __pyx_L1_error;}</span>
      }
      <span class='pyx_macro_api'>__Pyx_DECREF</span>(__pyx_t_2); __pyx_t_2 = 0;
      for (;;) {
        if (likely(!__pyx_t_7)) {
          if (likely(<span class='py_c_api'>PyList_CheckExact</span>(__pyx_t_1))) {
            if (__pyx_t_6 &gt;= <span class='py_macro_api'>PyList_GET_SIZE</span>(__pyx_t_1)) break;
            #if CYTHON_COMPILING_IN_CPYTHON
            __pyx_t_2 = <span class='py_macro_api'>PyList_GET_ITEM</span>(__pyx_t_1, __pyx_t_6); <span class='pyx_macro_api'>__Pyx_INCREF</span>(__pyx_t_2); __pyx_t_6++;<span class='error_goto'> if (unlikely(0 &lt; 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 7; __pyx_clineno = __LINE__; goto __pyx_L1_error;}</span>
            #else
            __pyx_t_2 = <span class='py_macro_api'>PySequence_ITEM</span>(__pyx_t_1, __pyx_t_6); __pyx_t_6++;<span class='error_goto'> if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 7; __pyx_clineno = __LINE__; goto __pyx_L1_error;}</span>
            <span class='refnanny'>__Pyx_GOTREF</span>(__pyx_t_2);
            #endif
          } else {
            if (__pyx_t_6 &gt;= <span class='py_macro_api'>PyTuple_GET_SIZE</span>(__pyx_t_1)) break;
            #if CYTHON_COMPILING_IN_CPYTHON
            __pyx_t_2 = <span class='py_macro_api'>PyTuple_GET_ITEM</span>(__pyx_t_1, __pyx_t_6); <span class='pyx_macro_api'>__Pyx_INCREF</span>(__pyx_t_2); __pyx_t_6++;<span class='error_goto'> if (unlikely(0 &lt; 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 7; __pyx_clineno = __LINE__; goto __pyx_L1_error;}</span>
            #else
            __pyx_t_2 = <span class='py_macro_api'>PySequence_ITEM</span>(__pyx_t_1, __pyx_t_6); __pyx_t_6++;<span class='error_goto'> if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 7; __pyx_clineno = __LINE__; goto __pyx_L1_error;}</span>
            <span class='refnanny'>__Pyx_GOTREF</span>(__pyx_t_2);
            #endif
          }
        } else {
          __pyx_t_2 = __pyx_t_7(__pyx_t_1);
          if (unlikely(!__pyx_t_2)) {
            PyObject* exc_type = <span class='py_c_api'>PyErr_Occurred</span>();
            if (exc_type) {
              if (likely(exc_type == PyExc_StopIteration || <span class='py_c_api'>PyErr_GivenExceptionMatches</span>(exc_type, PyExc_StopIteration))) <span class='py_c_api'>PyErr_Clear</span>();
              else <span class='error_goto'>{__pyx_filename = __pyx_f[0]; __pyx_lineno = 7; __pyx_clineno = __LINE__; goto __pyx_L1_error;}</span>
            }
            break;
          }
          <span class='refnanny'>__Pyx_GOTREF</span>(__pyx_t_2);
        }
        <span class='pyx_macro_api'>__Pyx_XDECREF_SET</span>(__pyx_v_i, __pyx_t_2);
        __pyx_t_2 = 0;
    /* â¦ */
      }
      <span class='pyx_macro_api'>__Pyx_DECREF</span>(__pyx_t_1); __pyx_t_1 = 0;
    </pre><pre class="cython line score-57" onclick='toggleDiv(this)'>+<span class="">08</span>:         <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">p</span><span class="p">):</span></pre>
    <pre class='cython code score-57 '>    __pyx_t_2 = <span class='py_c_api'>PyTuple_New</span>(1);<span class='error_goto'> if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 8; __pyx_clineno = __LINE__; goto __pyx_L1_error;}</span>
        <span class='refnanny'>__Pyx_GOTREF</span>(__pyx_t_2);
        <span class='pyx_macro_api'>__Pyx_INCREF</span>(__pyx_v_p);
        <span class='refnanny'>__Pyx_GIVEREF</span>(__pyx_v_p);
        <span class='py_macro_api'>PyTuple_SET_ITEM</span>(__pyx_t_2, 0, __pyx_v_p);
        __pyx_t_3 = <span class='pyx_c_api'>__Pyx_PyObject_Call</span>(__pyx_builtin_range, __pyx_t_2, NULL);<span class='error_goto'> if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 8; __pyx_clineno = __LINE__; goto __pyx_L1_error;}</span>
        <span class='refnanny'>__Pyx_GOTREF</span>(__pyx_t_3);
        <span class='pyx_macro_api'>__Pyx_DECREF</span>(__pyx_t_2); __pyx_t_2 = 0;
        if (likely(<span class='py_c_api'>PyList_CheckExact</span>(__pyx_t_3)) || <span class='py_c_api'>PyTuple_CheckExact</span>(__pyx_t_3)) {
          __pyx_t_2 = __pyx_t_3; <span class='pyx_macro_api'>__Pyx_INCREF</span>(__pyx_t_2); __pyx_t_8 = 0;
          __pyx_t_9 = NULL;
        } else {
          __pyx_t_8 = -1; __pyx_t_2 = <span class='py_c_api'>PyObject_GetIter</span>(__pyx_t_3);<span class='error_goto'> if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 8; __pyx_clineno = __LINE__; goto __pyx_L1_error;}</span>
          <span class='refnanny'>__Pyx_GOTREF</span>(__pyx_t_2);
          __pyx_t_9 = Py_TYPE(__pyx_t_2)-&gt;tp_iternext;<span class='error_goto'> if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 8; __pyx_clineno = __LINE__; goto __pyx_L1_error;}</span>
        }
        <span class='pyx_macro_api'>__Pyx_DECREF</span>(__pyx_t_3); __pyx_t_3 = 0;
        for (;;) {
          if (likely(!__pyx_t_9)) {
            if (likely(<span class='py_c_api'>PyList_CheckExact</span>(__pyx_t_2))) {
              if (__pyx_t_8 &gt;= <span class='py_macro_api'>PyList_GET_SIZE</span>(__pyx_t_2)) break;
              #if CYTHON_COMPILING_IN_CPYTHON
              __pyx_t_3 = <span class='py_macro_api'>PyList_GET_ITEM</span>(__pyx_t_2, __pyx_t_8); <span class='pyx_macro_api'>__Pyx_INCREF</span>(__pyx_t_3); __pyx_t_8++;<span class='error_goto'> if (unlikely(0 &lt; 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 8; __pyx_clineno = __LINE__; goto __pyx_L1_error;}</span>
              #else
              __pyx_t_3 = <span class='py_macro_api'>PySequence_ITEM</span>(__pyx_t_2, __pyx_t_8); __pyx_t_8++;<span class='error_goto'> if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 8; __pyx_clineno = __LINE__; goto __pyx_L1_error;}</span>
              <span class='refnanny'>__Pyx_GOTREF</span>(__pyx_t_3);
              #endif
            } else {
              if (__pyx_t_8 &gt;= <span class='py_macro_api'>PyTuple_GET_SIZE</span>(__pyx_t_2)) break;
              #if CYTHON_COMPILING_IN_CPYTHON
              __pyx_t_3 = <span class='py_macro_api'>PyTuple_GET_ITEM</span>(__pyx_t_2, __pyx_t_8); <span class='pyx_macro_api'>__Pyx_INCREF</span>(__pyx_t_3); __pyx_t_8++;<span class='error_goto'> if (unlikely(0 &lt; 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 8; __pyx_clineno = __LINE__; goto __pyx_L1_error;}</span>
              #else
              __pyx_t_3 = <span class='py_macro_api'>PySequence_ITEM</span>(__pyx_t_2, __pyx_t_8); __pyx_t_8++;<span class='error_goto'> if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 8; __pyx_clineno = __LINE__; goto __pyx_L1_error;}</span>
              <span class='refnanny'>__Pyx_GOTREF</span>(__pyx_t_3);
              #endif
            }
          } else {
            __pyx_t_3 = __pyx_t_9(__pyx_t_2);
            if (unlikely(!__pyx_t_3)) {
              PyObject* exc_type = <span class='py_c_api'>PyErr_Occurred</span>();
              if (exc_type) {
                if (likely(exc_type == PyExc_StopIteration || <span class='py_c_api'>PyErr_GivenExceptionMatches</span>(exc_type, PyExc_StopIteration))) <span class='py_c_api'>PyErr_Clear</span>();
                else <span class='error_goto'>{__pyx_filename = __pyx_f[0]; __pyx_lineno = 8; __pyx_clineno = __LINE__; goto __pyx_L1_error;}</span>
              }
              break;
            }
            <span class='refnanny'>__Pyx_GOTREF</span>(__pyx_t_3);
          }
          <span class='pyx_macro_api'>__Pyx_XDECREF_SET</span>(__pyx_v_j, __pyx_t_3);
          __pyx_t_3 = 0;
    /* â¦ */
        }
        <span class='pyx_macro_api'>__Pyx_DECREF</span>(__pyx_t_2); __pyx_t_2 = 0;
    </pre><pre class="cython line score-15" onclick='toggleDiv(this)'>+<span class="">09</span>:             <span class="n">res</span><span class="p">[</span><span class="n">i</span><span class="p">,</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="mf">0</span></pre>
    <pre class='cython code score-15 '>      __pyx_t_3 = <span class='py_c_api'>PyTuple_New</span>(2);<span class='error_goto'> if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 9; __pyx_clineno = __LINE__; goto __pyx_L1_error;}</span>
          <span class='refnanny'>__Pyx_GOTREF</span>(__pyx_t_3);
          <span class='pyx_macro_api'>__Pyx_INCREF</span>(__pyx_v_i);
          <span class='refnanny'>__Pyx_GIVEREF</span>(__pyx_v_i);
          <span class='py_macro_api'>PyTuple_SET_ITEM</span>(__pyx_t_3, 0, __pyx_v_i);
          <span class='pyx_macro_api'>__Pyx_INCREF</span>(__pyx_v_j);
          <span class='refnanny'>__Pyx_GIVEREF</span>(__pyx_v_j);
          <span class='py_macro_api'>PyTuple_SET_ITEM</span>(__pyx_t_3, 1, __pyx_v_j);
          if (unlikely(<span class='py_c_api'>PyObject_SetItem</span>(__pyx_v_res, __pyx_t_3, __pyx_int_0) &lt; 0)) <span class='error_goto'>{__pyx_filename = __pyx_f[0]; __pyx_lineno = 9; __pyx_clineno = __LINE__; goto __pyx_L1_error;}</span>
          <span class='pyx_macro_api'>__Pyx_DECREF</span>(__pyx_t_3); __pyx_t_3 = 0;
    </pre><pre class="cython line score-57" onclick='toggleDiv(this)'>+<span class="">10</span>:             <span class="k">for</span> <span class="n">k</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">n</span><span class="p">):</span></pre>
    <pre class='cython code score-57 '>      __pyx_t_3 = <span class='py_c_api'>PyTuple_New</span>(1);<span class='error_goto'> if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 10; __pyx_clineno = __LINE__; goto __pyx_L1_error;}</span>
          <span class='refnanny'>__Pyx_GOTREF</span>(__pyx_t_3);
          <span class='pyx_macro_api'>__Pyx_INCREF</span>(__pyx_v_n);
          <span class='refnanny'>__Pyx_GIVEREF</span>(__pyx_v_n);
          <span class='py_macro_api'>PyTuple_SET_ITEM</span>(__pyx_t_3, 0, __pyx_v_n);
          __pyx_t_4 = <span class='pyx_c_api'>__Pyx_PyObject_Call</span>(__pyx_builtin_range, __pyx_t_3, NULL);<span class='error_goto'> if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 10; __pyx_clineno = __LINE__; goto __pyx_L1_error;}</span>
          <span class='refnanny'>__Pyx_GOTREF</span>(__pyx_t_4);
          <span class='pyx_macro_api'>__Pyx_DECREF</span>(__pyx_t_3); __pyx_t_3 = 0;
          if (likely(<span class='py_c_api'>PyList_CheckExact</span>(__pyx_t_4)) || <span class='py_c_api'>PyTuple_CheckExact</span>(__pyx_t_4)) {
            __pyx_t_3 = __pyx_t_4; <span class='pyx_macro_api'>__Pyx_INCREF</span>(__pyx_t_3); __pyx_t_10 = 0;
            __pyx_t_11 = NULL;
          } else {
            __pyx_t_10 = -1; __pyx_t_3 = <span class='py_c_api'>PyObject_GetIter</span>(__pyx_t_4);<span class='error_goto'> if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 10; __pyx_clineno = __LINE__; goto __pyx_L1_error;}</span>
            <span class='refnanny'>__Pyx_GOTREF</span>(__pyx_t_3);
            __pyx_t_11 = Py_TYPE(__pyx_t_3)-&gt;tp_iternext;<span class='error_goto'> if (unlikely(!__pyx_t_11)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 10; __pyx_clineno = __LINE__; goto __pyx_L1_error;}</span>
          }
          <span class='pyx_macro_api'>__Pyx_DECREF</span>(__pyx_t_4); __pyx_t_4 = 0;
          for (;;) {
            if (likely(!__pyx_t_11)) {
              if (likely(<span class='py_c_api'>PyList_CheckExact</span>(__pyx_t_3))) {
                if (__pyx_t_10 &gt;= <span class='py_macro_api'>PyList_GET_SIZE</span>(__pyx_t_3)) break;
                #if CYTHON_COMPILING_IN_CPYTHON
                __pyx_t_4 = <span class='py_macro_api'>PyList_GET_ITEM</span>(__pyx_t_3, __pyx_t_10); <span class='pyx_macro_api'>__Pyx_INCREF</span>(__pyx_t_4); __pyx_t_10++;<span class='error_goto'> if (unlikely(0 &lt; 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 10; __pyx_clineno = __LINE__; goto __pyx_L1_error;}</span>
                #else
                __pyx_t_4 = <span class='py_macro_api'>PySequence_ITEM</span>(__pyx_t_3, __pyx_t_10); __pyx_t_10++;<span class='error_goto'> if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 10; __pyx_clineno = __LINE__; goto __pyx_L1_error;}</span>
                <span class='refnanny'>__Pyx_GOTREF</span>(__pyx_t_4);
                #endif
              } else {
                if (__pyx_t_10 &gt;= <span class='py_macro_api'>PyTuple_GET_SIZE</span>(__pyx_t_3)) break;
                #if CYTHON_COMPILING_IN_CPYTHON
                __pyx_t_4 = <span class='py_macro_api'>PyTuple_GET_ITEM</span>(__pyx_t_3, __pyx_t_10); <span class='pyx_macro_api'>__Pyx_INCREF</span>(__pyx_t_4); __pyx_t_10++;<span class='error_goto'> if (unlikely(0 &lt; 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 10; __pyx_clineno = __LINE__; goto __pyx_L1_error;}</span>
                #else
                __pyx_t_4 = <span class='py_macro_api'>PySequence_ITEM</span>(__pyx_t_3, __pyx_t_10); __pyx_t_10++;<span class='error_goto'> if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 10; __pyx_clineno = __LINE__; goto __pyx_L1_error;}</span>
                <span class='refnanny'>__Pyx_GOTREF</span>(__pyx_t_4);
                #endif
              }
            } else {
              __pyx_t_4 = __pyx_t_11(__pyx_t_3);
              if (unlikely(!__pyx_t_4)) {
                PyObject* exc_type = <span class='py_c_api'>PyErr_Occurred</span>();
                if (exc_type) {
                  if (likely(exc_type == PyExc_StopIteration || <span class='py_c_api'>PyErr_GivenExceptionMatches</span>(exc_type, PyExc_StopIteration))) <span class='py_c_api'>PyErr_Clear</span>();
                  else <span class='error_goto'>{__pyx_filename = __pyx_f[0]; __pyx_lineno = 10; __pyx_clineno = __LINE__; goto __pyx_L1_error;}</span>
                }
                break;
              }
              <span class='refnanny'>__Pyx_GOTREF</span>(__pyx_t_4);
            }
            <span class='pyx_macro_api'>__Pyx_XDECREF_SET</span>(__pyx_v_k, __pyx_t_4);
            __pyx_t_4 = 0;
    /* â¦ */
          }
          <span class='pyx_macro_api'>__Pyx_DECREF</span>(__pyx_t_3); __pyx_t_3 = 0;
    </pre><pre class="cython line score-65" onclick='toggleDiv(this)'>+<span class="">11</span>:                 <span class="n">res</span><span class="p">[</span><span class="n">i</span><span class="p">,</span><span class="n">j</span><span class="p">]</span> <span class="o">+=</span> <span class="n">u</span><span class="p">[</span><span class="n">i</span><span class="p">,</span><span class="n">k</span><span class="p">]</span> <span class="o">*</span> <span class="n">v</span><span class="p">[</span><span class="n">k</span><span class="p">,</span><span class="n">j</span><span class="p">]</span></pre>
    <pre class='cython code score-65 '>        __pyx_t_4 = <span class='py_c_api'>PyTuple_New</span>(2);<span class='error_goto'> if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 11; __pyx_clineno = __LINE__; goto __pyx_L1_error;}</span>
            <span class='refnanny'>__Pyx_GOTREF</span>(__pyx_t_4);
            <span class='pyx_macro_api'>__Pyx_INCREF</span>(__pyx_v_i);
            <span class='refnanny'>__Pyx_GIVEREF</span>(__pyx_v_i);
            <span class='py_macro_api'>PyTuple_SET_ITEM</span>(__pyx_t_4, 0, __pyx_v_i);
            <span class='pyx_macro_api'>__Pyx_INCREF</span>(__pyx_v_j);
            <span class='refnanny'>__Pyx_GIVEREF</span>(__pyx_v_j);
            <span class='py_macro_api'>PyTuple_SET_ITEM</span>(__pyx_t_4, 1, __pyx_v_j);
            __pyx_t_12 = <span class='py_c_api'>PyObject_GetItem</span>(__pyx_v_res, __pyx_t_4);<span class='error_goto'> if (unlikely(__pyx_t_12 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 11; __pyx_clineno = __LINE__; goto __pyx_L1_error;}</span>;
            <span class='refnanny'>__Pyx_GOTREF</span>(__pyx_t_12);
            __pyx_t_13 = <span class='py_c_api'>PyTuple_New</span>(2);<span class='error_goto'> if (unlikely(!__pyx_t_13)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 11; __pyx_clineno = __LINE__; goto __pyx_L1_error;}</span>
            <span class='refnanny'>__Pyx_GOTREF</span>(__pyx_t_13);
            <span class='pyx_macro_api'>__Pyx_INCREF</span>(__pyx_v_i);
            <span class='refnanny'>__Pyx_GIVEREF</span>(__pyx_v_i);
            <span class='py_macro_api'>PyTuple_SET_ITEM</span>(__pyx_t_13, 0, __pyx_v_i);
            <span class='pyx_macro_api'>__Pyx_INCREF</span>(__pyx_v_k);
            <span class='refnanny'>__Pyx_GIVEREF</span>(__pyx_v_k);
            <span class='py_macro_api'>PyTuple_SET_ITEM</span>(__pyx_t_13, 1, __pyx_v_k);
            __pyx_t_14 = <span class='py_c_api'>PyObject_GetItem</span>(__pyx_v_u, __pyx_t_13);<span class='error_goto'> if (unlikely(__pyx_t_14 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 11; __pyx_clineno = __LINE__; goto __pyx_L1_error;}</span>;
            <span class='refnanny'>__Pyx_GOTREF</span>(__pyx_t_14);
            <span class='pyx_macro_api'>__Pyx_DECREF</span>(__pyx_t_13); __pyx_t_13 = 0;
            __pyx_t_13 = <span class='py_c_api'>PyTuple_New</span>(2);<span class='error_goto'> if (unlikely(!__pyx_t_13)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 11; __pyx_clineno = __LINE__; goto __pyx_L1_error;}</span>
            <span class='refnanny'>__Pyx_GOTREF</span>(__pyx_t_13);
            <span class='pyx_macro_api'>__Pyx_INCREF</span>(__pyx_v_k);
            <span class='refnanny'>__Pyx_GIVEREF</span>(__pyx_v_k);
            <span class='py_macro_api'>PyTuple_SET_ITEM</span>(__pyx_t_13, 0, __pyx_v_k);
            <span class='pyx_macro_api'>__Pyx_INCREF</span>(__pyx_v_j);
            <span class='refnanny'>__Pyx_GIVEREF</span>(__pyx_v_j);
            <span class='py_macro_api'>PyTuple_SET_ITEM</span>(__pyx_t_13, 1, __pyx_v_j);
            __pyx_t_15 = <span class='py_c_api'>PyObject_GetItem</span>(__pyx_v_v, __pyx_t_13);<span class='error_goto'> if (unlikely(__pyx_t_15 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 11; __pyx_clineno = __LINE__; goto __pyx_L1_error;}</span>;
            <span class='refnanny'>__Pyx_GOTREF</span>(__pyx_t_15);
            <span class='pyx_macro_api'>__Pyx_DECREF</span>(__pyx_t_13); __pyx_t_13 = 0;
            __pyx_t_13 = <span class='py_c_api'>PyNumber_Multiply</span>(__pyx_t_14, __pyx_t_15);<span class='error_goto'> if (unlikely(!__pyx_t_13)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 11; __pyx_clineno = __LINE__; goto __pyx_L1_error;}</span>
            <span class='refnanny'>__Pyx_GOTREF</span>(__pyx_t_13);
            <span class='pyx_macro_api'>__Pyx_DECREF</span>(__pyx_t_14); __pyx_t_14 = 0;
            <span class='pyx_macro_api'>__Pyx_DECREF</span>(__pyx_t_15); __pyx_t_15 = 0;
            __pyx_t_15 = <span class='py_c_api'>PyNumber_InPlaceAdd</span>(__pyx_t_12, __pyx_t_13);<span class='error_goto'> if (unlikely(!__pyx_t_15)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 11; __pyx_clineno = __LINE__; goto __pyx_L1_error;}</span>
            <span class='refnanny'>__Pyx_GOTREF</span>(__pyx_t_15);
            <span class='pyx_macro_api'>__Pyx_DECREF</span>(__pyx_t_12); __pyx_t_12 = 0;
            <span class='pyx_macro_api'>__Pyx_DECREF</span>(__pyx_t_13); __pyx_t_13 = 0;
            if (unlikely(<span class='py_c_api'>PyObject_SetItem</span>(__pyx_v_res, __pyx_t_4, __pyx_t_15) &lt; 0)) <span class='error_goto'>{__pyx_filename = __pyx_f[0]; __pyx_lineno = 11; __pyx_clineno = __LINE__; goto __pyx_L1_error;}</span>
            <span class='pyx_macro_api'>__Pyx_DECREF</span>(__pyx_t_15); __pyx_t_15 = 0;
            <span class='pyx_macro_api'>__Pyx_DECREF</span>(__pyx_t_4); __pyx_t_4 = 0;
    </pre><pre class="cython line score-2" onclick='toggleDiv(this)'>+<span class="">12</span>:     <span class="k">return</span> <span class="n">res</span></pre>
    <pre class='cython code score-2 '>  <span class='pyx_macro_api'>__Pyx_XDECREF</span>(__pyx_r);
      <span class='pyx_macro_api'>__Pyx_INCREF</span>(__pyx_v_res);
      __pyx_r = __pyx_v_res;
      goto __pyx_L0;
    </pre></div></body></html>



Using Cython cdefs and directives
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code:: python

    %%cython -a
    
    import cython
    
    @cython.boundscheck(False)
    @cython.wraparound(False)
    def matrix_multiply1(double[:,:] u, double[:, :] v, double[:, :] res):
        cdef int i, j, k
        cdef int m, n, p
    
        m = u.shape[0]
        n = u.shape[1]
        p = v.shape[1]
    
        with cython.nogil:
            for i in range(m):
                for j in range(p):
                    res[i,j] = 0
                    for k in range(n):
                        res[i,j] += u[i,k] * v[k,j]




.. raw:: html

    <!DOCTYPE html>
    <!-- Generated by Cython 0.23.5 -->
    <html>
    <head>
        <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
        <title>Cython: _cython_magic_1d20d9c3ed3cbd86dd4904fc3a8795cf.pyx</title>
        <style type="text/css">
        
    body.cython { font-family: courier; font-size: 12; }
    
    .cython.tag  {  }
    .cython.line { margin: 0em }
    .cython.code { font-size: 9; color: #444444; display: none; margin: 0px 0px 0px 8px; border-left: 8px none; }
    
    .cython.line .run { background-color: #B0FFB0; }
    .cython.line .mis { background-color: #FFB0B0; }
    .cython.code.run  { border-left: 8px solid #B0FFB0; }
    .cython.code.mis  { border-left: 8px solid #FFB0B0; }
    
    .cython.code .py_c_api  { color: red; }
    .cython.code .py_macro_api  { color: #FF7000; }
    .cython.code .pyx_c_api  { color: #FF3000; }
    .cython.code .pyx_macro_api  { color: #FF7000; }
    .cython.code .refnanny  { color: #FFA000; }
    .cython.code .trace  { color: #FFA000; }
    .cython.code .error_goto  { color: #FFA000; }
    
    .cython.code .coerce  { color: #008000; border: 1px dotted #008000 }
    .cython.code .py_attr { color: #FF0000; font-weight: bold; }
    .cython.code .c_attr  { color: #0000FF; }
    .cython.code .py_call { color: #FF0000; font-weight: bold; }
    .cython.code .c_call  { color: #0000FF; }
    
    .cython.score-0 {background-color: #FFFFff;}
    .cython.score-1 {background-color: #FFFFe7;}
    .cython.score-2 {background-color: #FFFFd4;}
    .cython.score-3 {background-color: #FFFFc4;}
    .cython.score-4 {background-color: #FFFFb6;}
    .cython.score-5 {background-color: #FFFFaa;}
    .cython.score-6 {background-color: #FFFF9f;}
    .cython.score-7 {background-color: #FFFF96;}
    .cython.score-8 {background-color: #FFFF8d;}
    .cython.score-9 {background-color: #FFFF86;}
    .cython.score-10 {background-color: #FFFF7f;}
    .cython.score-11 {background-color: #FFFF79;}
    .cython.score-12 {background-color: #FFFF73;}
    .cython.score-13 {background-color: #FFFF6e;}
    .cython.score-14 {background-color: #FFFF6a;}
    .cython.score-15 {background-color: #FFFF66;}
    .cython.score-16 {background-color: #FFFF62;}
    .cython.score-17 {background-color: #FFFF5e;}
    .cython.score-18 {background-color: #FFFF5b;}
    .cython.score-19 {background-color: #FFFF57;}
    .cython.score-20 {background-color: #FFFF55;}
    .cython.score-21 {background-color: #FFFF52;}
    .cython.score-22 {background-color: #FFFF4f;}
    .cython.score-23 {background-color: #FFFF4d;}
    .cython.score-24 {background-color: #FFFF4b;}
    .cython.score-25 {background-color: #FFFF48;}
    .cython.score-26 {background-color: #FFFF46;}
    .cython.score-27 {background-color: #FFFF44;}
    .cython.score-28 {background-color: #FFFF43;}
    .cython.score-29 {background-color: #FFFF41;}
    .cython.score-30 {background-color: #FFFF3f;}
    .cython.score-31 {background-color: #FFFF3e;}
    .cython.score-32 {background-color: #FFFF3c;}
    .cython.score-33 {background-color: #FFFF3b;}
    .cython.score-34 {background-color: #FFFF39;}
    .cython.score-35 {background-color: #FFFF38;}
    .cython.score-36 {background-color: #FFFF37;}
    .cython.score-37 {background-color: #FFFF36;}
    .cython.score-38 {background-color: #FFFF35;}
    .cython.score-39 {background-color: #FFFF34;}
    .cython.score-40 {background-color: #FFFF33;}
    .cython.score-41 {background-color: #FFFF32;}
    .cython.score-42 {background-color: #FFFF31;}
    .cython.score-43 {background-color: #FFFF30;}
    .cython.score-44 {background-color: #FFFF2f;}
    .cython.score-45 {background-color: #FFFF2e;}
    .cython.score-46 {background-color: #FFFF2d;}
    .cython.score-47 {background-color: #FFFF2c;}
    .cython.score-48 {background-color: #FFFF2b;}
    .cython.score-49 {background-color: #FFFF2b;}
    .cython.score-50 {background-color: #FFFF2a;}
    .cython.score-51 {background-color: #FFFF29;}
    .cython.score-52 {background-color: #FFFF29;}
    .cython.score-53 {background-color: #FFFF28;}
    .cython.score-54 {background-color: #FFFF27;}
    .cython.score-55 {background-color: #FFFF27;}
    .cython.score-56 {background-color: #FFFF26;}
    .cython.score-57 {background-color: #FFFF26;}
    .cython.score-58 {background-color: #FFFF25;}
    .cython.score-59 {background-color: #FFFF24;}
    .cython.score-60 {background-color: #FFFF24;}
    .cython.score-61 {background-color: #FFFF23;}
    .cython.score-62 {background-color: #FFFF23;}
    .cython.score-63 {background-color: #FFFF22;}
    .cython.score-64 {background-color: #FFFF22;}
    .cython.score-65 {background-color: #FFFF22;}
    .cython.score-66 {background-color: #FFFF21;}
    .cython.score-67 {background-color: #FFFF21;}
    .cython.score-68 {background-color: #FFFF20;}
    .cython.score-69 {background-color: #FFFF20;}
    .cython.score-70 {background-color: #FFFF1f;}
    .cython.score-71 {background-color: #FFFF1f;}
    .cython.score-72 {background-color: #FFFF1f;}
    .cython.score-73 {background-color: #FFFF1e;}
    .cython.score-74 {background-color: #FFFF1e;}
    .cython.score-75 {background-color: #FFFF1e;}
    .cython.score-76 {background-color: #FFFF1d;}
    .cython.score-77 {background-color: #FFFF1d;}
    .cython.score-78 {background-color: #FFFF1c;}
    .cython.score-79 {background-color: #FFFF1c;}
    .cython.score-80 {background-color: #FFFF1c;}
    .cython.score-81 {background-color: #FFFF1c;}
    .cython.score-82 {background-color: #FFFF1b;}
    .cython.score-83 {background-color: #FFFF1b;}
    .cython.score-84 {background-color: #FFFF1b;}
    .cython.score-85 {background-color: #FFFF1a;}
    .cython.score-86 {background-color: #FFFF1a;}
    .cython.score-87 {background-color: #FFFF1a;}
    .cython.score-88 {background-color: #FFFF1a;}
    .cython.score-89 {background-color: #FFFF19;}
    .cython.score-90 {background-color: #FFFF19;}
    .cython.score-91 {background-color: #FFFF19;}
    .cython.score-92 {background-color: #FFFF19;}
    .cython.score-93 {background-color: #FFFF18;}
    .cython.score-94 {background-color: #FFFF18;}
    .cython.score-95 {background-color: #FFFF18;}
    .cython.score-96 {background-color: #FFFF18;}
    .cython.score-97 {background-color: #FFFF17;}
    .cython.score-98 {background-color: #FFFF17;}
    .cython.score-99 {background-color: #FFFF17;}
    .cython.score-100 {background-color: #FFFF17;}
    .cython.score-101 {background-color: #FFFF16;}
    .cython.score-102 {background-color: #FFFF16;}
    .cython.score-103 {background-color: #FFFF16;}
    .cython.score-104 {background-color: #FFFF16;}
    .cython.score-105 {background-color: #FFFF16;}
    .cython.score-106 {background-color: #FFFF15;}
    .cython.score-107 {background-color: #FFFF15;}
    .cython.score-108 {background-color: #FFFF15;}
    .cython.score-109 {background-color: #FFFF15;}
    .cython.score-110 {background-color: #FFFF15;}
    .cython.score-111 {background-color: #FFFF15;}
    .cython.score-112 {background-color: #FFFF14;}
    .cython.score-113 {background-color: #FFFF14;}
    .cython.score-114 {background-color: #FFFF14;}
    .cython.score-115 {background-color: #FFFF14;}
    .cython.score-116 {background-color: #FFFF14;}
    .cython.score-117 {background-color: #FFFF14;}
    .cython.score-118 {background-color: #FFFF13;}
    .cython.score-119 {background-color: #FFFF13;}
    .cython.score-120 {background-color: #FFFF13;}
    .cython.score-121 {background-color: #FFFF13;}
    .cython.score-122 {background-color: #FFFF13;}
    .cython.score-123 {background-color: #FFFF13;}
    .cython.score-124 {background-color: #FFFF13;}
    .cython.score-125 {background-color: #FFFF12;}
    .cython.score-126 {background-color: #FFFF12;}
    .cython.score-127 {background-color: #FFFF12;}
    .cython.score-128 {background-color: #FFFF12;}
    .cython.score-129 {background-color: #FFFF12;}
    .cython.score-130 {background-color: #FFFF12;}
    .cython.score-131 {background-color: #FFFF12;}
    .cython.score-132 {background-color: #FFFF11;}
    .cython.score-133 {background-color: #FFFF11;}
    .cython.score-134 {background-color: #FFFF11;}
    .cython.score-135 {background-color: #FFFF11;}
    .cython.score-136 {background-color: #FFFF11;}
    .cython.score-137 {background-color: #FFFF11;}
    .cython.score-138 {background-color: #FFFF11;}
    .cython.score-139 {background-color: #FFFF11;}
    .cython.score-140 {background-color: #FFFF11;}
    .cython.score-141 {background-color: #FFFF10;}
    .cython.score-142 {background-color: #FFFF10;}
    .cython.score-143 {background-color: #FFFF10;}
    .cython.score-144 {background-color: #FFFF10;}
    .cython.score-145 {background-color: #FFFF10;}
    .cython.score-146 {background-color: #FFFF10;}
    .cython.score-147 {background-color: #FFFF10;}
    .cython.score-148 {background-color: #FFFF10;}
    .cython.score-149 {background-color: #FFFF10;}
    .cython.score-150 {background-color: #FFFF0f;}
    .cython.score-151 {background-color: #FFFF0f;}
    .cython.score-152 {background-color: #FFFF0f;}
    .cython.score-153 {background-color: #FFFF0f;}
    .cython.score-154 {background-color: #FFFF0f;}
    .cython.score-155 {background-color: #FFFF0f;}
    .cython.score-156 {background-color: #FFFF0f;}
    .cython.score-157 {background-color: #FFFF0f;}
    .cython.score-158 {background-color: #FFFF0f;}
    .cython.score-159 {background-color: #FFFF0f;}
    .cython.score-160 {background-color: #FFFF0f;}
    .cython.score-161 {background-color: #FFFF0e;}
    .cython.score-162 {background-color: #FFFF0e;}
    .cython.score-163 {background-color: #FFFF0e;}
    .cython.score-164 {background-color: #FFFF0e;}
    .cython.score-165 {background-color: #FFFF0e;}
    .cython.score-166 {background-color: #FFFF0e;}
    .cython.score-167 {background-color: #FFFF0e;}
    .cython.score-168 {background-color: #FFFF0e;}
    .cython.score-169 {background-color: #FFFF0e;}
    .cython.score-170 {background-color: #FFFF0e;}
    .cython.score-171 {background-color: #FFFF0e;}
    .cython.score-172 {background-color: #FFFF0e;}
    .cython.score-173 {background-color: #FFFF0d;}
    .cython.score-174 {background-color: #FFFF0d;}
    .cython.score-175 {background-color: #FFFF0d;}
    .cython.score-176 {background-color: #FFFF0d;}
    .cython.score-177 {background-color: #FFFF0d;}
    .cython.score-178 {background-color: #FFFF0d;}
    .cython.score-179 {background-color: #FFFF0d;}
    .cython.score-180 {background-color: #FFFF0d;}
    .cython.score-181 {background-color: #FFFF0d;}
    .cython.score-182 {background-color: #FFFF0d;}
    .cython.score-183 {background-color: #FFFF0d;}
    .cython.score-184 {background-color: #FFFF0d;}
    .cython.score-185 {background-color: #FFFF0d;}
    .cython.score-186 {background-color: #FFFF0d;}
    .cython.score-187 {background-color: #FFFF0c;}
    .cython.score-188 {background-color: #FFFF0c;}
    .cython.score-189 {background-color: #FFFF0c;}
    .cython.score-190 {background-color: #FFFF0c;}
    .cython.score-191 {background-color: #FFFF0c;}
    .cython.score-192 {background-color: #FFFF0c;}
    .cython.score-193 {background-color: #FFFF0c;}
    .cython.score-194 {background-color: #FFFF0c;}
    .cython.score-195 {background-color: #FFFF0c;}
    .cython.score-196 {background-color: #FFFF0c;}
    .cython.score-197 {background-color: #FFFF0c;}
    .cython.score-198 {background-color: #FFFF0c;}
    .cython.score-199 {background-color: #FFFF0c;}
    .cython.score-200 {background-color: #FFFF0c;}
    .cython.score-201 {background-color: #FFFF0c;}
    .cython.score-202 {background-color: #FFFF0c;}
    .cython.score-203 {background-color: #FFFF0b;}
    .cython.score-204 {background-color: #FFFF0b;}
    .cython.score-205 {background-color: #FFFF0b;}
    .cython.score-206 {background-color: #FFFF0b;}
    .cython.score-207 {background-color: #FFFF0b;}
    .cython.score-208 {background-color: #FFFF0b;}
    .cython.score-209 {background-color: #FFFF0b;}
    .cython.score-210 {background-color: #FFFF0b;}
    .cython.score-211 {background-color: #FFFF0b;}
    .cython.score-212 {background-color: #FFFF0b;}
    .cython.score-213 {background-color: #FFFF0b;}
    .cython.score-214 {background-color: #FFFF0b;}
    .cython.score-215 {background-color: #FFFF0b;}
    .cython.score-216 {background-color: #FFFF0b;}
    .cython.score-217 {background-color: #FFFF0b;}
    .cython.score-218 {background-color: #FFFF0b;}
    .cython.score-219 {background-color: #FFFF0b;}
    .cython.score-220 {background-color: #FFFF0b;}
    .cython.score-221 {background-color: #FFFF0b;}
    .cython.score-222 {background-color: #FFFF0a;}
    .cython.score-223 {background-color: #FFFF0a;}
    .cython.score-224 {background-color: #FFFF0a;}
    .cython.score-225 {background-color: #FFFF0a;}
    .cython.score-226 {background-color: #FFFF0a;}
    .cython.score-227 {background-color: #FFFF0a;}
    .cython.score-228 {background-color: #FFFF0a;}
    .cython.score-229 {background-color: #FFFF0a;}
    .cython.score-230 {background-color: #FFFF0a;}
    .cython.score-231 {background-color: #FFFF0a;}
    .cython.score-232 {background-color: #FFFF0a;}
    .cython.score-233 {background-color: #FFFF0a;}
    .cython.score-234 {background-color: #FFFF0a;}
    .cython.score-235 {background-color: #FFFF0a;}
    .cython.score-236 {background-color: #FFFF0a;}
    .cython.score-237 {background-color: #FFFF0a;}
    .cython.score-238 {background-color: #FFFF0a;}
    .cython.score-239 {background-color: #FFFF0a;}
    .cython.score-240 {background-color: #FFFF0a;}
    .cython.score-241 {background-color: #FFFF0a;}
    .cython.score-242 {background-color: #FFFF0a;}
    .cython.score-243 {background-color: #FFFF0a;}
    .cython.score-244 {background-color: #FFFF0a;}
    .cython.score-245 {background-color: #FFFF0a;}
    .cython.score-246 {background-color: #FFFF09;}
    .cython.score-247 {background-color: #FFFF09;}
    .cython.score-248 {background-color: #FFFF09;}
    .cython.score-249 {background-color: #FFFF09;}
    .cython.score-250 {background-color: #FFFF09;}
    .cython.score-251 {background-color: #FFFF09;}
    .cython.score-252 {background-color: #FFFF09;}
    .cython.score-253 {background-color: #FFFF09;}
    .cython.score-254 {background-color: #FFFF09;}
    .cython .hll { background-color: #ffffcc }
    .cython  { background: #f8f8f8; }
    .cython .c { color: #408080; font-style: italic } /* Comment */
    .cython .err { border: 1px solid #FF0000 } /* Error */
    .cython .k { color: #008000; font-weight: bold } /* Keyword */
    .cython .o { color: #666666 } /* Operator */
    .cython .ch { color: #408080; font-style: italic } /* Comment.Hashbang */
    .cython .cm { color: #408080; font-style: italic } /* Comment.Multiline */
    .cython .cp { color: #BC7A00 } /* Comment.Preproc */
    .cython .cpf { color: #408080; font-style: italic } /* Comment.PreprocFile */
    .cython .c1 { color: #408080; font-style: italic } /* Comment.Single */
    .cython .cs { color: #408080; font-style: italic } /* Comment.Special */
    .cython .gd { color: #A00000 } /* Generic.Deleted */
    .cython .ge { font-style: italic } /* Generic.Emph */
    .cython .gr { color: #FF0000 } /* Generic.Error */
    .cython .gh { color: #000080; font-weight: bold } /* Generic.Heading */
    .cython .gi { color: #00A000 } /* Generic.Inserted */
    .cython .go { color: #888888 } /* Generic.Output */
    .cython .gp { color: #000080; font-weight: bold } /* Generic.Prompt */
    .cython .gs { font-weight: bold } /* Generic.Strong */
    .cython .gu { color: #800080; font-weight: bold } /* Generic.Subheading */
    .cython .gt { color: #0044DD } /* Generic.Traceback */
    .cython .kc { color: #008000; font-weight: bold } /* Keyword.Constant */
    .cython .kd { color: #008000; font-weight: bold } /* Keyword.Declaration */
    .cython .kn { color: #008000; font-weight: bold } /* Keyword.Namespace */
    .cython .kp { color: #008000 } /* Keyword.Pseudo */
    .cython .kr { color: #008000; font-weight: bold } /* Keyword.Reserved */
    .cython .kt { color: #B00040 } /* Keyword.Type */
    .cython .m { color: #666666 } /* Literal.Number */
    .cython .s { color: #BA2121 } /* Literal.String */
    .cython .na { color: #7D9029 } /* Name.Attribute */
    .cython .nb { color: #008000 } /* Name.Builtin */
    .cython .nc { color: #0000FF; font-weight: bold } /* Name.Class */
    .cython .no { color: #880000 } /* Name.Constant */
    .cython .nd { color: #AA22FF } /* Name.Decorator */
    .cython .ni { color: #999999; font-weight: bold } /* Name.Entity */
    .cython .ne { color: #D2413A; font-weight: bold } /* Name.Exception */
    .cython .nf { color: #0000FF } /* Name.Function */
    .cython .nl { color: #A0A000 } /* Name.Label */
    .cython .nn { color: #0000FF; font-weight: bold } /* Name.Namespace */
    .cython .nt { color: #008000; font-weight: bold } /* Name.Tag */
    .cython .nv { color: #19177C } /* Name.Variable */
    .cython .ow { color: #AA22FF; font-weight: bold } /* Operator.Word */
    .cython .w { color: #bbbbbb } /* Text.Whitespace */
    .cython .mb { color: #666666 } /* Literal.Number.Bin */
    .cython .mf { color: #666666 } /* Literal.Number.Float */
    .cython .mh { color: #666666 } /* Literal.Number.Hex */
    .cython .mi { color: #666666 } /* Literal.Number.Integer */
    .cython .mo { color: #666666 } /* Literal.Number.Oct */
    .cython .sb { color: #BA2121 } /* Literal.String.Backtick */
    .cython .sc { color: #BA2121 } /* Literal.String.Char */
    .cython .sd { color: #BA2121; font-style: italic } /* Literal.String.Doc */
    .cython .s2 { color: #BA2121 } /* Literal.String.Double */
    .cython .se { color: #BB6622; font-weight: bold } /* Literal.String.Escape */
    .cython .sh { color: #BA2121 } /* Literal.String.Heredoc */
    .cython .si { color: #BB6688; font-weight: bold } /* Literal.String.Interpol */
    .cython .sx { color: #008000 } /* Literal.String.Other */
    .cython .sr { color: #BB6688 } /* Literal.String.Regex */
    .cython .s1 { color: #BA2121 } /* Literal.String.Single */
    .cython .ss { color: #19177C } /* Literal.String.Symbol */
    .cython .bp { color: #008000 } /* Name.Builtin.Pseudo */
    .cython .vc { color: #19177C } /* Name.Variable.Class */
    .cython .vg { color: #19177C } /* Name.Variable.Global */
    .cython .vi { color: #19177C } /* Name.Variable.Instance */
    .cython .il { color: #666666 } /* Literal.Number.Integer.Long */
        </style>
        <script>
        function toggleDiv(id) {
            theDiv = id.nextElementSibling
            if (theDiv.style.display != 'block') theDiv.style.display = 'block';
            else theDiv.style.display = 'none';
        }
        </script>
    </head>
    <body class="cython">
    <p><span style="border-bottom: solid 1px grey;">Generated by Cython 0.23.5</span></p>
    <p>
        <span style="background-color: #FFFF00">Yellow lines</span> hint at Python interaction.<br />
        Click on a line that starts with a "<code>+</code>" to see the C code that Cython generated for it.
    </p>
    <div class="cython"><pre class="cython line score-0">&#xA0;<span class="">01</span>: </pre>
    <pre class="cython line score-11" onclick='toggleDiv(this)'>+<span class="">02</span>: <span class="k">import</span> <span class="nn">cython</span></pre>
    <pre class='cython code score-11 '>  __pyx_t_1 = <span class='py_c_api'>PyDict_New</span>();<span class='error_goto'> if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2; __pyx_clineno = __LINE__; goto __pyx_L1_error;}</span>
      <span class='refnanny'>__Pyx_GOTREF</span>(__pyx_t_1);
      if (<span class='py_c_api'>PyDict_SetItem</span>(__pyx_d, __pyx_n_s_test, __pyx_t_1) &lt; 0) <span class='error_goto'>{__pyx_filename = __pyx_f[0]; __pyx_lineno = 2; __pyx_clineno = __LINE__; goto __pyx_L1_error;}</span>
      <span class='pyx_macro_api'>__Pyx_DECREF</span>(__pyx_t_1); __pyx_t_1 = 0;
    </pre><pre class="cython line score-0">&#xA0;<span class="">03</span>: </pre>
    <pre class="cython line score-0">&#xA0;<span class="">04</span>: <span class="nd">@cython</span><span class="o">.</span><span class="n">boundscheck</span><span class="p">(</span><span class="bp">False</span><span class="p">)</span></pre>
    <pre class="cython line score-0">&#xA0;<span class="">05</span>: <span class="nd">@cython</span><span class="o">.</span><span class="n">wraparound</span><span class="p">(</span><span class="bp">False</span><span class="p">)</span></pre>
    <pre class="cython line score-59" onclick='toggleDiv(this)'>+<span class="">06</span>: <span class="k">def</span> <span class="nf">matrix_multiply1</span><span class="p">(</span><span class="n">double</span><span class="p">[:,:]</span> <span class="n">u</span><span class="p">,</span> <span class="n">double</span><span class="p">[:,</span> <span class="p">:]</span> <span class="n">v</span><span class="p">,</span> <span class="n">double</span><span class="p">[:,</span> <span class="p">:]</span> <span class="n">res</span><span class="p">):</span></pre>
    <pre class='cython code score-59 '>/* Python wrapper */
    static PyObject *__pyx_pw_46_cython_magic_1d20d9c3ed3cbd86dd4904fc3a8795cf_1matrix_multiply1(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
    static PyMethodDef __pyx_mdef_46_cython_magic_1d20d9c3ed3cbd86dd4904fc3a8795cf_1matrix_multiply1 = {"matrix_multiply1", (PyCFunction)__pyx_pw_46_cython_magic_1d20d9c3ed3cbd86dd4904fc3a8795cf_1matrix_multiply1, METH_VARARGS|METH_KEYWORDS, 0};
    static PyObject *__pyx_pw_46_cython_magic_1d20d9c3ed3cbd86dd4904fc3a8795cf_1matrix_multiply1(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
      __Pyx_memviewslice __pyx_v_u = { 0, 0, { 0 }, { 0 }, { 0 } };
      __Pyx_memviewslice __pyx_v_v = { 0, 0, { 0 }, { 0 }, { 0 } };
      __Pyx_memviewslice __pyx_v_res = { 0, 0, { 0 }, { 0 }, { 0 } };
      PyObject *__pyx_r = 0;
      <span class='refnanny'>__Pyx_RefNannyDeclarations</span>
      <span class='refnanny'>__Pyx_RefNannySetupContext</span>("matrix_multiply1 (wrapper)", 0);
      {
        static PyObject **__pyx_pyargnames[] = {&amp;__pyx_n_s_u,&amp;__pyx_n_s_v,&amp;__pyx_n_s_res,0};
        PyObject* values[3] = {0,0,0};
        if (unlikely(__pyx_kwds)) {
          Py_ssize_t kw_args;
          const Py_ssize_t pos_args = <span class='py_macro_api'>PyTuple_GET_SIZE</span>(__pyx_args);
          switch (pos_args) {
            case  3: values[2] = <span class='py_macro_api'>PyTuple_GET_ITEM</span>(__pyx_args, 2);
            case  2: values[1] = <span class='py_macro_api'>PyTuple_GET_ITEM</span>(__pyx_args, 1);
            case  1: values[0] = <span class='py_macro_api'>PyTuple_GET_ITEM</span>(__pyx_args, 0);
            case  0: break;
            default: goto __pyx_L5_argtuple_error;
          }
          kw_args = <span class='py_c_api'>PyDict_Size</span>(__pyx_kwds);
          switch (pos_args) {
            case  0:
            if (likely((values[0] = <span class='py_c_api'>PyDict_GetItem</span>(__pyx_kwds, __pyx_n_s_u)) != 0)) kw_args--;
            else goto __pyx_L5_argtuple_error;
            case  1:
            if (likely((values[1] = <span class='py_c_api'>PyDict_GetItem</span>(__pyx_kwds, __pyx_n_s_v)) != 0)) kw_args--;
            else {
              <span class='pyx_c_api'>__Pyx_RaiseArgtupleInvalid</span>("matrix_multiply1", 1, 3, 3, 1); <span class='error_goto'>{__pyx_filename = __pyx_f[0]; __pyx_lineno = 6; __pyx_clineno = __LINE__; goto __pyx_L3_error;}</span>
            }
            case  2:
            if (likely((values[2] = <span class='py_c_api'>PyDict_GetItem</span>(__pyx_kwds, __pyx_n_s_res)) != 0)) kw_args--;
            else {
              <span class='pyx_c_api'>__Pyx_RaiseArgtupleInvalid</span>("matrix_multiply1", 1, 3, 3, 2); <span class='error_goto'>{__pyx_filename = __pyx_f[0]; __pyx_lineno = 6; __pyx_clineno = __LINE__; goto __pyx_L3_error;}</span>
            }
          }
          if (unlikely(kw_args &gt; 0)) {
            if (unlikely(<span class='pyx_c_api'>__Pyx_ParseOptionalKeywords</span>(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "matrix_multiply1") &lt; 0)) <span class='error_goto'>{__pyx_filename = __pyx_f[0]; __pyx_lineno = 6; __pyx_clineno = __LINE__; goto __pyx_L3_error;}</span>
          }
        } else if (<span class='py_macro_api'>PyTuple_GET_SIZE</span>(__pyx_args) != 3) {
          goto __pyx_L5_argtuple_error;
        } else {
          values[0] = <span class='py_macro_api'>PyTuple_GET_ITEM</span>(__pyx_args, 0);
          values[1] = <span class='py_macro_api'>PyTuple_GET_ITEM</span>(__pyx_args, 1);
          values[2] = <span class='py_macro_api'>PyTuple_GET_ITEM</span>(__pyx_args, 2);
        }
        __pyx_v_u = <span class='pyx_c_api'>__Pyx_PyObject_to_MemoryviewSlice_dsds_double</span>(values[0]);<span class='error_goto'> if (unlikely(!__pyx_v_u.memview)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 6; __pyx_clineno = __LINE__; goto __pyx_L3_error;}</span>
        __pyx_v_v = <span class='pyx_c_api'>__Pyx_PyObject_to_MemoryviewSlice_dsds_double</span>(values[1]);<span class='error_goto'> if (unlikely(!__pyx_v_v.memview)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 6; __pyx_clineno = __LINE__; goto __pyx_L3_error;}</span>
        __pyx_v_res = <span class='pyx_c_api'>__Pyx_PyObject_to_MemoryviewSlice_dsds_double</span>(values[2]);<span class='error_goto'> if (unlikely(!__pyx_v_res.memview)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 6; __pyx_clineno = __LINE__; goto __pyx_L3_error;}</span>
      }
      goto __pyx_L4_argument_unpacking_done;
      __pyx_L5_argtuple_error:;
      <span class='pyx_c_api'>__Pyx_RaiseArgtupleInvalid</span>("matrix_multiply1", 1, 3, 3, <span class='py_macro_api'>PyTuple_GET_SIZE</span>(__pyx_args)); <span class='error_goto'>{__pyx_filename = __pyx_f[0]; __pyx_lineno = 6; __pyx_clineno = __LINE__; goto __pyx_L3_error;}</span>
      __pyx_L3_error:;
      <span class='pyx_c_api'>__Pyx_AddTraceback</span>("_cython_magic_1d20d9c3ed3cbd86dd4904fc3a8795cf.matrix_multiply1", __pyx_clineno, __pyx_lineno, __pyx_filename);
      <span class='refnanny'>__Pyx_RefNannyFinishContext</span>();
      return NULL;
      __pyx_L4_argument_unpacking_done:;
      __pyx_r = __pyx_pf_46_cython_magic_1d20d9c3ed3cbd86dd4904fc3a8795cf_matrix_multiply1(__pyx_self, __pyx_v_u, __pyx_v_v, __pyx_v_res);
      int __pyx_lineno = 0;
      const char *__pyx_filename = NULL;
      int __pyx_clineno = 0;
    
      /* function exit code */
      <span class='refnanny'>__Pyx_RefNannyFinishContext</span>();
      return __pyx_r;
    }
    
    static PyObject *__pyx_pf_46_cython_magic_1d20d9c3ed3cbd86dd4904fc3a8795cf_matrix_multiply1(CYTHON_UNUSED PyObject *__pyx_self, __Pyx_memviewslice __pyx_v_u, __Pyx_memviewslice __pyx_v_v, __Pyx_memviewslice __pyx_v_res) {
      int __pyx_v_i;
      int __pyx_v_j;
      int __pyx_v_k;
      int __pyx_v_m;
      int __pyx_v_n;
      int __pyx_v_p;
      PyObject *__pyx_r = NULL;
      <span class='refnanny'>__Pyx_RefNannyDeclarations</span>
      <span class='refnanny'>__Pyx_RefNannySetupContext</span>("matrix_multiply1", 0);
    /* â¦ */
      /* function exit code */
      __pyx_r = Py_None; <span class='pyx_macro_api'>__Pyx_INCREF</span>(Py_None);
      __PYX_XDEC_MEMVIEW(&amp;__pyx_v_u, 1);
      __PYX_XDEC_MEMVIEW(&amp;__pyx_v_v, 1);
      __PYX_XDEC_MEMVIEW(&amp;__pyx_v_res, 1);
      <span class='refnanny'>__Pyx_XGIVEREF</span>(__pyx_r);
      <span class='refnanny'>__Pyx_RefNannyFinishContext</span>();
      return __pyx_r;
    }
    /* â¦ */
      __pyx_tuple__14 = <span class='py_c_api'>PyTuple_Pack</span>(9, __pyx_n_s_u, __pyx_n_s_v, __pyx_n_s_res, __pyx_n_s_i, __pyx_n_s_j, __pyx_n_s_k, __pyx_n_s_m, __pyx_n_s_n, __pyx_n_s_p);<span class='error_goto'> if (unlikely(!__pyx_tuple__14)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 6; __pyx_clineno = __LINE__; goto __pyx_L1_error;}</span>
      <span class='refnanny'>__Pyx_GOTREF</span>(__pyx_tuple__14);
      <span class='refnanny'>__Pyx_GIVEREF</span>(__pyx_tuple__14);
    /* â¦ */
      __pyx_t_1 = PyCFunction_NewEx(&amp;__pyx_mdef_46_cython_magic_1d20d9c3ed3cbd86dd4904fc3a8795cf_1matrix_multiply1, NULL, __pyx_n_s_cython_magic_1d20d9c3ed3cbd86dd);<span class='error_goto'> if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 6; __pyx_clineno = __LINE__; goto __pyx_L1_error;}</span>
      <span class='refnanny'>__Pyx_GOTREF</span>(__pyx_t_1);
      if (<span class='py_c_api'>PyDict_SetItem</span>(__pyx_d, __pyx_n_s_matrix_multiply1, __pyx_t_1) &lt; 0) <span class='error_goto'>{__pyx_filename = __pyx_f[0]; __pyx_lineno = 6; __pyx_clineno = __LINE__; goto __pyx_L1_error;}</span>
      <span class='pyx_macro_api'>__Pyx_DECREF</span>(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_codeobj__15 = (PyObject*)<span class='pyx_c_api'>__Pyx_PyCode_New</span>(3, 0, 9, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__14, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_jovyan_cache_ipython_cytho, __pyx_n_s_matrix_multiply1, 6, __pyx_empty_bytes);<span class='error_goto'> if (unlikely(!__pyx_codeobj__15)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 6; __pyx_clineno = __LINE__; goto __pyx_L1_error;}</span>
    </pre><pre class="cython line score-0">&#xA0;<span class="">07</span>:     <span class="k">cdef</span> <span class="kt">int</span> <span class="nf">i</span><span class="p">,</span> <span class="nf">j</span><span class="p">,</span> <span class="nf">k</span></pre>
    <pre class="cython line score-0">&#xA0;<span class="">08</span>:     <span class="k">cdef</span> <span class="kt">int</span> <span class="nf">m</span><span class="p">,</span> <span class="nf">n</span><span class="p">,</span> <span class="nf">p</span></pre>
    <pre class="cython line score-0">&#xA0;<span class="">09</span>: </pre>
    <pre class="cython line score-0" onclick='toggleDiv(this)'>+<span class="">10</span>:     <span class="n">m</span> <span class="o">=</span> <span class="n">u</span><span class="o">.</span><span class="n">shape</span><span class="p">[</span><span class="mf">0</span><span class="p">]</span></pre>
    <pre class='cython code score-0 '>  __pyx_v_m = (__pyx_v_u.shape[0]);
    </pre><pre class="cython line score-0" onclick='toggleDiv(this)'>+<span class="">11</span>:     <span class="n">n</span> <span class="o">=</span> <span class="n">u</span><span class="o">.</span><span class="n">shape</span><span class="p">[</span><span class="mf">1</span><span class="p">]</span></pre>
    <pre class='cython code score-0 '>  __pyx_v_n = (__pyx_v_u.shape[1]);
    </pre><pre class="cython line score-0" onclick='toggleDiv(this)'>+<span class="">12</span>:     <span class="n">p</span> <span class="o">=</span> <span class="n">v</span><span class="o">.</span><span class="n">shape</span><span class="p">[</span><span class="mf">1</span><span class="p">]</span></pre>
    <pre class='cython code score-0 '>  __pyx_v_p = (__pyx_v_v.shape[1]);
    </pre><pre class="cython line score-0">&#xA0;<span class="">13</span>: </pre>
    <pre class="cython line score-0" onclick='toggleDiv(this)'>+<span class="">14</span>:     <span class="k">with</span> <span class="n">cython</span><span class="o">.</span><span class="k">nogil</span><span class="p">:</span></pre>
    <pre class='cython code score-0 '>  {
          #ifdef WITH_THREAD
          PyThreadState *_save;
          Py_UNBLOCK_THREADS
          #endif
          /*try:*/ {
    /* â¦ */
          /*finally:*/ {
            /*normal exit:*/{
              #ifdef WITH_THREAD
              Py_BLOCK_THREADS
              #endif
              goto __pyx_L5;
            }
            __pyx_L5:;
          }
      }
    </pre><pre class="cython line score-0" onclick='toggleDiv(this)'>+<span class="">15</span>:         <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">m</span><span class="p">):</span></pre>
    <pre class='cython code score-0 '>        __pyx_t_1 = __pyx_v_m;
            for (__pyx_t_2 = 0; __pyx_t_2 &lt; __pyx_t_1; __pyx_t_2+=1) {
              __pyx_v_i = __pyx_t_2;
    </pre><pre class="cython line score-0" onclick='toggleDiv(this)'>+<span class="">16</span>:             <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">p</span><span class="p">):</span></pre>
    <pre class='cython code score-0 '>          __pyx_t_3 = __pyx_v_p;
              for (__pyx_t_4 = 0; __pyx_t_4 &lt; __pyx_t_3; __pyx_t_4+=1) {
                __pyx_v_j = __pyx_t_4;
    </pre><pre class="cython line score-0" onclick='toggleDiv(this)'>+<span class="">17</span>:                 <span class="n">res</span><span class="p">[</span><span class="n">i</span><span class="p">,</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="mf">0</span></pre>
    <pre class='cython code score-0 '>            __pyx_t_5 = __pyx_v_i;
                __pyx_t_6 = __pyx_v_j;
                *((double *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_res.data + __pyx_t_5 * __pyx_v_res.strides[0]) ) + __pyx_t_6 * __pyx_v_res.strides[1]) )) = 0.0;
    </pre><pre class="cython line score-0" onclick='toggleDiv(this)'>+<span class="">18</span>:                 <span class="k">for</span> <span class="n">k</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">n</span><span class="p">):</span></pre>
    <pre class='cython code score-0 '>            __pyx_t_7 = __pyx_v_n;
                for (__pyx_t_8 = 0; __pyx_t_8 &lt; __pyx_t_7; __pyx_t_8+=1) {
                  __pyx_v_k = __pyx_t_8;
    </pre><pre class="cython line score-0" onclick='toggleDiv(this)'>+<span class="">19</span>:                     <span class="n">res</span><span class="p">[</span><span class="n">i</span><span class="p">,</span><span class="n">j</span><span class="p">]</span> <span class="o">+=</span> <span class="n">u</span><span class="p">[</span><span class="n">i</span><span class="p">,</span><span class="n">k</span><span class="p">]</span> <span class="o">*</span> <span class="n">v</span><span class="p">[</span><span class="n">k</span><span class="p">,</span><span class="n">j</span><span class="p">]</span></pre>
    <pre class='cython code score-0 '>              __pyx_t_9 = __pyx_v_i;
                  __pyx_t_10 = __pyx_v_k;
                  __pyx_t_11 = __pyx_v_k;
                  __pyx_t_12 = __pyx_v_j;
                  __pyx_t_13 = __pyx_v_i;
                  __pyx_t_14 = __pyx_v_j;
                  *((double *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_res.data + __pyx_t_13 * __pyx_v_res.strides[0]) ) + __pyx_t_14 * __pyx_v_res.strides[1]) )) += ((*((double *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_u.data + __pyx_t_9 * __pyx_v_u.strides[0]) ) + __pyx_t_10 * __pyx_v_u.strides[1]) ))) * (*((double *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_v.data + __pyx_t_11 * __pyx_v_v.strides[0]) ) + __pyx_t_12 * __pyx_v_v.strides[1]) ))));
                }
              }
            }
          }
    </pre></div></body></html>



.. code:: python

    res = np.zeros((u.shape[0], v.shape[1]))
    %timeit -r3 -n3 matrix_multiply1(u, v, res)


.. parsed-literal::

    3 loops, best of 3: 12.4 Âµs per loop


Parallel execution with Cython
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Will not work unless OpenMP is installed.

.. code:: python

    %%cython --compile-args=-fopenmp --link-args=-fopenmp --force
    
    import cython
    from cython.parallel import parallel, prange
    
    @cython.boundscheck(False)
    @cython.wraparound(False)
    def matrix_multiply2(double[:,:] u, double[:, :] v, double[:, :] res):
        cdef int i, j, k
        cdef int m, n, p
    
        m = u.shape[0]
        n = u.shape[1]
        p = v.shape[1]
    
        with cython.nogil, parallel():
            for i in prange(m):
                for j in prange(p):
                    res[i,j] = 0
                    for k in range(n):
                        res[i,j] += u[i,k] * v[k,j]

.. code:: python

    res = np.zeros((u.shape[0], v.shape[1]))
    %timeit -r3 -n3 matrix_multiply2(u, v, res)


.. parsed-literal::

    The slowest run took 112.92 times longer than the fastest. This could mean that an intermediate result is being cached.
    3 loops, best of 3: 90.2 Âµs per loop


.. code:: python

    import time

.. code:: python

    # color function for point at (x, y)
    def mandel(x, y, max_iters):
        c = complex(x, y)
        z = 0.0j
        for i in range(max_iters):
            z = z*z + c
            if z.real*z.real + z.imag*z.imag >= 4:
                return i
        return max_iters
    
    def create_fractal(xmin, xmax, ymin, ymax, image, iters):
        height, width = image.shape
        
        pixel_size_x = (xmax - xmin)/width
        pixel_size_y = (ymax - ymin)/height
            
        for x in range(width):
            real = xmin + x*pixel_size_x
            for y in range(height):
                imag = ymin + y*pixel_size_y
                color = mandel(real, imag, iters)
                image[y, x]  = color   

.. code:: python

    gimage = np.zeros((1024, 1536), dtype=np.uint8)
    xmin, xmax, ymin, ymax = np.array([-2.0, 1.0, -1.0, 1.0]).astype('float32')
    iters = 50
    
    start = time.clock()
    create_fractal(xmin, xmax, ymin, ymax, gimage, iters)
    dt = time.clock() - start
    
    print("Mandelbrot created on CPU in %f s" % dt)
    plt.grid(False)
    plt.imshow(gimage, cmap='jet')
    pass


.. parsed-literal::

    Mandelbrot created on CPU in 15.622738 s



.. image:: 10C_Cython_files/10C_Cython_25_1.png


.. code:: python

    %%cython -a
    
    cimport cython
    
    cdef extern from "complex.h":
        double cabs(double complex)
    
    # color function for point at (x, y)
    cdef unsigned char mandel_cython(double x, double y, int max_iters):
        cdef double complex c, z
    
        c = x + y*1j
        z = 0.0j
        for i in range(max_iters):
            z = z*z + c
            if cabs(z) >= 2:
                return i
        return max_iters
    
    @cython.cdivision(True)
    def create_fractal_cython(double xmin, double xmax, double ymin, double ymax, unsigned char[:, :] image, int iters):
    
        cdef int x, y
        cdef int height, width
        cdef double pixel_size_x, pixel_size_y
        cdef double real, imag
        cdef unsigned char color
    
        height = image.shape[0]
        width = image.shape[1]
        
        pixel_size_x = (xmax - xmin)/width
        pixel_size_y = (ymax - ymin)/height
            
        for x in range(width):
            real = xmin + x*pixel_size_x
            for y in range(height):
                imag = ymin + y*pixel_size_y
                color = mandel_cython(real, imag, iters)
                image[y, x]  = color  




.. raw:: html

    <!DOCTYPE html>
    <!-- Generated by Cython 0.23.5 -->
    <html>
    <head>
        <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
        <title>Cython: _cython_magic_176141650497de6acdeb56d4e03ce71b.pyx</title>
        <style type="text/css">
        
    body.cython { font-family: courier; font-size: 12; }
    
    .cython.tag  {  }
    .cython.line { margin: 0em }
    .cython.code { font-size: 9; color: #444444; display: none; margin: 0px 0px 0px 8px; border-left: 8px none; }
    
    .cython.line .run { background-color: #B0FFB0; }
    .cython.line .mis { background-color: #FFB0B0; }
    .cython.code.run  { border-left: 8px solid #B0FFB0; }
    .cython.code.mis  { border-left: 8px solid #FFB0B0; }
    
    .cython.code .py_c_api  { color: red; }
    .cython.code .py_macro_api  { color: #FF7000; }
    .cython.code .pyx_c_api  { color: #FF3000; }
    .cython.code .pyx_macro_api  { color: #FF7000; }
    .cython.code .refnanny  { color: #FFA000; }
    .cython.code .trace  { color: #FFA000; }
    .cython.code .error_goto  { color: #FFA000; }
    
    .cython.code .coerce  { color: #008000; border: 1px dotted #008000 }
    .cython.code .py_attr { color: #FF0000; font-weight: bold; }
    .cython.code .c_attr  { color: #0000FF; }
    .cython.code .py_call { color: #FF0000; font-weight: bold; }
    .cython.code .c_call  { color: #0000FF; }
    
    .cython.score-0 {background-color: #FFFFff;}
    .cython.score-1 {background-color: #FFFFe7;}
    .cython.score-2 {background-color: #FFFFd4;}
    .cython.score-3 {background-color: #FFFFc4;}
    .cython.score-4 {background-color: #FFFFb6;}
    .cython.score-5 {background-color: #FFFFaa;}
    .cython.score-6 {background-color: #FFFF9f;}
    .cython.score-7 {background-color: #FFFF96;}
    .cython.score-8 {background-color: #FFFF8d;}
    .cython.score-9 {background-color: #FFFF86;}
    .cython.score-10 {background-color: #FFFF7f;}
    .cython.score-11 {background-color: #FFFF79;}
    .cython.score-12 {background-color: #FFFF73;}
    .cython.score-13 {background-color: #FFFF6e;}
    .cython.score-14 {background-color: #FFFF6a;}
    .cython.score-15 {background-color: #FFFF66;}
    .cython.score-16 {background-color: #FFFF62;}
    .cython.score-17 {background-color: #FFFF5e;}
    .cython.score-18 {background-color: #FFFF5b;}
    .cython.score-19 {background-color: #FFFF57;}
    .cython.score-20 {background-color: #FFFF55;}
    .cython.score-21 {background-color: #FFFF52;}
    .cython.score-22 {background-color: #FFFF4f;}
    .cython.score-23 {background-color: #FFFF4d;}
    .cython.score-24 {background-color: #FFFF4b;}
    .cython.score-25 {background-color: #FFFF48;}
    .cython.score-26 {background-color: #FFFF46;}
    .cython.score-27 {background-color: #FFFF44;}
    .cython.score-28 {background-color: #FFFF43;}
    .cython.score-29 {background-color: #FFFF41;}
    .cython.score-30 {background-color: #FFFF3f;}
    .cython.score-31 {background-color: #FFFF3e;}
    .cython.score-32 {background-color: #FFFF3c;}
    .cython.score-33 {background-color: #FFFF3b;}
    .cython.score-34 {background-color: #FFFF39;}
    .cython.score-35 {background-color: #FFFF38;}
    .cython.score-36 {background-color: #FFFF37;}
    .cython.score-37 {background-color: #FFFF36;}
    .cython.score-38 {background-color: #FFFF35;}
    .cython.score-39 {background-color: #FFFF34;}
    .cython.score-40 {background-color: #FFFF33;}
    .cython.score-41 {background-color: #FFFF32;}
    .cython.score-42 {background-color: #FFFF31;}
    .cython.score-43 {background-color: #FFFF30;}
    .cython.score-44 {background-color: #FFFF2f;}
    .cython.score-45 {background-color: #FFFF2e;}
    .cython.score-46 {background-color: #FFFF2d;}
    .cython.score-47 {background-color: #FFFF2c;}
    .cython.score-48 {background-color: #FFFF2b;}
    .cython.score-49 {background-color: #FFFF2b;}
    .cython.score-50 {background-color: #FFFF2a;}
    .cython.score-51 {background-color: #FFFF29;}
    .cython.score-52 {background-color: #FFFF29;}
    .cython.score-53 {background-color: #FFFF28;}
    .cython.score-54 {background-color: #FFFF27;}
    .cython.score-55 {background-color: #FFFF27;}
    .cython.score-56 {background-color: #FFFF26;}
    .cython.score-57 {background-color: #FFFF26;}
    .cython.score-58 {background-color: #FFFF25;}
    .cython.score-59 {background-color: #FFFF24;}
    .cython.score-60 {background-color: #FFFF24;}
    .cython.score-61 {background-color: #FFFF23;}
    .cython.score-62 {background-color: #FFFF23;}
    .cython.score-63 {background-color: #FFFF22;}
    .cython.score-64 {background-color: #FFFF22;}
    .cython.score-65 {background-color: #FFFF22;}
    .cython.score-66 {background-color: #FFFF21;}
    .cython.score-67 {background-color: #FFFF21;}
    .cython.score-68 {background-color: #FFFF20;}
    .cython.score-69 {background-color: #FFFF20;}
    .cython.score-70 {background-color: #FFFF1f;}
    .cython.score-71 {background-color: #FFFF1f;}
    .cython.score-72 {background-color: #FFFF1f;}
    .cython.score-73 {background-color: #FFFF1e;}
    .cython.score-74 {background-color: #FFFF1e;}
    .cython.score-75 {background-color: #FFFF1e;}
    .cython.score-76 {background-color: #FFFF1d;}
    .cython.score-77 {background-color: #FFFF1d;}
    .cython.score-78 {background-color: #FFFF1c;}
    .cython.score-79 {background-color: #FFFF1c;}
    .cython.score-80 {background-color: #FFFF1c;}
    .cython.score-81 {background-color: #FFFF1c;}
    .cython.score-82 {background-color: #FFFF1b;}
    .cython.score-83 {background-color: #FFFF1b;}
    .cython.score-84 {background-color: #FFFF1b;}
    .cython.score-85 {background-color: #FFFF1a;}
    .cython.score-86 {background-color: #FFFF1a;}
    .cython.score-87 {background-color: #FFFF1a;}
    .cython.score-88 {background-color: #FFFF1a;}
    .cython.score-89 {background-color: #FFFF19;}
    .cython.score-90 {background-color: #FFFF19;}
    .cython.score-91 {background-color: #FFFF19;}
    .cython.score-92 {background-color: #FFFF19;}
    .cython.score-93 {background-color: #FFFF18;}
    .cython.score-94 {background-color: #FFFF18;}
    .cython.score-95 {background-color: #FFFF18;}
    .cython.score-96 {background-color: #FFFF18;}
    .cython.score-97 {background-color: #FFFF17;}
    .cython.score-98 {background-color: #FFFF17;}
    .cython.score-99 {background-color: #FFFF17;}
    .cython.score-100 {background-color: #FFFF17;}
    .cython.score-101 {background-color: #FFFF16;}
    .cython.score-102 {background-color: #FFFF16;}
    .cython.score-103 {background-color: #FFFF16;}
    .cython.score-104 {background-color: #FFFF16;}
    .cython.score-105 {background-color: #FFFF16;}
    .cython.score-106 {background-color: #FFFF15;}
    .cython.score-107 {background-color: #FFFF15;}
    .cython.score-108 {background-color: #FFFF15;}
    .cython.score-109 {background-color: #FFFF15;}
    .cython.score-110 {background-color: #FFFF15;}
    .cython.score-111 {background-color: #FFFF15;}
    .cython.score-112 {background-color: #FFFF14;}
    .cython.score-113 {background-color: #FFFF14;}
    .cython.score-114 {background-color: #FFFF14;}
    .cython.score-115 {background-color: #FFFF14;}
    .cython.score-116 {background-color: #FFFF14;}
    .cython.score-117 {background-color: #FFFF14;}
    .cython.score-118 {background-color: #FFFF13;}
    .cython.score-119 {background-color: #FFFF13;}
    .cython.score-120 {background-color: #FFFF13;}
    .cython.score-121 {background-color: #FFFF13;}
    .cython.score-122 {background-color: #FFFF13;}
    .cython.score-123 {background-color: #FFFF13;}
    .cython.score-124 {background-color: #FFFF13;}
    .cython.score-125 {background-color: #FFFF12;}
    .cython.score-126 {background-color: #FFFF12;}
    .cython.score-127 {background-color: #FFFF12;}
    .cython.score-128 {background-color: #FFFF12;}
    .cython.score-129 {background-color: #FFFF12;}
    .cython.score-130 {background-color: #FFFF12;}
    .cython.score-131 {background-color: #FFFF12;}
    .cython.score-132 {background-color: #FFFF11;}
    .cython.score-133 {background-color: #FFFF11;}
    .cython.score-134 {background-color: #FFFF11;}
    .cython.score-135 {background-color: #FFFF11;}
    .cython.score-136 {background-color: #FFFF11;}
    .cython.score-137 {background-color: #FFFF11;}
    .cython.score-138 {background-color: #FFFF11;}
    .cython.score-139 {background-color: #FFFF11;}
    .cython.score-140 {background-color: #FFFF11;}
    .cython.score-141 {background-color: #FFFF10;}
    .cython.score-142 {background-color: #FFFF10;}
    .cython.score-143 {background-color: #FFFF10;}
    .cython.score-144 {background-color: #FFFF10;}
    .cython.score-145 {background-color: #FFFF10;}
    .cython.score-146 {background-color: #FFFF10;}
    .cython.score-147 {background-color: #FFFF10;}
    .cython.score-148 {background-color: #FFFF10;}
    .cython.score-149 {background-color: #FFFF10;}
    .cython.score-150 {background-color: #FFFF0f;}
    .cython.score-151 {background-color: #FFFF0f;}
    .cython.score-152 {background-color: #FFFF0f;}
    .cython.score-153 {background-color: #FFFF0f;}
    .cython.score-154 {background-color: #FFFF0f;}
    .cython.score-155 {background-color: #FFFF0f;}
    .cython.score-156 {background-color: #FFFF0f;}
    .cython.score-157 {background-color: #FFFF0f;}
    .cython.score-158 {background-color: #FFFF0f;}
    .cython.score-159 {background-color: #FFFF0f;}
    .cython.score-160 {background-color: #FFFF0f;}
    .cython.score-161 {background-color: #FFFF0e;}
    .cython.score-162 {background-color: #FFFF0e;}
    .cython.score-163 {background-color: #FFFF0e;}
    .cython.score-164 {background-color: #FFFF0e;}
    .cython.score-165 {background-color: #FFFF0e;}
    .cython.score-166 {background-color: #FFFF0e;}
    .cython.score-167 {background-color: #FFFF0e;}
    .cython.score-168 {background-color: #FFFF0e;}
    .cython.score-169 {background-color: #FFFF0e;}
    .cython.score-170 {background-color: #FFFF0e;}
    .cython.score-171 {background-color: #FFFF0e;}
    .cython.score-172 {background-color: #FFFF0e;}
    .cython.score-173 {background-color: #FFFF0d;}
    .cython.score-174 {background-color: #FFFF0d;}
    .cython.score-175 {background-color: #FFFF0d;}
    .cython.score-176 {background-color: #FFFF0d;}
    .cython.score-177 {background-color: #FFFF0d;}
    .cython.score-178 {background-color: #FFFF0d;}
    .cython.score-179 {background-color: #FFFF0d;}
    .cython.score-180 {background-color: #FFFF0d;}
    .cython.score-181 {background-color: #FFFF0d;}
    .cython.score-182 {background-color: #FFFF0d;}
    .cython.score-183 {background-color: #FFFF0d;}
    .cython.score-184 {background-color: #FFFF0d;}
    .cython.score-185 {background-color: #FFFF0d;}
    .cython.score-186 {background-color: #FFFF0d;}
    .cython.score-187 {background-color: #FFFF0c;}
    .cython.score-188 {background-color: #FFFF0c;}
    .cython.score-189 {background-color: #FFFF0c;}
    .cython.score-190 {background-color: #FFFF0c;}
    .cython.score-191 {background-color: #FFFF0c;}
    .cython.score-192 {background-color: #FFFF0c;}
    .cython.score-193 {background-color: #FFFF0c;}
    .cython.score-194 {background-color: #FFFF0c;}
    .cython.score-195 {background-color: #FFFF0c;}
    .cython.score-196 {background-color: #FFFF0c;}
    .cython.score-197 {background-color: #FFFF0c;}
    .cython.score-198 {background-color: #FFFF0c;}
    .cython.score-199 {background-color: #FFFF0c;}
    .cython.score-200 {background-color: #FFFF0c;}
    .cython.score-201 {background-color: #FFFF0c;}
    .cython.score-202 {background-color: #FFFF0c;}
    .cython.score-203 {background-color: #FFFF0b;}
    .cython.score-204 {background-color: #FFFF0b;}
    .cython.score-205 {background-color: #FFFF0b;}
    .cython.score-206 {background-color: #FFFF0b;}
    .cython.score-207 {background-color: #FFFF0b;}
    .cython.score-208 {background-color: #FFFF0b;}
    .cython.score-209 {background-color: #FFFF0b;}
    .cython.score-210 {background-color: #FFFF0b;}
    .cython.score-211 {background-color: #FFFF0b;}
    .cython.score-212 {background-color: #FFFF0b;}
    .cython.score-213 {background-color: #FFFF0b;}
    .cython.score-214 {background-color: #FFFF0b;}
    .cython.score-215 {background-color: #FFFF0b;}
    .cython.score-216 {background-color: #FFFF0b;}
    .cython.score-217 {background-color: #FFFF0b;}
    .cython.score-218 {background-color: #FFFF0b;}
    .cython.score-219 {background-color: #FFFF0b;}
    .cython.score-220 {background-color: #FFFF0b;}
    .cython.score-221 {background-color: #FFFF0b;}
    .cython.score-222 {background-color: #FFFF0a;}
    .cython.score-223 {background-color: #FFFF0a;}
    .cython.score-224 {background-color: #FFFF0a;}
    .cython.score-225 {background-color: #FFFF0a;}
    .cython.score-226 {background-color: #FFFF0a;}
    .cython.score-227 {background-color: #FFFF0a;}
    .cython.score-228 {background-color: #FFFF0a;}
    .cython.score-229 {background-color: #FFFF0a;}
    .cython.score-230 {background-color: #FFFF0a;}
    .cython.score-231 {background-color: #FFFF0a;}
    .cython.score-232 {background-color: #FFFF0a;}
    .cython.score-233 {background-color: #FFFF0a;}
    .cython.score-234 {background-color: #FFFF0a;}
    .cython.score-235 {background-color: #FFFF0a;}
    .cython.score-236 {background-color: #FFFF0a;}
    .cython.score-237 {background-color: #FFFF0a;}
    .cython.score-238 {background-color: #FFFF0a;}
    .cython.score-239 {background-color: #FFFF0a;}
    .cython.score-240 {background-color: #FFFF0a;}
    .cython.score-241 {background-color: #FFFF0a;}
    .cython.score-242 {background-color: #FFFF0a;}
    .cython.score-243 {background-color: #FFFF0a;}
    .cython.score-244 {background-color: #FFFF0a;}
    .cython.score-245 {background-color: #FFFF0a;}
    .cython.score-246 {background-color: #FFFF09;}
    .cython.score-247 {background-color: #FFFF09;}
    .cython.score-248 {background-color: #FFFF09;}
    .cython.score-249 {background-color: #FFFF09;}
    .cython.score-250 {background-color: #FFFF09;}
    .cython.score-251 {background-color: #FFFF09;}
    .cython.score-252 {background-color: #FFFF09;}
    .cython.score-253 {background-color: #FFFF09;}
    .cython.score-254 {background-color: #FFFF09;}
    .cython .hll { background-color: #ffffcc }
    .cython  { background: #f8f8f8; }
    .cython .c { color: #408080; font-style: italic } /* Comment */
    .cython .err { border: 1px solid #FF0000 } /* Error */
    .cython .k { color: #008000; font-weight: bold } /* Keyword */
    .cython .o { color: #666666 } /* Operator */
    .cython .ch { color: #408080; font-style: italic } /* Comment.Hashbang */
    .cython .cm { color: #408080; font-style: italic } /* Comment.Multiline */
    .cython .cp { color: #BC7A00 } /* Comment.Preproc */
    .cython .cpf { color: #408080; font-style: italic } /* Comment.PreprocFile */
    .cython .c1 { color: #408080; font-style: italic } /* Comment.Single */
    .cython .cs { color: #408080; font-style: italic } /* Comment.Special */
    .cython .gd { color: #A00000 } /* Generic.Deleted */
    .cython .ge { font-style: italic } /* Generic.Emph */
    .cython .gr { color: #FF0000 } /* Generic.Error */
    .cython .gh { color: #000080; font-weight: bold } /* Generic.Heading */
    .cython .gi { color: #00A000 } /* Generic.Inserted */
    .cython .go { color: #888888 } /* Generic.Output */
    .cython .gp { color: #000080; font-weight: bold } /* Generic.Prompt */
    .cython .gs { font-weight: bold } /* Generic.Strong */
    .cython .gu { color: #800080; font-weight: bold } /* Generic.Subheading */
    .cython .gt { color: #0044DD } /* Generic.Traceback */
    .cython .kc { color: #008000; font-weight: bold } /* Keyword.Constant */
    .cython .kd { color: #008000; font-weight: bold } /* Keyword.Declaration */
    .cython .kn { color: #008000; font-weight: bold } /* Keyword.Namespace */
    .cython .kp { color: #008000 } /* Keyword.Pseudo */
    .cython .kr { color: #008000; font-weight: bold } /* Keyword.Reserved */
    .cython .kt { color: #B00040 } /* Keyword.Type */
    .cython .m { color: #666666 } /* Literal.Number */
    .cython .s { color: #BA2121 } /* Literal.String */
    .cython .na { color: #7D9029 } /* Name.Attribute */
    .cython .nb { color: #008000 } /* Name.Builtin */
    .cython .nc { color: #0000FF; font-weight: bold } /* Name.Class */
    .cython .no { color: #880000 } /* Name.Constant */
    .cython .nd { color: #AA22FF } /* Name.Decorator */
    .cython .ni { color: #999999; font-weight: bold } /* Name.Entity */
    .cython .ne { color: #D2413A; font-weight: bold } /* Name.Exception */
    .cython .nf { color: #0000FF } /* Name.Function */
    .cython .nl { color: #A0A000 } /* Name.Label */
    .cython .nn { color: #0000FF; font-weight: bold } /* Name.Namespace */
    .cython .nt { color: #008000; font-weight: bold } /* Name.Tag */
    .cython .nv { color: #19177C } /* Name.Variable */
    .cython .ow { color: #AA22FF; font-weight: bold } /* Operator.Word */
    .cython .w { color: #bbbbbb } /* Text.Whitespace */
    .cython .mb { color: #666666 } /* Literal.Number.Bin */
    .cython .mf { color: #666666 } /* Literal.Number.Float */
    .cython .mh { color: #666666 } /* Literal.Number.Hex */
    .cython .mi { color: #666666 } /* Literal.Number.Integer */
    .cython .mo { color: #666666 } /* Literal.Number.Oct */
    .cython .sb { color: #BA2121 } /* Literal.String.Backtick */
    .cython .sc { color: #BA2121 } /* Literal.String.Char */
    .cython .sd { color: #BA2121; font-style: italic } /* Literal.String.Doc */
    .cython .s2 { color: #BA2121 } /* Literal.String.Double */
    .cython .se { color: #BB6622; font-weight: bold } /* Literal.String.Escape */
    .cython .sh { color: #BA2121 } /* Literal.String.Heredoc */
    .cython .si { color: #BB6688; font-weight: bold } /* Literal.String.Interpol */
    .cython .sx { color: #008000 } /* Literal.String.Other */
    .cython .sr { color: #BB6688 } /* Literal.String.Regex */
    .cython .s1 { color: #BA2121 } /* Literal.String.Single */
    .cython .ss { color: #19177C } /* Literal.String.Symbol */
    .cython .bp { color: #008000 } /* Name.Builtin.Pseudo */
    .cython .vc { color: #19177C } /* Name.Variable.Class */
    .cython .vg { color: #19177C } /* Name.Variable.Global */
    .cython .vi { color: #19177C } /* Name.Variable.Instance */
    .cython .il { color: #666666 } /* Literal.Number.Integer.Long */
        </style>
        <script>
        function toggleDiv(id) {
            theDiv = id.nextElementSibling
            if (theDiv.style.display != 'block') theDiv.style.display = 'block';
            else theDiv.style.display = 'none';
        }
        </script>
    </head>
    <body class="cython">
    <p><span style="border-bottom: solid 1px grey;">Generated by Cython 0.23.5</span></p>
    <p>
        <span style="background-color: #FFFF00">Yellow lines</span> hint at Python interaction.<br />
        Click on a line that starts with a "<code>+</code>" to see the C code that Cython generated for it.
    </p>
    <div class="cython"><pre class="cython line score-0">&#xA0;<span class="">01</span>: </pre>
    <pre class="cython line score-11" onclick='toggleDiv(this)'>+<span class="">02</span>: <span class="k">cimport</span> <span class="nn">cython</span></pre>
    <pre class='cython code score-11 '>  __pyx_t_1 = <span class='py_c_api'>PyDict_New</span>();<span class='error_goto'> if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2; __pyx_clineno = __LINE__; goto __pyx_L1_error;}</span>
      <span class='refnanny'>__Pyx_GOTREF</span>(__pyx_t_1);
      if (<span class='py_c_api'>PyDict_SetItem</span>(__pyx_d, __pyx_n_s_test, __pyx_t_1) &lt; 0) <span class='error_goto'>{__pyx_filename = __pyx_f[0]; __pyx_lineno = 2; __pyx_clineno = __LINE__; goto __pyx_L1_error;}</span>
      <span class='pyx_macro_api'>__Pyx_DECREF</span>(__pyx_t_1); __pyx_t_1 = 0;
    </pre><pre class="cython line score-0">&#xA0;<span class="">03</span>: </pre>
    <pre class="cython line score-0">&#xA0;<span class="">04</span>: <span class="k">cdef</span> <span class="kr">extern</span> <span class="k">from</span> <span class="s">&quot;complex.h&quot;</span><span class="p">:</span></pre>
    <pre class="cython line score-0">&#xA0;<span class="">05</span>:     <span class="n">double</span> <span class="n">cabs</span><span class="p">(</span><span class="n">double</span> <span class="nb">complex</span><span class="p">)</span></pre>
    <pre class="cython line score-0">&#xA0;<span class="">06</span>: </pre>
    <pre class="cython line score-0">&#xA0;<span class="">07</span>: <span class="c"># color function for point at (x, y)</span></pre>
    <pre class="cython line score-0" onclick='toggleDiv(this)'>+<span class="">08</span>: <span class="k">cdef</span> <span class="kt">unsigned</span> <span class="kt">char</span> <span class="nf">mandel_cython</span><span class="p">(</span><span class="n">double</span> <span class="n">x</span><span class="p">,</span> <span class="n">double</span> <span class="n">y</span><span class="p">,</span> <span class="nb">int</span> <span class="n">max_iters</span><span class="p">):</span></pre>
    <pre class='cython code score-0 '>static unsigned char __pyx_f_46_cython_magic_176141650497de6acdeb56d4e03ce71b_mandel_cython(double __pyx_v_x, double __pyx_v_y, int __pyx_v_max_iters) {
      __pyx_t_double_complex __pyx_v_c;
      __pyx_t_double_complex __pyx_v_z;
      int __pyx_v_i;
      unsigned char __pyx_r;
      <span class='refnanny'>__Pyx_RefNannyDeclarations</span>
      <span class='refnanny'>__Pyx_RefNannySetupContext</span>("mandel_cython", 0);
    /* â¦ */
      /* function exit code */
      __pyx_L0:;
      <span class='refnanny'>__Pyx_RefNannyFinishContext</span>();
      return __pyx_r;
    }
    </pre><pre class="cython line score-0">&#xA0;<span class="">09</span>:     <span class="k">cdef</span> <span class="kt">double</span> <span class="kt">complex</span> <span class="nf">c</span><span class="p">,</span> <span class="nf">z</span></pre>
    <pre class="cython line score-0">&#xA0;<span class="">10</span>: </pre>
    <pre class="cython line score-0" onclick='toggleDiv(this)'>+<span class="">11</span>:     <span class="n">c</span> <span class="o">=</span> <span class="n">x</span> <span class="o">+</span> <span class="n">y</span><span class="o">*</span><span class="mf">1</span><span class="n">j</span></pre>
    <pre class='cython code score-0 '>  __pyx_v_c = __Pyx_c_sum(__pyx_t_double_complex_from_parts(__pyx_v_x, 0), __Pyx_c_prod(__pyx_t_double_complex_from_parts(__pyx_v_y, 0), __pyx_t_double_complex_from_parts(0, 1.0)));
    </pre><pre class="cython line score-0" onclick='toggleDiv(this)'>+<span class="">12</span>:     <span class="n">z</span> <span class="o">=</span> <span class="mf">0.0</span><span class="n">j</span></pre>
    <pre class='cython code score-0 '>  __pyx_v_z = __pyx_t_double_complex_from_parts(0, 0.0);
    </pre><pre class="cython line score-0" onclick='toggleDiv(this)'>+<span class="">13</span>:     <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">max_iters</span><span class="p">):</span></pre>
    <pre class='cython code score-0 '>  __pyx_t_1 = __pyx_v_max_iters;
      for (__pyx_t_2 = 0; __pyx_t_2 &lt; __pyx_t_1; __pyx_t_2+=1) {
        __pyx_v_i = __pyx_t_2;
    </pre><pre class="cython line score-0" onclick='toggleDiv(this)'>+<span class="">14</span>:         <span class="n">z</span> <span class="o">=</span> <span class="n">z</span><span class="o">*</span><span class="n">z</span> <span class="o">+</span> <span class="n">c</span></pre>
    <pre class='cython code score-0 '>    __pyx_v_z = __Pyx_c_sum(__Pyx_c_prod(__pyx_v_z, __pyx_v_z), __pyx_v_c);
    </pre><pre class="cython line score-0" onclick='toggleDiv(this)'>+<span class="">15</span>:         <span class="k">if</span> <span class="n">cabs</span><span class="p">(</span><span class="n">z</span><span class="p">)</span> <span class="o">&gt;=</span> <span class="mf">2</span><span class="p">:</span></pre>
    <pre class='cython code score-0 '>    __pyx_t_3 = ((cabs(__pyx_v_z) &gt;= 2.0) != 0);
        if (__pyx_t_3) {
    /* â¦ */
        }
      }
    </pre><pre class="cython line score-0" onclick='toggleDiv(this)'>+<span class="">16</span>:             <span class="k">return</span> <span class="n">i</span></pre>
    <pre class='cython code score-0 '>      __pyx_r = __pyx_v_i;
          goto __pyx_L0;
    </pre><pre class="cython line score-0" onclick='toggleDiv(this)'>+<span class="">17</span>:     <span class="k">return</span> <span class="n">max_iters</span></pre>
    <pre class='cython code score-0 '>  __pyx_r = __pyx_v_max_iters;
      goto __pyx_L0;
    </pre><pre class="cython line score-0">&#xA0;<span class="">18</span>: </pre>
    <pre class="cython line score-0">&#xA0;<span class="">19</span>: <span class="nd">@cython</span><span class="o">.</span><span class="n">cdivision</span><span class="p">(</span><span class="bp">True</span><span class="p">)</span></pre>
    <pre class="cython line score-106" onclick='toggleDiv(this)'>+<span class="">20</span>: <span class="k">def</span> <span class="nf">create_fractal_cython</span><span class="p">(</span><span class="n">double</span> <span class="n">xmin</span><span class="p">,</span> <span class="n">double</span> <span class="n">xmax</span><span class="p">,</span> <span class="n">double</span> <span class="n">ymin</span><span class="p">,</span> <span class="n">double</span> <span class="n">ymax</span><span class="p">,</span> <span class="nb">unsigned</span> <span class="n">char</span><span class="p">[:,</span> <span class="p">:]</span> <span class="n">image</span><span class="p">,</span> <span class="nb">int</span> <span class="n">iters</span><span class="p">):</span></pre>
    <pre class='cython code score-106 '>/* Python wrapper */
    static PyObject *__pyx_pw_46_cython_magic_176141650497de6acdeb56d4e03ce71b_1create_fractal_cython(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
    static PyMethodDef __pyx_mdef_46_cython_magic_176141650497de6acdeb56d4e03ce71b_1create_fractal_cython = {"create_fractal_cython", (PyCFunction)__pyx_pw_46_cython_magic_176141650497de6acdeb56d4e03ce71b_1create_fractal_cython, METH_VARARGS|METH_KEYWORDS, 0};
    static PyObject *__pyx_pw_46_cython_magic_176141650497de6acdeb56d4e03ce71b_1create_fractal_cython(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
      double __pyx_v_xmin;
      double __pyx_v_xmax;
      double __pyx_v_ymin;
      double __pyx_v_ymax;
      __Pyx_memviewslice __pyx_v_image = { 0, 0, { 0 }, { 0 }, { 0 } };
      int __pyx_v_iters;
      PyObject *__pyx_r = 0;
      <span class='refnanny'>__Pyx_RefNannyDeclarations</span>
      <span class='refnanny'>__Pyx_RefNannySetupContext</span>("create_fractal_cython (wrapper)", 0);
      {
        static PyObject **__pyx_pyargnames[] = {&amp;__pyx_n_s_xmin,&amp;__pyx_n_s_xmax,&amp;__pyx_n_s_ymin,&amp;__pyx_n_s_ymax,&amp;__pyx_n_s_image,&amp;__pyx_n_s_iters,0};
        PyObject* values[6] = {0,0,0,0,0,0};
        if (unlikely(__pyx_kwds)) {
          Py_ssize_t kw_args;
          const Py_ssize_t pos_args = <span class='py_macro_api'>PyTuple_GET_SIZE</span>(__pyx_args);
          switch (pos_args) {
            case  6: values[5] = <span class='py_macro_api'>PyTuple_GET_ITEM</span>(__pyx_args, 5);
            case  5: values[4] = <span class='py_macro_api'>PyTuple_GET_ITEM</span>(__pyx_args, 4);
            case  4: values[3] = <span class='py_macro_api'>PyTuple_GET_ITEM</span>(__pyx_args, 3);
            case  3: values[2] = <span class='py_macro_api'>PyTuple_GET_ITEM</span>(__pyx_args, 2);
            case  2: values[1] = <span class='py_macro_api'>PyTuple_GET_ITEM</span>(__pyx_args, 1);
            case  1: values[0] = <span class='py_macro_api'>PyTuple_GET_ITEM</span>(__pyx_args, 0);
            case  0: break;
            default: goto __pyx_L5_argtuple_error;
          }
          kw_args = <span class='py_c_api'>PyDict_Size</span>(__pyx_kwds);
          switch (pos_args) {
            case  0:
            if (likely((values[0] = <span class='py_c_api'>PyDict_GetItem</span>(__pyx_kwds, __pyx_n_s_xmin)) != 0)) kw_args--;
            else goto __pyx_L5_argtuple_error;
            case  1:
            if (likely((values[1] = <span class='py_c_api'>PyDict_GetItem</span>(__pyx_kwds, __pyx_n_s_xmax)) != 0)) kw_args--;
            else {
              <span class='pyx_c_api'>__Pyx_RaiseArgtupleInvalid</span>("create_fractal_cython", 1, 6, 6, 1); <span class='error_goto'>{__pyx_filename = __pyx_f[0]; __pyx_lineno = 20; __pyx_clineno = __LINE__; goto __pyx_L3_error;}</span>
            }
            case  2:
            if (likely((values[2] = <span class='py_c_api'>PyDict_GetItem</span>(__pyx_kwds, __pyx_n_s_ymin)) != 0)) kw_args--;
            else {
              <span class='pyx_c_api'>__Pyx_RaiseArgtupleInvalid</span>("create_fractal_cython", 1, 6, 6, 2); <span class='error_goto'>{__pyx_filename = __pyx_f[0]; __pyx_lineno = 20; __pyx_clineno = __LINE__; goto __pyx_L3_error;}</span>
            }
            case  3:
            if (likely((values[3] = <span class='py_c_api'>PyDict_GetItem</span>(__pyx_kwds, __pyx_n_s_ymax)) != 0)) kw_args--;
            else {
              <span class='pyx_c_api'>__Pyx_RaiseArgtupleInvalid</span>("create_fractal_cython", 1, 6, 6, 3); <span class='error_goto'>{__pyx_filename = __pyx_f[0]; __pyx_lineno = 20; __pyx_clineno = __LINE__; goto __pyx_L3_error;}</span>
            }
            case  4:
            if (likely((values[4] = <span class='py_c_api'>PyDict_GetItem</span>(__pyx_kwds, __pyx_n_s_image)) != 0)) kw_args--;
            else {
              <span class='pyx_c_api'>__Pyx_RaiseArgtupleInvalid</span>("create_fractal_cython", 1, 6, 6, 4); <span class='error_goto'>{__pyx_filename = __pyx_f[0]; __pyx_lineno = 20; __pyx_clineno = __LINE__; goto __pyx_L3_error;}</span>
            }
            case  5:
            if (likely((values[5] = <span class='py_c_api'>PyDict_GetItem</span>(__pyx_kwds, __pyx_n_s_iters)) != 0)) kw_args--;
            else {
              <span class='pyx_c_api'>__Pyx_RaiseArgtupleInvalid</span>("create_fractal_cython", 1, 6, 6, 5); <span class='error_goto'>{__pyx_filename = __pyx_f[0]; __pyx_lineno = 20; __pyx_clineno = __LINE__; goto __pyx_L3_error;}</span>
            }
          }
          if (unlikely(kw_args &gt; 0)) {
            if (unlikely(<span class='pyx_c_api'>__Pyx_ParseOptionalKeywords</span>(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "create_fractal_cython") &lt; 0)) <span class='error_goto'>{__pyx_filename = __pyx_f[0]; __pyx_lineno = 20; __pyx_clineno = __LINE__; goto __pyx_L3_error;}</span>
          }
        } else if (<span class='py_macro_api'>PyTuple_GET_SIZE</span>(__pyx_args) != 6) {
          goto __pyx_L5_argtuple_error;
        } else {
          values[0] = <span class='py_macro_api'>PyTuple_GET_ITEM</span>(__pyx_args, 0);
          values[1] = <span class='py_macro_api'>PyTuple_GET_ITEM</span>(__pyx_args, 1);
          values[2] = <span class='py_macro_api'>PyTuple_GET_ITEM</span>(__pyx_args, 2);
          values[3] = <span class='py_macro_api'>PyTuple_GET_ITEM</span>(__pyx_args, 3);
          values[4] = <span class='py_macro_api'>PyTuple_GET_ITEM</span>(__pyx_args, 4);
          values[5] = <span class='py_macro_api'>PyTuple_GET_ITEM</span>(__pyx_args, 5);
        }
        __pyx_v_xmin = __pyx_<span class='py_c_api'>PyFloat_AsDouble</span>(values[0]);<span class='error_goto'> if (unlikely((__pyx_v_xmin == (double)-1) &amp;&amp; PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 20; __pyx_clineno = __LINE__; goto __pyx_L3_error;}</span>
        __pyx_v_xmax = __pyx_<span class='py_c_api'>PyFloat_AsDouble</span>(values[1]);<span class='error_goto'> if (unlikely((__pyx_v_xmax == (double)-1) &amp;&amp; PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 20; __pyx_clineno = __LINE__; goto __pyx_L3_error;}</span>
        __pyx_v_ymin = __pyx_<span class='py_c_api'>PyFloat_AsDouble</span>(values[2]);<span class='error_goto'> if (unlikely((__pyx_v_ymin == (double)-1) &amp;&amp; PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 20; __pyx_clineno = __LINE__; goto __pyx_L3_error;}</span>
        __pyx_v_ymax = __pyx_<span class='py_c_api'>PyFloat_AsDouble</span>(values[3]);<span class='error_goto'> if (unlikely((__pyx_v_ymax == (double)-1) &amp;&amp; PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 20; __pyx_clineno = __LINE__; goto __pyx_L3_error;}</span>
        __pyx_v_image = <span class='pyx_c_api'>__Pyx_PyObject_to_MemoryviewSlice_dsds_unsigned_char</span>(values[4]);<span class='error_goto'> if (unlikely(!__pyx_v_image.memview)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 20; __pyx_clineno = __LINE__; goto __pyx_L3_error;}</span>
        __pyx_v_iters = <span class='pyx_c_api'>__Pyx_PyInt_As_int</span>(values[5]);<span class='error_goto'> if (unlikely((__pyx_v_iters == (int)-1) &amp;&amp; PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 20; __pyx_clineno = __LINE__; goto __pyx_L3_error;}</span>
      }
      goto __pyx_L4_argument_unpacking_done;
      __pyx_L5_argtuple_error:;
      <span class='pyx_c_api'>__Pyx_RaiseArgtupleInvalid</span>("create_fractal_cython", 1, 6, 6, <span class='py_macro_api'>PyTuple_GET_SIZE</span>(__pyx_args)); <span class='error_goto'>{__pyx_filename = __pyx_f[0]; __pyx_lineno = 20; __pyx_clineno = __LINE__; goto __pyx_L3_error;}</span>
      __pyx_L3_error:;
      <span class='pyx_c_api'>__Pyx_AddTraceback</span>("_cython_magic_176141650497de6acdeb56d4e03ce71b.create_fractal_cython", __pyx_clineno, __pyx_lineno, __pyx_filename);
      <span class='refnanny'>__Pyx_RefNannyFinishContext</span>();
      return NULL;
      __pyx_L4_argument_unpacking_done:;
      __pyx_r = __pyx_pf_46_cython_magic_176141650497de6acdeb56d4e03ce71b_create_fractal_cython(__pyx_self, __pyx_v_xmin, __pyx_v_xmax, __pyx_v_ymin, __pyx_v_ymax, __pyx_v_image, __pyx_v_iters);
      int __pyx_lineno = 0;
      const char *__pyx_filename = NULL;
      int __pyx_clineno = 0;
    
      /* function exit code */
      <span class='refnanny'>__Pyx_RefNannyFinishContext</span>();
      return __pyx_r;
    }
    
    static PyObject *__pyx_pf_46_cython_magic_176141650497de6acdeb56d4e03ce71b_create_fractal_cython(CYTHON_UNUSED PyObject *__pyx_self, double __pyx_v_xmin, double __pyx_v_xmax, double __pyx_v_ymin, double __pyx_v_ymax, __Pyx_memviewslice __pyx_v_image, int __pyx_v_iters) {
      int __pyx_v_x;
      int __pyx_v_y;
      int __pyx_v_height;
      int __pyx_v_width;
      double __pyx_v_pixel_size_x;
      double __pyx_v_pixel_size_y;
      double __pyx_v_real;
      double __pyx_v_imag;
      unsigned char __pyx_v_color;
      PyObject *__pyx_r = NULL;
      <span class='refnanny'>__Pyx_RefNannyDeclarations</span>
      <span class='refnanny'>__Pyx_RefNannySetupContext</span>("create_fractal_cython", 0);
    /* â¦ */
      /* function exit code */
      __pyx_r = Py_None; <span class='pyx_macro_api'>__Pyx_INCREF</span>(Py_None);
      goto __pyx_L0;
      __pyx_L1_error:;
      <span class='pyx_c_api'>__Pyx_AddTraceback</span>("_cython_magic_176141650497de6acdeb56d4e03ce71b.create_fractal_cython", __pyx_clineno, __pyx_lineno, __pyx_filename);
      __pyx_r = NULL;
      __pyx_L0:;
      __PYX_XDEC_MEMVIEW(&amp;__pyx_v_image, 1);
      <span class='refnanny'>__Pyx_XGIVEREF</span>(__pyx_r);
      <span class='refnanny'>__Pyx_RefNannyFinishContext</span>();
      return __pyx_r;
    }
    /* â¦ */
      __pyx_tuple__14 = <span class='py_c_api'>PyTuple_Pack</span>(15, __pyx_n_s_xmin, __pyx_n_s_xmax, __pyx_n_s_ymin, __pyx_n_s_ymax, __pyx_n_s_image, __pyx_n_s_iters, __pyx_n_s_x, __pyx_n_s_y, __pyx_n_s_height, __pyx_n_s_width, __pyx_n_s_pixel_size_x, __pyx_n_s_pixel_size_y, __pyx_n_s_real, __pyx_n_s_imag, __pyx_n_s_color);<span class='error_goto'> if (unlikely(!__pyx_tuple__14)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 20; __pyx_clineno = __LINE__; goto __pyx_L1_error;}</span>
      <span class='refnanny'>__Pyx_GOTREF</span>(__pyx_tuple__14);
      <span class='refnanny'>__Pyx_GIVEREF</span>(__pyx_tuple__14);
    /* â¦ */
      __pyx_t_1 = PyCFunction_NewEx(&amp;__pyx_mdef_46_cython_magic_176141650497de6acdeb56d4e03ce71b_1create_fractal_cython, NULL, __pyx_n_s_cython_magic_176141650497de6acd);<span class='error_goto'> if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 20; __pyx_clineno = __LINE__; goto __pyx_L1_error;}</span>
      <span class='refnanny'>__Pyx_GOTREF</span>(__pyx_t_1);
      if (<span class='py_c_api'>PyDict_SetItem</span>(__pyx_d, __pyx_n_s_create_fractal_cython, __pyx_t_1) &lt; 0) <span class='error_goto'>{__pyx_filename = __pyx_f[0]; __pyx_lineno = 20; __pyx_clineno = __LINE__; goto __pyx_L1_error;}</span>
      <span class='pyx_macro_api'>__Pyx_DECREF</span>(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_codeobj__15 = (PyObject*)<span class='pyx_c_api'>__Pyx_PyCode_New</span>(6, 0, 15, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__14, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_jovyan_cache_ipython_cytho, __pyx_n_s_create_fractal_cython, 20, __pyx_empty_bytes);<span class='error_goto'> if (unlikely(!__pyx_codeobj__15)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 20; __pyx_clineno = __LINE__; goto __pyx_L1_error;}</span>
    </pre><pre class="cython line score-0">&#xA0;<span class="">21</span>: </pre>
    <pre class="cython line score-0">&#xA0;<span class="">22</span>:     <span class="k">cdef</span> <span class="kt">int</span> <span class="nf">x</span><span class="p">,</span> <span class="nf">y</span></pre>
    <pre class="cython line score-0">&#xA0;<span class="">23</span>:     <span class="k">cdef</span> <span class="kt">int</span> <span class="nf">height</span><span class="p">,</span> <span class="nf">width</span></pre>
    <pre class="cython line score-0">&#xA0;<span class="">24</span>:     <span class="k">cdef</span> <span class="kt">double</span> <span class="nf">pixel_size_x</span><span class="p">,</span> <span class="nf">pixel_size_y</span></pre>
    <pre class="cython line score-0">&#xA0;<span class="">25</span>:     <span class="k">cdef</span> <span class="kt">double</span> <span class="nf">real</span><span class="p">,</span> <span class="nf">imag</span></pre>
    <pre class="cython line score-0">&#xA0;<span class="">26</span>:     <span class="k">cdef</span> <span class="kt">unsigned</span> <span class="kt">char</span> <span class="nf">color</span></pre>
    <pre class="cython line score-0">&#xA0;<span class="">27</span>: </pre>
    <pre class="cython line score-0" onclick='toggleDiv(this)'>+<span class="">28</span>:     <span class="n">height</span> <span class="o">=</span> <span class="n">image</span><span class="o">.</span><span class="n">shape</span><span class="p">[</span><span class="mf">0</span><span class="p">]</span></pre>
    <pre class='cython code score-0 '>  __pyx_v_height = (__pyx_v_image.shape[0]);
    </pre><pre class="cython line score-0" onclick='toggleDiv(this)'>+<span class="">29</span>:     <span class="n">width</span> <span class="o">=</span> <span class="n">image</span><span class="o">.</span><span class="n">shape</span><span class="p">[</span><span class="mf">1</span><span class="p">]</span></pre>
    <pre class='cython code score-0 '>  __pyx_v_width = (__pyx_v_image.shape[1]);
    </pre><pre class="cython line score-0">&#xA0;<span class="">30</span>: </pre>
    <pre class="cython line score-0" onclick='toggleDiv(this)'>+<span class="">31</span>:     <span class="n">pixel_size_x</span> <span class="o">=</span> <span class="p">(</span><span class="n">xmax</span> <span class="o">-</span> <span class="n">xmin</span><span class="p">)</span><span class="o">/</span><span class="n">width</span></pre>
    <pre class='cython code score-0 '>  __pyx_v_pixel_size_x = ((__pyx_v_xmax - __pyx_v_xmin) / __pyx_v_width);
    </pre><pre class="cython line score-0" onclick='toggleDiv(this)'>+<span class="">32</span>:     <span class="n">pixel_size_y</span> <span class="o">=</span> <span class="p">(</span><span class="n">ymax</span> <span class="o">-</span> <span class="n">ymin</span><span class="p">)</span><span class="o">/</span><span class="n">height</span></pre>
    <pre class='cython code score-0 '>  __pyx_v_pixel_size_y = ((__pyx_v_ymax - __pyx_v_ymin) / __pyx_v_height);
    </pre><pre class="cython line score-0">&#xA0;<span class="">33</span>: </pre>
    <pre class="cython line score-0" onclick='toggleDiv(this)'>+<span class="">34</span>:     <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">width</span><span class="p">):</span></pre>
    <pre class='cython code score-0 '>  __pyx_t_1 = __pyx_v_width;
      for (__pyx_t_2 = 0; __pyx_t_2 &lt; __pyx_t_1; __pyx_t_2+=1) {
        __pyx_v_x = __pyx_t_2;
    </pre><pre class="cython line score-0" onclick='toggleDiv(this)'>+<span class="">35</span>:         <span class="n">real</span> <span class="o">=</span> <span class="n">xmin</span> <span class="o">+</span> <span class="n">x</span><span class="o">*</span><span class="n">pixel_size_x</span></pre>
    <pre class='cython code score-0 '>    __pyx_v_real = (__pyx_v_xmin + (__pyx_v_x * __pyx_v_pixel_size_x));
    </pre><pre class="cython line score-0" onclick='toggleDiv(this)'>+<span class="">36</span>:         <span class="k">for</span> <span class="n">y</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">height</span><span class="p">):</span></pre>
    <pre class='cython code score-0 '>    __pyx_t_3 = __pyx_v_height;
        for (__pyx_t_4 = 0; __pyx_t_4 &lt; __pyx_t_3; __pyx_t_4+=1) {
          __pyx_v_y = __pyx_t_4;
    </pre><pre class="cython line score-0" onclick='toggleDiv(this)'>+<span class="">37</span>:             <span class="n">imag</span> <span class="o">=</span> <span class="n">ymin</span> <span class="o">+</span> <span class="n">y</span><span class="o">*</span><span class="n">pixel_size_y</span></pre>
    <pre class='cython code score-0 '>      __pyx_v_imag = (__pyx_v_ymin + (__pyx_v_y * __pyx_v_pixel_size_y));
    </pre><pre class="cython line score-0" onclick='toggleDiv(this)'>+<span class="">38</span>:             <span class="n">color</span> <span class="o">=</span> <span class="n">mandel_cython</span><span class="p">(</span><span class="n">real</span><span class="p">,</span> <span class="n">imag</span><span class="p">,</span> <span class="n">iters</span><span class="p">)</span></pre>
    <pre class='cython code score-0 '>      __pyx_v_color = __pyx_f_46_cython_magic_176141650497de6acdeb56d4e03ce71b_mandel_cython(__pyx_v_real, __pyx_v_imag, __pyx_v_iters);
    </pre><pre class="cython line score-2" onclick='toggleDiv(this)'>+<span class="">39</span>:             <span class="n">image</span><span class="p">[</span><span class="n">y</span><span class="p">,</span> <span class="n">x</span><span class="p">]</span>  <span class="o">=</span> <span class="n">color</span></pre>
    <pre class='cython code score-2 '>      __pyx_t_5 = __pyx_v_y;
          __pyx_t_6 = __pyx_v_x;
          __pyx_t_7 = -1;
          if (__pyx_t_5 &lt; 0) {
            __pyx_t_5 += __pyx_v_image.shape[0];
            if (unlikely(__pyx_t_5 &lt; 0)) __pyx_t_7 = 0;
          } else if (unlikely(__pyx_t_5 &gt;= __pyx_v_image.shape[0])) __pyx_t_7 = 0;
          if (__pyx_t_6 &lt; 0) {
            __pyx_t_6 += __pyx_v_image.shape[1];
            if (unlikely(__pyx_t_6 &lt; 0)) __pyx_t_7 = 1;
          } else if (unlikely(__pyx_t_6 &gt;= __pyx_v_image.shape[1])) __pyx_t_7 = 1;
          if (unlikely(__pyx_t_7 != -1)) {
            <span class='pyx_c_api'>__Pyx_RaiseBufferIndexError</span>(__pyx_t_7);
            <span class='error_goto'>{__pyx_filename = __pyx_f[0]; __pyx_lineno = 39; __pyx_clineno = __LINE__; goto __pyx_L1_error;}</span>
          }
          *((unsigned char *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_image.data + __pyx_t_5 * __pyx_v_image.strides[0]) ) + __pyx_t_6 * __pyx_v_image.strides[1]) )) = __pyx_v_color;
        }
      }
    </pre></div></body></html>



.. code:: python

    gimage = np.zeros((1024, 1536), dtype=np.uint8)
    xmin, xmax, ymin, ymax = np.array([-2.0, 1.0, -1.0, 1.0]).astype('float32')
    iters = 50
    
    start = time.clock()
    create_fractal_cython(xmin, xmax, ymin, ymax, gimage, iters)
    dt = time.clock() - start
    
    print("Mandelbrot created on CPU in %f s" % dt)
    plt.grid(False)
    plt.imshow(gimage, cmap='jet')
    pass


.. parsed-literal::

    Mandelbrot created on CPU in 0.462727 s



.. image:: 10C_Cython_files/10C_Cython_27_1.png

