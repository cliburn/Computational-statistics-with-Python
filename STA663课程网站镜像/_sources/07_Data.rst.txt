
Data
====

Resources
---------

-  `Pandas
   documentation <http://pandas.pydata.org/pandas-docs/stable/>`__
-  `QGrid <https://github.com/quantopian/qgrid>`__

.. code:: python

    import numpy as np
    import pandas as pd
    from pandas import Series, DataFrame
    import matplotlib.pyplot as plt
    %matplotlib inline

.. code:: python

    plt.style.use('ggplot')

Working with Series
-------------------

.. code:: python

    x = Series(range(5,10))

.. code:: python

    x




.. parsed-literal::

    0    5
    1    6
    2    7
    3    8
    4    9
    dtype: int64



We cna treat Series objects much like numpy vectors
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code:: python

    x.sum(), x.mean(), x.std()




.. parsed-literal::

    (35, 7.0, 1.5811388300841898)



.. code:: python

    x**2




.. parsed-literal::

    0    25
    1    36
    2    49
    3    64
    4    81
    dtype: int64



.. code:: python

    x[x >= 8]




.. parsed-literal::

    3    8
    4    9
    dtype: int64



Series can also contain more information than numpy vectors
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

You can always use standard positional indexing
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. code:: python

    x[1:4]




.. parsed-literal::

    1    6
    2    7
    3    8
    dtype: int64



Series index
^^^^^^^^^^^^

But you can also assign labeled indexes.

.. code:: python

    x.index = list('abcde')
    x




.. parsed-literal::

    a    5
    b    6
    c    7
    d    8
    e    9
    dtype: int64



Note that with labels, the end index is included
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. code:: python

    x['a':'c']




.. parsed-literal::

    a    5
    b    6
    c    7
    dtype: int64



Even when you have a labeled index, positional arguments still work
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. code:: python

    x[1:4]




.. parsed-literal::

    b    6
    c    7
    d    8
    dtype: int64



.. code:: python

    x.a, x.c, x.e




.. parsed-literal::

    (5, 7, 9)



Working with missing data
^^^^^^^^^^^^^^^^^^^^^^^^^

Missing data is indicated with NaN (not a number).

.. code:: python

    y = Series([10, np.nan, np.nan, 13, 14])
    y




.. parsed-literal::

    0    10.0
    1     NaN
    2     NaN
    3    13.0
    4    14.0
    dtype: float64



Concatenating two series
^^^^^^^^^^^^^^^^^^^^^^^^

.. code:: python

    z = pd.concat([x, y])
    z




.. parsed-literal::

    a     5.0
    b     6.0
    c     7.0
    d     8.0
    e     9.0
    0    10.0
    1     NaN
    2     NaN
    3    13.0
    4    14.0
    dtype: float64



Reset index to default
^^^^^^^^^^^^^^^^^^^^^^

.. code:: python

    z = z.reset_index(drop=True)
    z




.. parsed-literal::

    0     5.0
    1     6.0
    2     7.0
    3     8.0
    4     9.0
    5    10.0
    6     NaN
    7     NaN
    8    13.0
    9    14.0
    dtype: float64



``pandas`` aggregate functions ignore missing data
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. code:: python

    z.sum(), z.mean(), z.std()




.. parsed-literal::

    (72.0, 9.0, 3.2071349029490928)



Selecting missing values
^^^^^^^^^^^^^^^^^^^^^^^^

.. code:: python

    z[z.isnull()]




.. parsed-literal::

    6   NaN
    7   NaN
    dtype: float64



Selecting non-missing values
^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. code:: python

    z[z.notnull()]




.. parsed-literal::

    0     5.0
    1     6.0
    2     7.0
    3     8.0
    4     9.0
    5    10.0
    8    13.0
    9    14.0
    dtype: float64



Replacement of missing values
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. code:: python

    z.fillna(0)




.. parsed-literal::

    0     5.0
    1     6.0
    2     7.0
    3     8.0
    4     9.0
    5    10.0
    6     0.0
    7     0.0
    8    13.0
    9    14.0
    dtype: float64



.. code:: python

    z.fillna(method='ffill')




.. parsed-literal::

    0     5.0
    1     6.0
    2     7.0
    3     8.0
    4     9.0
    5    10.0
    6    10.0
    7    10.0
    8    13.0
    9    14.0
    dtype: float64



.. code:: python

    z.fillna(method='bfill')




.. parsed-literal::

    0     5.0
    1     6.0
    2     7.0
    3     8.0
    4     9.0
    5    10.0
    6    13.0
    7    13.0
    8    13.0
    9    14.0
    dtype: float64



.. code:: python

    z.fillna(z.mean())




.. parsed-literal::

    0     5.0
    1     6.0
    2     7.0
    3     8.0
    4     9.0
    5    10.0
    6     9.0
    7     9.0
    8    13.0
    9    14.0
    dtype: float64



Working with dates / times
^^^^^^^^^^^^^^^^^^^^^^^^^^

We will see more date/time handling in the DataFrame section.

.. code:: python

    z.index = pd.date_range('01-Jan-2016', periods=len(z))

.. code:: python

    z




.. parsed-literal::

    2016-01-01     5.0
    2016-01-02     6.0
    2016-01-03     7.0
    2016-01-04     8.0
    2016-01-05     9.0
    2016-01-06    10.0
    2016-01-07     NaN
    2016-01-08     NaN
    2016-01-09    13.0
    2016-01-10    14.0
    Freq: D, dtype: float64



Intelligent aggregation over datetime ranges
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. code:: python

    z.resample('W').sum()




.. parsed-literal::

    2016-01-03    18.0
    2016-01-10    54.0
    Freq: W-SUN, dtype: float64



Formatting datetime objects (see http://strftime.org)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. code:: python

    z.index.strftime('%b %d, %Y')




.. parsed-literal::

    array(['Jan 01, 2016', 'Jan 02, 2016', 'Jan 03, 2016', 'Jan 04, 2016',
           'Jan 05, 2016', 'Jan 06, 2016', 'Jan 07, 2016', 'Jan 08, 2016',
           'Jan 09, 2016', 'Jan 10, 2016'], 
          dtype='<U12')



DataFrame
---------

Similar to R.

Titanic data
~~~~~~~~~~~~

.. code:: python

    url = 'https://raw.githubusercontent.com/mwaskom/seaborn-data/master/titanic.csv'
    titanic = pd.read_csv(url)

.. code:: python

    titanic.shape




.. parsed-literal::

    (891, 15)



.. code:: python

    titanic.columns




.. parsed-literal::

    Index(['survived', 'pclass', 'sex', 'age', 'sibsp', 'parch', 'fare',
           'embarked', 'class', 'who', 'adult_male', 'deck', 'embark_town',
           'alive', 'alone'],
          dtype='object')



.. code:: python

    # For display purposes, we will drop some columns
    titanic = titanic[['survived', 'sex', 'age', 'fare',
                       'embarked', 'class', 'who', 'deck', 'embark_town',]]

.. code:: python

    titanic.dtypes




.. parsed-literal::

    survived         int64
    sex             object
    age            float64
    fare           float64
    embarked        object
    class           object
    who             object
    deck            object
    embark_town     object
    dtype: object



Summarizing a data frame
~~~~~~~~~~~~~~~~~~~~~~~~

.. code:: python

    titanic.ix[0]




.. parsed-literal::

    survived                 0
    sex                   male
    age                     22
    fare                  7.25
    embarked                 S
    class                Third
    who                    man
    deck                   NaN
    embark_town    Southampton
    Name: 0, dtype: object



.. code:: python

    titanic.describe()




.. raw:: html

    <div>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th></th>
          <th>survived</th>
          <th>age</th>
          <th>fare</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>count</th>
          <td>891.000000</td>
          <td>714.000000</td>
          <td>891.000000</td>
        </tr>
        <tr>
          <th>mean</th>
          <td>0.383838</td>
          <td>29.699118</td>
          <td>32.204208</td>
        </tr>
        <tr>
          <th>std</th>
          <td>0.486592</td>
          <td>14.526497</td>
          <td>49.693429</td>
        </tr>
        <tr>
          <th>min</th>
          <td>0.000000</td>
          <td>0.420000</td>
          <td>0.000000</td>
        </tr>
        <tr>
          <th>25%</th>
          <td>0.000000</td>
          <td>20.125000</td>
          <td>7.910400</td>
        </tr>
        <tr>
          <th>50%</th>
          <td>0.000000</td>
          <td>28.000000</td>
          <td>14.454200</td>
        </tr>
        <tr>
          <th>75%</th>
          <td>1.000000</td>
          <td>38.000000</td>
          <td>31.000000</td>
        </tr>
        <tr>
          <th>max</th>
          <td>1.000000</td>
          <td>80.000000</td>
          <td>512.329200</td>
        </tr>
      </tbody>
    </table>
    </div>



.. code:: python

    titanic.head()




.. raw:: html

    <div>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th></th>
          <th>survived</th>
          <th>sex</th>
          <th>age</th>
          <th>fare</th>
          <th>embarked</th>
          <th>class</th>
          <th>who</th>
          <th>deck</th>
          <th>embark_town</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>0</th>
          <td>0</td>
          <td>male</td>
          <td>22.0</td>
          <td>7.2500</td>
          <td>S</td>
          <td>Third</td>
          <td>man</td>
          <td>NaN</td>
          <td>Southampton</td>
        </tr>
        <tr>
          <th>1</th>
          <td>1</td>
          <td>female</td>
          <td>38.0</td>
          <td>71.2833</td>
          <td>C</td>
          <td>First</td>
          <td>woman</td>
          <td>C</td>
          <td>Cherbourg</td>
        </tr>
        <tr>
          <th>2</th>
          <td>1</td>
          <td>female</td>
          <td>26.0</td>
          <td>7.9250</td>
          <td>S</td>
          <td>Third</td>
          <td>woman</td>
          <td>NaN</td>
          <td>Southampton</td>
        </tr>
        <tr>
          <th>3</th>
          <td>1</td>
          <td>female</td>
          <td>35.0</td>
          <td>53.1000</td>
          <td>S</td>
          <td>First</td>
          <td>woman</td>
          <td>C</td>
          <td>Southampton</td>
        </tr>
        <tr>
          <th>4</th>
          <td>0</td>
          <td>male</td>
          <td>35.0</td>
          <td>8.0500</td>
          <td>S</td>
          <td>Third</td>
          <td>man</td>
          <td>NaN</td>
          <td>Southampton</td>
        </tr>
      </tbody>
    </table>
    </div>



.. code:: python

    titanic.tail()




.. raw:: html

    <div>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th></th>
          <th>survived</th>
          <th>sex</th>
          <th>age</th>
          <th>fare</th>
          <th>embarked</th>
          <th>class</th>
          <th>who</th>
          <th>deck</th>
          <th>embark_town</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>886</th>
          <td>0</td>
          <td>male</td>
          <td>27.0</td>
          <td>13.00</td>
          <td>S</td>
          <td>Second</td>
          <td>man</td>
          <td>NaN</td>
          <td>Southampton</td>
        </tr>
        <tr>
          <th>887</th>
          <td>1</td>
          <td>female</td>
          <td>19.0</td>
          <td>30.00</td>
          <td>S</td>
          <td>First</td>
          <td>woman</td>
          <td>B</td>
          <td>Southampton</td>
        </tr>
        <tr>
          <th>888</th>
          <td>0</td>
          <td>female</td>
          <td>NaN</td>
          <td>23.45</td>
          <td>S</td>
          <td>Third</td>
          <td>woman</td>
          <td>NaN</td>
          <td>Southampton</td>
        </tr>
        <tr>
          <th>889</th>
          <td>1</td>
          <td>male</td>
          <td>26.0</td>
          <td>30.00</td>
          <td>C</td>
          <td>First</td>
          <td>man</td>
          <td>C</td>
          <td>Cherbourg</td>
        </tr>
        <tr>
          <th>890</th>
          <td>0</td>
          <td>male</td>
          <td>32.0</td>
          <td>7.75</td>
          <td>Q</td>
          <td>Third</td>
          <td>man</td>
          <td>NaN</td>
          <td>Queenstown</td>
        </tr>
      </tbody>
    </table>
    </div>



.. code:: python

    titanic.columns




.. parsed-literal::

    Index(['survived', 'sex', 'age', 'fare', 'embarked', 'class', 'who', 'deck',
           'embark_town'],
          dtype='object')



.. code:: python

    titanic.index




.. parsed-literal::

    RangeIndex(start=0, stop=891, step=1)



Indexing
~~~~~~~~

.. code:: python

    titanic[['sex', 'age', 'class']].head()




.. raw:: html

    <div>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th></th>
          <th>sex</th>
          <th>age</th>
          <th>class</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>0</th>
          <td>male</td>
          <td>22.0</td>
          <td>Third</td>
        </tr>
        <tr>
          <th>1</th>
          <td>female</td>
          <td>38.0</td>
          <td>First</td>
        </tr>
        <tr>
          <th>2</th>
          <td>female</td>
          <td>26.0</td>
          <td>Third</td>
        </tr>
        <tr>
          <th>3</th>
          <td>female</td>
          <td>35.0</td>
          <td>First</td>
        </tr>
        <tr>
          <th>4</th>
          <td>male</td>
          <td>35.0</td>
          <td>Third</td>
        </tr>
      </tbody>
    </table>
    </div>



.. code:: python

    titanic[10:15]




.. raw:: html

    <div>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th></th>
          <th>survived</th>
          <th>sex</th>
          <th>age</th>
          <th>fare</th>
          <th>embarked</th>
          <th>class</th>
          <th>who</th>
          <th>deck</th>
          <th>embark_town</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>10</th>
          <td>1</td>
          <td>female</td>
          <td>4.0</td>
          <td>16.7000</td>
          <td>S</td>
          <td>Third</td>
          <td>child</td>
          <td>G</td>
          <td>Southampton</td>
        </tr>
        <tr>
          <th>11</th>
          <td>1</td>
          <td>female</td>
          <td>58.0</td>
          <td>26.5500</td>
          <td>S</td>
          <td>First</td>
          <td>woman</td>
          <td>C</td>
          <td>Southampton</td>
        </tr>
        <tr>
          <th>12</th>
          <td>0</td>
          <td>male</td>
          <td>20.0</td>
          <td>8.0500</td>
          <td>S</td>
          <td>Third</td>
          <td>man</td>
          <td>NaN</td>
          <td>Southampton</td>
        </tr>
        <tr>
          <th>13</th>
          <td>0</td>
          <td>male</td>
          <td>39.0</td>
          <td>31.2750</td>
          <td>S</td>
          <td>Third</td>
          <td>man</td>
          <td>NaN</td>
          <td>Southampton</td>
        </tr>
        <tr>
          <th>14</th>
          <td>0</td>
          <td>female</td>
          <td>14.0</td>
          <td>7.8542</td>
          <td>S</td>
          <td>Third</td>
          <td>child</td>
          <td>NaN</td>
          <td>Southampton</td>
        </tr>
      </tbody>
    </table>
    </div>



Using the ``ix`` helper for indexing
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. code:: python

    titanic.ix[10:15, 'age':'fare']




.. raw:: html

    <div>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th></th>
          <th>age</th>
          <th>fare</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>10</th>
          <td>4.0</td>
          <td>16.7000</td>
        </tr>
        <tr>
          <th>11</th>
          <td>58.0</td>
          <td>26.5500</td>
        </tr>
        <tr>
          <th>12</th>
          <td>20.0</td>
          <td>8.0500</td>
        </tr>
        <tr>
          <th>13</th>
          <td>39.0</td>
          <td>31.2750</td>
        </tr>
        <tr>
          <th>14</th>
          <td>14.0</td>
          <td>7.8542</td>
        </tr>
        <tr>
          <th>15</th>
          <td>55.0</td>
          <td>16.0000</td>
        </tr>
      </tbody>
    </table>
    </div>



.. code:: python

    titanic.ix[10:15, [1,3,5]]




.. raw:: html

    <div>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th></th>
          <th>sex</th>
          <th>fare</th>
          <th>class</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>10</th>
          <td>female</td>
          <td>16.7000</td>
          <td>Third</td>
        </tr>
        <tr>
          <th>11</th>
          <td>female</td>
          <td>26.5500</td>
          <td>First</td>
        </tr>
        <tr>
          <th>12</th>
          <td>male</td>
          <td>8.0500</td>
          <td>Third</td>
        </tr>
        <tr>
          <th>13</th>
          <td>male</td>
          <td>31.2750</td>
          <td>Third</td>
        </tr>
        <tr>
          <th>14</th>
          <td>female</td>
          <td>7.8542</td>
          <td>Third</td>
        </tr>
        <tr>
          <th>15</th>
          <td>female</td>
          <td>16.0000</td>
          <td>Second</td>
        </tr>
      </tbody>
    </table>
    </div>



.. code:: python

    titanic[titanic.age < 2]




.. raw:: html

    <div>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th></th>
          <th>survived</th>
          <th>sex</th>
          <th>age</th>
          <th>fare</th>
          <th>embarked</th>
          <th>class</th>
          <th>who</th>
          <th>deck</th>
          <th>embark_town</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>78</th>
          <td>1</td>
          <td>male</td>
          <td>0.83</td>
          <td>29.0000</td>
          <td>S</td>
          <td>Second</td>
          <td>child</td>
          <td>NaN</td>
          <td>Southampton</td>
        </tr>
        <tr>
          <th>164</th>
          <td>0</td>
          <td>male</td>
          <td>1.00</td>
          <td>39.6875</td>
          <td>S</td>
          <td>Third</td>
          <td>child</td>
          <td>NaN</td>
          <td>Southampton</td>
        </tr>
        <tr>
          <th>172</th>
          <td>1</td>
          <td>female</td>
          <td>1.00</td>
          <td>11.1333</td>
          <td>S</td>
          <td>Third</td>
          <td>child</td>
          <td>NaN</td>
          <td>Southampton</td>
        </tr>
        <tr>
          <th>183</th>
          <td>1</td>
          <td>male</td>
          <td>1.00</td>
          <td>39.0000</td>
          <td>S</td>
          <td>Second</td>
          <td>child</td>
          <td>F</td>
          <td>Southampton</td>
        </tr>
        <tr>
          <th>305</th>
          <td>1</td>
          <td>male</td>
          <td>0.92</td>
          <td>151.5500</td>
          <td>S</td>
          <td>First</td>
          <td>child</td>
          <td>C</td>
          <td>Southampton</td>
        </tr>
        <tr>
          <th>381</th>
          <td>1</td>
          <td>female</td>
          <td>1.00</td>
          <td>15.7417</td>
          <td>C</td>
          <td>Third</td>
          <td>child</td>
          <td>NaN</td>
          <td>Cherbourg</td>
        </tr>
        <tr>
          <th>386</th>
          <td>0</td>
          <td>male</td>
          <td>1.00</td>
          <td>46.9000</td>
          <td>S</td>
          <td>Third</td>
          <td>child</td>
          <td>NaN</td>
          <td>Southampton</td>
        </tr>
        <tr>
          <th>469</th>
          <td>1</td>
          <td>female</td>
          <td>0.75</td>
          <td>19.2583</td>
          <td>C</td>
          <td>Third</td>
          <td>child</td>
          <td>NaN</td>
          <td>Cherbourg</td>
        </tr>
        <tr>
          <th>644</th>
          <td>1</td>
          <td>female</td>
          <td>0.75</td>
          <td>19.2583</td>
          <td>C</td>
          <td>Third</td>
          <td>child</td>
          <td>NaN</td>
          <td>Cherbourg</td>
        </tr>
        <tr>
          <th>755</th>
          <td>1</td>
          <td>male</td>
          <td>0.67</td>
          <td>14.5000</td>
          <td>S</td>
          <td>Second</td>
          <td>child</td>
          <td>NaN</td>
          <td>Southampton</td>
        </tr>
        <tr>
          <th>788</th>
          <td>1</td>
          <td>male</td>
          <td>1.00</td>
          <td>20.5750</td>
          <td>S</td>
          <td>Third</td>
          <td>child</td>
          <td>NaN</td>
          <td>Southampton</td>
        </tr>
        <tr>
          <th>803</th>
          <td>1</td>
          <td>male</td>
          <td>0.42</td>
          <td>8.5167</td>
          <td>C</td>
          <td>Third</td>
          <td>child</td>
          <td>NaN</td>
          <td>Cherbourg</td>
        </tr>
        <tr>
          <th>827</th>
          <td>1</td>
          <td>male</td>
          <td>1.00</td>
          <td>37.0042</td>
          <td>C</td>
          <td>Second</td>
          <td>child</td>
          <td>NaN</td>
          <td>Cherbourg</td>
        </tr>
        <tr>
          <th>831</th>
          <td>1</td>
          <td>male</td>
          <td>0.83</td>
          <td>18.7500</td>
          <td>S</td>
          <td>Second</td>
          <td>child</td>
          <td>NaN</td>
          <td>Southampton</td>
        </tr>
      </tbody>
    </table>
    </div>



Sorting and ordering data
^^^^^^^^^^^^^^^^^^^^^^^^^

.. code:: python

    titanic.sort_index().head()




.. raw:: html

    <div>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th></th>
          <th>survived</th>
          <th>sex</th>
          <th>age</th>
          <th>fare</th>
          <th>embarked</th>
          <th>class</th>
          <th>who</th>
          <th>deck</th>
          <th>embark_town</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>0</th>
          <td>0</td>
          <td>male</td>
          <td>22.0</td>
          <td>7.2500</td>
          <td>S</td>
          <td>Third</td>
          <td>man</td>
          <td>NaN</td>
          <td>Southampton</td>
        </tr>
        <tr>
          <th>1</th>
          <td>1</td>
          <td>female</td>
          <td>38.0</td>
          <td>71.2833</td>
          <td>C</td>
          <td>First</td>
          <td>woman</td>
          <td>C</td>
          <td>Cherbourg</td>
        </tr>
        <tr>
          <th>2</th>
          <td>1</td>
          <td>female</td>
          <td>26.0</td>
          <td>7.9250</td>
          <td>S</td>
          <td>Third</td>
          <td>woman</td>
          <td>NaN</td>
          <td>Southampton</td>
        </tr>
        <tr>
          <th>3</th>
          <td>1</td>
          <td>female</td>
          <td>35.0</td>
          <td>53.1000</td>
          <td>S</td>
          <td>First</td>
          <td>woman</td>
          <td>C</td>
          <td>Southampton</td>
        </tr>
        <tr>
          <th>4</th>
          <td>0</td>
          <td>male</td>
          <td>35.0</td>
          <td>8.0500</td>
          <td>S</td>
          <td>Third</td>
          <td>man</td>
          <td>NaN</td>
          <td>Southampton</td>
        </tr>
      </tbody>
    </table>
    </div>



.. code:: python

    titanic.sort_values('age', ascending=True).head()




.. raw:: html

    <div>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th></th>
          <th>survived</th>
          <th>sex</th>
          <th>age</th>
          <th>fare</th>
          <th>embarked</th>
          <th>class</th>
          <th>who</th>
          <th>deck</th>
          <th>embark_town</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>803</th>
          <td>1</td>
          <td>male</td>
          <td>0.42</td>
          <td>8.5167</td>
          <td>C</td>
          <td>Third</td>
          <td>child</td>
          <td>NaN</td>
          <td>Cherbourg</td>
        </tr>
        <tr>
          <th>755</th>
          <td>1</td>
          <td>male</td>
          <td>0.67</td>
          <td>14.5000</td>
          <td>S</td>
          <td>Second</td>
          <td>child</td>
          <td>NaN</td>
          <td>Southampton</td>
        </tr>
        <tr>
          <th>644</th>
          <td>1</td>
          <td>female</td>
          <td>0.75</td>
          <td>19.2583</td>
          <td>C</td>
          <td>Third</td>
          <td>child</td>
          <td>NaN</td>
          <td>Cherbourg</td>
        </tr>
        <tr>
          <th>469</th>
          <td>1</td>
          <td>female</td>
          <td>0.75</td>
          <td>19.2583</td>
          <td>C</td>
          <td>Third</td>
          <td>child</td>
          <td>NaN</td>
          <td>Cherbourg</td>
        </tr>
        <tr>
          <th>78</th>
          <td>1</td>
          <td>male</td>
          <td>0.83</td>
          <td>29.0000</td>
          <td>S</td>
          <td>Second</td>
          <td>child</td>
          <td>NaN</td>
          <td>Southampton</td>
        </tr>
      </tbody>
    </table>
    </div>



.. code:: python

    titanic.sort_values(['survived', 'age'], ascending=[True, True]).head()




.. raw:: html

    <div>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th></th>
          <th>survived</th>
          <th>sex</th>
          <th>age</th>
          <th>fare</th>
          <th>embarked</th>
          <th>class</th>
          <th>who</th>
          <th>deck</th>
          <th>embark_town</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>164</th>
          <td>0</td>
          <td>male</td>
          <td>1.0</td>
          <td>39.6875</td>
          <td>S</td>
          <td>Third</td>
          <td>child</td>
          <td>NaN</td>
          <td>Southampton</td>
        </tr>
        <tr>
          <th>386</th>
          <td>0</td>
          <td>male</td>
          <td>1.0</td>
          <td>46.9000</td>
          <td>S</td>
          <td>Third</td>
          <td>child</td>
          <td>NaN</td>
          <td>Southampton</td>
        </tr>
        <tr>
          <th>7</th>
          <td>0</td>
          <td>male</td>
          <td>2.0</td>
          <td>21.0750</td>
          <td>S</td>
          <td>Third</td>
          <td>child</td>
          <td>NaN</td>
          <td>Southampton</td>
        </tr>
        <tr>
          <th>16</th>
          <td>0</td>
          <td>male</td>
          <td>2.0</td>
          <td>29.1250</td>
          <td>Q</td>
          <td>Third</td>
          <td>child</td>
          <td>NaN</td>
          <td>Queenstown</td>
        </tr>
        <tr>
          <th>119</th>
          <td>0</td>
          <td>female</td>
          <td>2.0</td>
          <td>31.2750</td>
          <td>S</td>
          <td>Third</td>
          <td>child</td>
          <td>NaN</td>
          <td>Southampton</td>
        </tr>
      </tbody>
    </table>
    </div>



Grouping data
^^^^^^^^^^^^^

.. code:: python

    sex_class = titanic.groupby(['sex', 'class'])

.. code:: python

    sex_class.count()




.. raw:: html

    <div>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th></th>
          <th></th>
          <th>survived</th>
          <th>age</th>
          <th>fare</th>
          <th>embarked</th>
          <th>who</th>
          <th>deck</th>
          <th>embark_town</th>
        </tr>
        <tr>
          <th>sex</th>
          <th>class</th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th rowspan="3" valign="top">female</th>
          <th>First</th>
          <td>94</td>
          <td>85</td>
          <td>94</td>
          <td>92</td>
          <td>94</td>
          <td>81</td>
          <td>92</td>
        </tr>
        <tr>
          <th>Second</th>
          <td>76</td>
          <td>74</td>
          <td>76</td>
          <td>76</td>
          <td>76</td>
          <td>10</td>
          <td>76</td>
        </tr>
        <tr>
          <th>Third</th>
          <td>144</td>
          <td>102</td>
          <td>144</td>
          <td>144</td>
          <td>144</td>
          <td>6</td>
          <td>144</td>
        </tr>
        <tr>
          <th rowspan="3" valign="top">male</th>
          <th>First</th>
          <td>122</td>
          <td>101</td>
          <td>122</td>
          <td>122</td>
          <td>122</td>
          <td>94</td>
          <td>122</td>
        </tr>
        <tr>
          <th>Second</th>
          <td>108</td>
          <td>99</td>
          <td>108</td>
          <td>108</td>
          <td>108</td>
          <td>6</td>
          <td>108</td>
        </tr>
        <tr>
          <th>Third</th>
          <td>347</td>
          <td>253</td>
          <td>347</td>
          <td>347</td>
          <td>347</td>
          <td>6</td>
          <td>347</td>
        </tr>
      </tbody>
    </table>
    </div>



Why Kate Winslett survived and Leonardo DiCaprio didn't
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. code:: python

    df = sex_class.mean()
    df['survived']




.. parsed-literal::

    sex     class 
    female  First     0.968085
            Second    0.921053
            Third     0.500000
    male    First     0.368852
            Second    0.157407
            Third     0.135447
    Name: survived, dtype: float64



Of the females who were in first class, count the number from each embarking town
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. code:: python

    sex_class.get_group(('female', 'First')).groupby('embark_town').count()




.. raw:: html

    <div>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th></th>
          <th>survived</th>
          <th>sex</th>
          <th>age</th>
          <th>fare</th>
          <th>embarked</th>
          <th>class</th>
          <th>who</th>
          <th>deck</th>
        </tr>
        <tr>
          <th>embark_town</th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>Cherbourg</th>
          <td>43</td>
          <td>43</td>
          <td>38</td>
          <td>43</td>
          <td>43</td>
          <td>43</td>
          <td>43</td>
          <td>35</td>
        </tr>
        <tr>
          <th>Queenstown</th>
          <td>1</td>
          <td>1</td>
          <td>1</td>
          <td>1</td>
          <td>1</td>
          <td>1</td>
          <td>1</td>
          <td>1</td>
        </tr>
        <tr>
          <th>Southampton</th>
          <td>48</td>
          <td>48</td>
          <td>44</td>
          <td>48</td>
          <td>48</td>
          <td>48</td>
          <td>48</td>
          <td>43</td>
        </tr>
      </tbody>
    </table>
    </div>



Cross-tabulation
^^^^^^^^^^^^^^^^

.. code:: python

    pd.crosstab(titanic.survived, titanic['class'])




.. raw:: html

    <div>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th>class</th>
          <th>First</th>
          <th>Second</th>
          <th>Third</th>
        </tr>
        <tr>
          <th>survived</th>
          <th></th>
          <th></th>
          <th></th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>0</th>
          <td>80</td>
          <td>97</td>
          <td>372</td>
        </tr>
        <tr>
          <th>1</th>
          <td>136</td>
          <td>87</td>
          <td>119</td>
        </tr>
      </tbody>
    </table>
    </div>



We can also get multiple summaries at the same time
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. code:: python

    def my_func(x):
        return np.max(x)

.. code:: python

    mapped_funcs = {'embarked': 'count', 'age': ('mean', 'median', my_func), 'survived': sum}
    sex_class.get_group(('female', 'First')).groupby('embark_town').agg(mapped_funcs)




.. raw:: html

    <div>
    <table border="1" class="dataframe">
      <thead>
        <tr>
          <th></th>
          <th>survived</th>
          <th>embarked</th>
          <th colspan="3" halign="left">age</th>
        </tr>
        <tr>
          <th></th>
          <th>sum</th>
          <th>count</th>
          <th>mean</th>
          <th>median</th>
          <th>my_func</th>
        </tr>
        <tr>
          <th>embark_town</th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>Cherbourg</th>
          <td>42</td>
          <td>43</td>
          <td>36.052632</td>
          <td>37.0</td>
          <td>60.0</td>
        </tr>
        <tr>
          <th>Queenstown</th>
          <td>1</td>
          <td>1</td>
          <td>33.000000</td>
          <td>33.0</td>
          <td>33.0</td>
        </tr>
        <tr>
          <th>Southampton</th>
          <td>46</td>
          <td>48</td>
          <td>32.704545</td>
          <td>33.0</td>
          <td>63.0</td>
        </tr>
      </tbody>
    </table>
    </div>



.. code:: python

    titanic.columns




.. parsed-literal::

    Index(['survived', 'sex', 'age', 'fare', 'embarked', 'class', 'who', 'deck',
           'embark_town'],
          dtype='object')



Visualizing tables
^^^^^^^^^^^^^^^^^^

See more examples in the Graphics notebook.

.. code:: python

    import seaborn as sns
    sns.set_context(font_scale=4)
    sns.factorplot(x='sex', y='age', hue='survived', col='class', kind='box', data=titanic)
    pass



.. image:: 07_Data_files/07_Data_84_0.png


Making plots with ``pandas``
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code:: python

    from pandas_datareader import data as web
    import datetime

.. code:: python

    apple = web.DataReader('AAPL', 'google', 
                            start = datetime.datetime(2015, 1, 1),
                            end = datetime.datetime(2015, 12, 31))

.. code:: python

    apple.head()




.. raw:: html

    <div>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th></th>
          <th>Open</th>
          <th>High</th>
          <th>Low</th>
          <th>Close</th>
          <th>Volume</th>
        </tr>
        <tr>
          <th>Date</th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>2015-01-02</th>
          <td>111.39</td>
          <td>111.44</td>
          <td>107.35</td>
          <td>109.33</td>
          <td>53204626</td>
        </tr>
        <tr>
          <th>2015-01-05</th>
          <td>108.29</td>
          <td>108.65</td>
          <td>105.41</td>
          <td>106.25</td>
          <td>64285491</td>
        </tr>
        <tr>
          <th>2015-01-06</th>
          <td>106.54</td>
          <td>107.43</td>
          <td>104.63</td>
          <td>106.26</td>
          <td>65797116</td>
        </tr>
        <tr>
          <th>2015-01-07</th>
          <td>107.20</td>
          <td>108.20</td>
          <td>106.70</td>
          <td>107.75</td>
          <td>40105934</td>
        </tr>
        <tr>
          <th>2015-01-08</th>
          <td>109.23</td>
          <td>112.15</td>
          <td>108.70</td>
          <td>111.89</td>
          <td>59364547</td>
        </tr>
      </tbody>
    </table>
    </div>



.. code:: python

    apple.plot.line(y='Close', marker='o', markersize=3, linewidth=0.5)
    pass



.. image:: 07_Data_files/07_Data_89_0.png


.. code:: python

    # Zoom in on large drop in August
    aug = apple['2015-08-01':'2015-08-30']
    aug.plot.line(y=['High', 'Low', 'Open', 'Close'], marker='o', markersize=10, linewidth=1)
    pass



.. image:: 07_Data_files/07_Data_90_0.png


Data conversions
----------------

One of the nicest features of ``pandas`` is the ease of converting
tabular data across different storage formats. We will illustrate by
converting the ``titanic`` dataframe into multiple formats.

.. code:: python

    titanic.head(2)




.. raw:: html

    <div>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th></th>
          <th>survived</th>
          <th>sex</th>
          <th>age</th>
          <th>fare</th>
          <th>embarked</th>
          <th>class</th>
          <th>who</th>
          <th>deck</th>
          <th>embark_town</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>0</th>
          <td>0</td>
          <td>male</td>
          <td>22.0</td>
          <td>7.2500</td>
          <td>S</td>
          <td>Third</td>
          <td>man</td>
          <td>NaN</td>
          <td>Southampton</td>
        </tr>
        <tr>
          <th>1</th>
          <td>1</td>
          <td>female</td>
          <td>38.0</td>
          <td>71.2833</td>
          <td>C</td>
          <td>First</td>
          <td>woman</td>
          <td>C</td>
          <td>Cherbourg</td>
        </tr>
      </tbody>
    </table>
    </div>



CSV
^^^

.. code:: python

    titanic.to_csv('titanic.csv', index=False)

.. code:: python

    t1 = pd.read_csv('titanic.csv')
    t1.head(2)




.. raw:: html

    <div>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th></th>
          <th>survived</th>
          <th>sex</th>
          <th>age</th>
          <th>fare</th>
          <th>embarked</th>
          <th>class</th>
          <th>who</th>
          <th>deck</th>
          <th>embark_town</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>0</th>
          <td>0</td>
          <td>male</td>
          <td>22.0</td>
          <td>7.2500</td>
          <td>S</td>
          <td>Third</td>
          <td>man</td>
          <td>NaN</td>
          <td>Southampton</td>
        </tr>
        <tr>
          <th>1</th>
          <td>1</td>
          <td>female</td>
          <td>38.0</td>
          <td>71.2833</td>
          <td>C</td>
          <td>First</td>
          <td>woman</td>
          <td>C</td>
          <td>Cherbourg</td>
        </tr>
      </tbody>
    </table>
    </div>



Excel
^^^^^

.. code:: python

    !pip install openpyxl
    t1.to_excel('titanic.xlsx')


.. parsed-literal::

    Requirement already satisfied: openpyxl in /Users/cliburn/anaconda2/lib/python2.7/site-packages
    Requirement already satisfied: jdcal in /Users/cliburn/anaconda2/lib/python2.7/site-packages (from openpyxl)
    Requirement already satisfied: et_xmlfile in /Users/cliburn/anaconda2/lib/python2.7/site-packages (from openpyxl)


.. code:: python

    t2 = pd.read_excel('titanic.xlsx')
    t2.head(2)




.. raw:: html

    <div>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th></th>
          <th>survived</th>
          <th>sex</th>
          <th>age</th>
          <th>fare</th>
          <th>embarked</th>
          <th>class</th>
          <th>who</th>
          <th>deck</th>
          <th>embark_town</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>0</th>
          <td>0</td>
          <td>male</td>
          <td>22.0</td>
          <td>7.2500</td>
          <td>S</td>
          <td>Third</td>
          <td>man</td>
          <td>NaN</td>
          <td>Southampton</td>
        </tr>
        <tr>
          <th>1</th>
          <td>1</td>
          <td>female</td>
          <td>38.0</td>
          <td>71.2833</td>
          <td>C</td>
          <td>First</td>
          <td>woman</td>
          <td>C</td>
          <td>Cherbourg</td>
        </tr>
      </tbody>
    </table>
    </div>



Relational Database
^^^^^^^^^^^^^^^^^^^

.. code:: python

    import sqlite3
    
    con = sqlite3.connect('titanic.db')
    t2.to_sql('titanic', con, index=False, if_exists='replace')

.. code:: python

    t3 = pd.read_sql('select * from titanic', con)
    t3.head(2)




.. raw:: html

    <div>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th></th>
          <th>survived</th>
          <th>sex</th>
          <th>age</th>
          <th>fare</th>
          <th>embarked</th>
          <th>class</th>
          <th>who</th>
          <th>deck</th>
          <th>embark_town</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>0</th>
          <td>0</td>
          <td>male</td>
          <td>22.0</td>
          <td>7.2500</td>
          <td>S</td>
          <td>Third</td>
          <td>man</td>
          <td>None</td>
          <td>Southampton</td>
        </tr>
        <tr>
          <th>1</th>
          <td>1</td>
          <td>female</td>
          <td>38.0</td>
          <td>71.2833</td>
          <td>C</td>
          <td>First</td>
          <td>woman</td>
          <td>C</td>
          <td>Cherbourg</td>
        </tr>
      </tbody>
    </table>
    </div>



JSON
^^^^

.. code:: python

    t3.to_json('titanic.json')

.. code:: python

    t4 = pd.read_json('titanic.json')
    t4.head(2)




.. raw:: html

    <div>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th></th>
          <th>age</th>
          <th>class</th>
          <th>deck</th>
          <th>embark_town</th>
          <th>embarked</th>
          <th>fare</th>
          <th>sex</th>
          <th>survived</th>
          <th>who</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>0</th>
          <td>22.0</td>
          <td>Third</td>
          <td>None</td>
          <td>Southampton</td>
          <td>S</td>
          <td>7.2500</td>
          <td>male</td>
          <td>0</td>
          <td>man</td>
        </tr>
        <tr>
          <th>1</th>
          <td>38.0</td>
          <td>First</td>
          <td>C</td>
          <td>Cherbourg</td>
          <td>C</td>
          <td>71.2833</td>
          <td>female</td>
          <td>1</td>
          <td>woman</td>
        </tr>
      </tbody>
    </table>
    </div>



.. code:: python

    t4 = t4[t3.columns]
    t4.head(2)




.. raw:: html

    <div>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th></th>
          <th>survived</th>
          <th>sex</th>
          <th>age</th>
          <th>fare</th>
          <th>embarked</th>
          <th>class</th>
          <th>who</th>
          <th>deck</th>
          <th>embark_town</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>0</th>
          <td>0</td>
          <td>male</td>
          <td>22.0</td>
          <td>7.2500</td>
          <td>S</td>
          <td>Third</td>
          <td>man</td>
          <td>None</td>
          <td>Southampton</td>
        </tr>
        <tr>
          <th>1</th>
          <td>1</td>
          <td>female</td>
          <td>38.0</td>
          <td>71.2833</td>
          <td>C</td>
          <td>First</td>
          <td>woman</td>
          <td>C</td>
          <td>Cherbourg</td>
        </tr>
      </tbody>
    </table>
    </div>


