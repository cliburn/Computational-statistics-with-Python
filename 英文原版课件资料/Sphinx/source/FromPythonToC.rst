
.. code:: python

    from __future__ import division
    import os
    import sys
    import glob
    import matplotlib.pyplot as plt
    import numpy as np
    import pandas as pd
    %matplotlib inline
    %precision 4
    plt.style.use('ggplot')


.. code:: python

    from numba import jit, int32, int64, float32, float64 

.. code:: python

    %load_ext cythonmagic

Converting Python Code to C for speed
=====================================

Example: Fibonacci
------------------

.. code:: python

    def py_fib(n):
        a, b = 0, 1
        for i in range(n):
            a, b = a+b, a
        return a

.. code:: python

    @jit(float64(int64), nopython=True, locals={'a': float64})
    def numba_fib(n):
        a = 0
        b = 1
        for i in range(n):
            tmp = a
            a = a + b
            b = tmp
        return a

.. code:: python

    %%cython -a
    def cy_fib(n):
        a = 0
        b = 1
        for i in range(n):
            a, b = a+b, a
        return a




.. raw:: html

    <!DOCTYPE html>
    <!-- Generated by Cython 0.22 -->
    <html>
    <head>
        <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
        <style type="text/css">
        
    body.cython { font-family: courier; font-size: 12; }
    
    .cython.tag  {  }
    .cython.line { margin: 0em }
    .cython.code  { font-size: 9; color: #444444; display: none; margin: 0px 0px 0px 20px;  }
    
    .cython.code .py_c_api  { color: red; }
    .cython.code .py_macro_api  { color: #FF7000; }
    .cython.code .pyx_c_api  { color: #FF3000; }
    .cython.code .pyx_macro_api  { color: #FF7000; }
    .cython.code .refnanny  { color: #FFA000; }
    .cython.code .error_goto  { color: #FFA000; }
    
    .cython.code .coerce  { color: #008000; border: 1px dotted #008000 }
    .cython.code .py_attr { color: #FF0000; font-weight: bold; }
    .cython.code .c_attr  { color: #0000FF; }
    .cython.code .py_call { color: #FF0000; font-weight: bold; }
    .cython.code .c_call  { color: #0000FF; }
    
    .cython.score-0 {background-color: #FFFFff;}
    .cython.score-1 {background-color: #FFFFe7;}
    .cython.score-2 {background-color: #FFFFd4;}
    .cython.score-3 {background-color: #FFFFc4;}
    .cython.score-4 {background-color: #FFFFb6;}
    .cython.score-5 {background-color: #FFFFaa;}
    .cython.score-6 {background-color: #FFFF9f;}
    .cython.score-7 {background-color: #FFFF96;}
    .cython.score-8 {background-color: #FFFF8d;}
    .cython.score-9 {background-color: #FFFF86;}
    .cython.score-10 {background-color: #FFFF7f;}
    .cython.score-11 {background-color: #FFFF79;}
    .cython.score-12 {background-color: #FFFF73;}
    .cython.score-13 {background-color: #FFFF6e;}
    .cython.score-14 {background-color: #FFFF6a;}
    .cython.score-15 {background-color: #FFFF66;}
    .cython.score-16 {background-color: #FFFF62;}
    .cython.score-17 {background-color: #FFFF5e;}
    .cython.score-18 {background-color: #FFFF5b;}
    .cython.score-19 {background-color: #FFFF57;}
    .cython.score-20 {background-color: #FFFF55;}
    .cython.score-21 {background-color: #FFFF52;}
    .cython.score-22 {background-color: #FFFF4f;}
    .cython.score-23 {background-color: #FFFF4d;}
    .cython.score-24 {background-color: #FFFF4b;}
    .cython.score-25 {background-color: #FFFF48;}
    .cython.score-26 {background-color: #FFFF46;}
    .cython.score-27 {background-color: #FFFF44;}
    .cython.score-28 {background-color: #FFFF43;}
    .cython.score-29 {background-color: #FFFF41;}
    .cython.score-30 {background-color: #FFFF3f;}
    .cython.score-31 {background-color: #FFFF3e;}
    .cython.score-32 {background-color: #FFFF3c;}
    .cython.score-33 {background-color: #FFFF3b;}
    .cython.score-34 {background-color: #FFFF39;}
    .cython.score-35 {background-color: #FFFF38;}
    .cython.score-36 {background-color: #FFFF37;}
    .cython.score-37 {background-color: #FFFF36;}
    .cython.score-38 {background-color: #FFFF35;}
    .cython.score-39 {background-color: #FFFF34;}
    .cython.score-40 {background-color: #FFFF33;}
    .cython.score-41 {background-color: #FFFF32;}
    .cython.score-42 {background-color: #FFFF31;}
    .cython.score-43 {background-color: #FFFF30;}
    .cython.score-44 {background-color: #FFFF2f;}
    .cython.score-45 {background-color: #FFFF2e;}
    .cython.score-46 {background-color: #FFFF2d;}
    .cython.score-47 {background-color: #FFFF2c;}
    .cython.score-48 {background-color: #FFFF2b;}
    .cython.score-49 {background-color: #FFFF2b;}
    .cython.score-50 {background-color: #FFFF2a;}
    .cython.score-51 {background-color: #FFFF29;}
    .cython.score-52 {background-color: #FFFF29;}
    .cython.score-53 {background-color: #FFFF28;}
    .cython.score-54 {background-color: #FFFF27;}
    .cython.score-55 {background-color: #FFFF27;}
    .cython.score-56 {background-color: #FFFF26;}
    .cython.score-57 {background-color: #FFFF26;}
    .cython.score-58 {background-color: #FFFF25;}
    .cython.score-59 {background-color: #FFFF24;}
    .cython.score-60 {background-color: #FFFF24;}
    .cython.score-61 {background-color: #FFFF23;}
    .cython.score-62 {background-color: #FFFF23;}
    .cython.score-63 {background-color: #FFFF22;}
    .cython.score-64 {background-color: #FFFF22;}
    .cython.score-65 {background-color: #FFFF22;}
    .cython.score-66 {background-color: #FFFF21;}
    .cython.score-67 {background-color: #FFFF21;}
    .cython.score-68 {background-color: #FFFF20;}
    .cython.score-69 {background-color: #FFFF20;}
    .cython.score-70 {background-color: #FFFF1f;}
    .cython.score-71 {background-color: #FFFF1f;}
    .cython.score-72 {background-color: #FFFF1f;}
    .cython.score-73 {background-color: #FFFF1e;}
    .cython.score-74 {background-color: #FFFF1e;}
    .cython.score-75 {background-color: #FFFF1e;}
    .cython.score-76 {background-color: #FFFF1d;}
    .cython.score-77 {background-color: #FFFF1d;}
    .cython.score-78 {background-color: #FFFF1c;}
    .cython.score-79 {background-color: #FFFF1c;}
    .cython.score-80 {background-color: #FFFF1c;}
    .cython.score-81 {background-color: #FFFF1c;}
    .cython.score-82 {background-color: #FFFF1b;}
    .cython.score-83 {background-color: #FFFF1b;}
    .cython.score-84 {background-color: #FFFF1b;}
    .cython.score-85 {background-color: #FFFF1a;}
    .cython.score-86 {background-color: #FFFF1a;}
    .cython.score-87 {background-color: #FFFF1a;}
    .cython.score-88 {background-color: #FFFF1a;}
    .cython.score-89 {background-color: #FFFF19;}
    .cython.score-90 {background-color: #FFFF19;}
    .cython.score-91 {background-color: #FFFF19;}
    .cython.score-92 {background-color: #FFFF19;}
    .cython.score-93 {background-color: #FFFF18;}
    .cython.score-94 {background-color: #FFFF18;}
    .cython.score-95 {background-color: #FFFF18;}
    .cython.score-96 {background-color: #FFFF18;}
    .cython.score-97 {background-color: #FFFF17;}
    .cython.score-98 {background-color: #FFFF17;}
    .cython.score-99 {background-color: #FFFF17;}
    .cython.score-100 {background-color: #FFFF17;}
    .cython.score-101 {background-color: #FFFF16;}
    .cython.score-102 {background-color: #FFFF16;}
    .cython.score-103 {background-color: #FFFF16;}
    .cython.score-104 {background-color: #FFFF16;}
    .cython.score-105 {background-color: #FFFF16;}
    .cython.score-106 {background-color: #FFFF15;}
    .cython.score-107 {background-color: #FFFF15;}
    .cython.score-108 {background-color: #FFFF15;}
    .cython.score-109 {background-color: #FFFF15;}
    .cython.score-110 {background-color: #FFFF15;}
    .cython.score-111 {background-color: #FFFF15;}
    .cython.score-112 {background-color: #FFFF14;}
    .cython.score-113 {background-color: #FFFF14;}
    .cython.score-114 {background-color: #FFFF14;}
    .cython.score-115 {background-color: #FFFF14;}
    .cython.score-116 {background-color: #FFFF14;}
    .cython.score-117 {background-color: #FFFF14;}
    .cython.score-118 {background-color: #FFFF13;}
    .cython.score-119 {background-color: #FFFF13;}
    .cython.score-120 {background-color: #FFFF13;}
    .cython.score-121 {background-color: #FFFF13;}
    .cython.score-122 {background-color: #FFFF13;}
    .cython.score-123 {background-color: #FFFF13;}
    .cython.score-124 {background-color: #FFFF13;}
    .cython.score-125 {background-color: #FFFF12;}
    .cython.score-126 {background-color: #FFFF12;}
    .cython.score-127 {background-color: #FFFF12;}
    .cython.score-128 {background-color: #FFFF12;}
    .cython.score-129 {background-color: #FFFF12;}
    .cython.score-130 {background-color: #FFFF12;}
    .cython.score-131 {background-color: #FFFF12;}
    .cython.score-132 {background-color: #FFFF11;}
    .cython.score-133 {background-color: #FFFF11;}
    .cython.score-134 {background-color: #FFFF11;}
    .cython.score-135 {background-color: #FFFF11;}
    .cython.score-136 {background-color: #FFFF11;}
    .cython.score-137 {background-color: #FFFF11;}
    .cython.score-138 {background-color: #FFFF11;}
    .cython.score-139 {background-color: #FFFF11;}
    .cython.score-140 {background-color: #FFFF11;}
    .cython.score-141 {background-color: #FFFF10;}
    .cython.score-142 {background-color: #FFFF10;}
    .cython.score-143 {background-color: #FFFF10;}
    .cython.score-144 {background-color: #FFFF10;}
    .cython.score-145 {background-color: #FFFF10;}
    .cython.score-146 {background-color: #FFFF10;}
    .cython.score-147 {background-color: #FFFF10;}
    .cython.score-148 {background-color: #FFFF10;}
    .cython.score-149 {background-color: #FFFF10;}
    .cython.score-150 {background-color: #FFFF0f;}
    .cython.score-151 {background-color: #FFFF0f;}
    .cython.score-152 {background-color: #FFFF0f;}
    .cython.score-153 {background-color: #FFFF0f;}
    .cython.score-154 {background-color: #FFFF0f;}
    .cython.score-155 {background-color: #FFFF0f;}
    .cython.score-156 {background-color: #FFFF0f;}
    .cython.score-157 {background-color: #FFFF0f;}
    .cython.score-158 {background-color: #FFFF0f;}
    .cython.score-159 {background-color: #FFFF0f;}
    .cython.score-160 {background-color: #FFFF0f;}
    .cython.score-161 {background-color: #FFFF0e;}
    .cython.score-162 {background-color: #FFFF0e;}
    .cython.score-163 {background-color: #FFFF0e;}
    .cython.score-164 {background-color: #FFFF0e;}
    .cython.score-165 {background-color: #FFFF0e;}
    .cython.score-166 {background-color: #FFFF0e;}
    .cython.score-167 {background-color: #FFFF0e;}
    .cython.score-168 {background-color: #FFFF0e;}
    .cython.score-169 {background-color: #FFFF0e;}
    .cython.score-170 {background-color: #FFFF0e;}
    .cython.score-171 {background-color: #FFFF0e;}
    .cython.score-172 {background-color: #FFFF0e;}
    .cython.score-173 {background-color: #FFFF0d;}
    .cython.score-174 {background-color: #FFFF0d;}
    .cython.score-175 {background-color: #FFFF0d;}
    .cython.score-176 {background-color: #FFFF0d;}
    .cython.score-177 {background-color: #FFFF0d;}
    .cython.score-178 {background-color: #FFFF0d;}
    .cython.score-179 {background-color: #FFFF0d;}
    .cython.score-180 {background-color: #FFFF0d;}
    .cython.score-181 {background-color: #FFFF0d;}
    .cython.score-182 {background-color: #FFFF0d;}
    .cython.score-183 {background-color: #FFFF0d;}
    .cython.score-184 {background-color: #FFFF0d;}
    .cython.score-185 {background-color: #FFFF0d;}
    .cython.score-186 {background-color: #FFFF0d;}
    .cython.score-187 {background-color: #FFFF0c;}
    .cython.score-188 {background-color: #FFFF0c;}
    .cython.score-189 {background-color: #FFFF0c;}
    .cython.score-190 {background-color: #FFFF0c;}
    .cython.score-191 {background-color: #FFFF0c;}
    .cython.score-192 {background-color: #FFFF0c;}
    .cython.score-193 {background-color: #FFFF0c;}
    .cython.score-194 {background-color: #FFFF0c;}
    .cython.score-195 {background-color: #FFFF0c;}
    .cython.score-196 {background-color: #FFFF0c;}
    .cython.score-197 {background-color: #FFFF0c;}
    .cython.score-198 {background-color: #FFFF0c;}
    .cython.score-199 {background-color: #FFFF0c;}
    .cython.score-200 {background-color: #FFFF0c;}
    .cython.score-201 {background-color: #FFFF0c;}
    .cython.score-202 {background-color: #FFFF0c;}
    .cython.score-203 {background-color: #FFFF0b;}
    .cython.score-204 {background-color: #FFFF0b;}
    .cython.score-205 {background-color: #FFFF0b;}
    .cython.score-206 {background-color: #FFFF0b;}
    .cython.score-207 {background-color: #FFFF0b;}
    .cython.score-208 {background-color: #FFFF0b;}
    .cython.score-209 {background-color: #FFFF0b;}
    .cython.score-210 {background-color: #FFFF0b;}
    .cython.score-211 {background-color: #FFFF0b;}
    .cython.score-212 {background-color: #FFFF0b;}
    .cython.score-213 {background-color: #FFFF0b;}
    .cython.score-214 {background-color: #FFFF0b;}
    .cython.score-215 {background-color: #FFFF0b;}
    .cython.score-216 {background-color: #FFFF0b;}
    .cython.score-217 {background-color: #FFFF0b;}
    .cython.score-218 {background-color: #FFFF0b;}
    .cython.score-219 {background-color: #FFFF0b;}
    .cython.score-220 {background-color: #FFFF0b;}
    .cython.score-221 {background-color: #FFFF0b;}
    .cython.score-222 {background-color: #FFFF0a;}
    .cython.score-223 {background-color: #FFFF0a;}
    .cython.score-224 {background-color: #FFFF0a;}
    .cython.score-225 {background-color: #FFFF0a;}
    .cython.score-226 {background-color: #FFFF0a;}
    .cython.score-227 {background-color: #FFFF0a;}
    .cython.score-228 {background-color: #FFFF0a;}
    .cython.score-229 {background-color: #FFFF0a;}
    .cython.score-230 {background-color: #FFFF0a;}
    .cython.score-231 {background-color: #FFFF0a;}
    .cython.score-232 {background-color: #FFFF0a;}
    .cython.score-233 {background-color: #FFFF0a;}
    .cython.score-234 {background-color: #FFFF0a;}
    .cython.score-235 {background-color: #FFFF0a;}
    .cython.score-236 {background-color: #FFFF0a;}
    .cython.score-237 {background-color: #FFFF0a;}
    .cython.score-238 {background-color: #FFFF0a;}
    .cython.score-239 {background-color: #FFFF0a;}
    .cython.score-240 {background-color: #FFFF0a;}
    .cython.score-241 {background-color: #FFFF0a;}
    .cython.score-242 {background-color: #FFFF0a;}
    .cython.score-243 {background-color: #FFFF0a;}
    .cython.score-244 {background-color: #FFFF0a;}
    .cython.score-245 {background-color: #FFFF0a;}
    .cython.score-246 {background-color: #FFFF09;}
    .cython.score-247 {background-color: #FFFF09;}
    .cython.score-248 {background-color: #FFFF09;}
    .cython.score-249 {background-color: #FFFF09;}
    .cython.score-250 {background-color: #FFFF09;}
    .cython.score-251 {background-color: #FFFF09;}
    .cython.score-252 {background-color: #FFFF09;}
    .cython.score-253 {background-color: #FFFF09;}
    .cython.score-254 {background-color: #FFFF09;}.cython .hll { background-color: #ffffcc }
    .cython  { background: #f8f8f8; }
    .cython .c { color: #408080; font-style: italic } /* Comment */
    .cython .err { border: 1px solid #FF0000 } /* Error */
    .cython .k { color: #008000; font-weight: bold } /* Keyword */
    .cython .o { color: #666666 } /* Operator */
    .cython .cm { color: #408080; font-style: italic } /* Comment.Multiline */
    .cython .cp { color: #BC7A00 } /* Comment.Preproc */
    .cython .c1 { color: #408080; font-style: italic } /* Comment.Single */
    .cython .cs { color: #408080; font-style: italic } /* Comment.Special */
    .cython .gd { color: #A00000 } /* Generic.Deleted */
    .cython .ge { font-style: italic } /* Generic.Emph */
    .cython .gr { color: #FF0000 } /* Generic.Error */
    .cython .gh { color: #000080; font-weight: bold } /* Generic.Heading */
    .cython .gi { color: #00A000 } /* Generic.Inserted */
    .cython .go { color: #888888 } /* Generic.Output */
    .cython .gp { color: #000080; font-weight: bold } /* Generic.Prompt */
    .cython .gs { font-weight: bold } /* Generic.Strong */
    .cython .gu { color: #800080; font-weight: bold } /* Generic.Subheading */
    .cython .gt { color: #0044DD } /* Generic.Traceback */
    .cython .kc { color: #008000; font-weight: bold } /* Keyword.Constant */
    .cython .kd { color: #008000; font-weight: bold } /* Keyword.Declaration */
    .cython .kn { color: #008000; font-weight: bold } /* Keyword.Namespace */
    .cython .kp { color: #008000 } /* Keyword.Pseudo */
    .cython .kr { color: #008000; font-weight: bold } /* Keyword.Reserved */
    .cython .kt { color: #B00040 } /* Keyword.Type */
    .cython .m { color: #666666 } /* Literal.Number */
    .cython .s { color: #BA2121 } /* Literal.String */
    .cython .na { color: #7D9029 } /* Name.Attribute */
    .cython .nb { color: #008000 } /* Name.Builtin */
    .cython .nc { color: #0000FF; font-weight: bold } /* Name.Class */
    .cython .no { color: #880000 } /* Name.Constant */
    .cython .nd { color: #AA22FF } /* Name.Decorator */
    .cython .ni { color: #999999; font-weight: bold } /* Name.Entity */
    .cython .ne { color: #D2413A; font-weight: bold } /* Name.Exception */
    .cython .nf { color: #0000FF } /* Name.Function */
    .cython .nl { color: #A0A000 } /* Name.Label */
    .cython .nn { color: #0000FF; font-weight: bold } /* Name.Namespace */
    .cython .nt { color: #008000; font-weight: bold } /* Name.Tag */
    .cython .nv { color: #19177C } /* Name.Variable */
    .cython .ow { color: #AA22FF; font-weight: bold } /* Operator.Word */
    .cython .w { color: #bbbbbb } /* Text.Whitespace */
    .cython .mf { color: #666666 } /* Literal.Number.Float */
    .cython .mh { color: #666666 } /* Literal.Number.Hex */
    .cython .mi { color: #666666 } /* Literal.Number.Integer */
    .cython .mo { color: #666666 } /* Literal.Number.Oct */
    .cython .sb { color: #BA2121 } /* Literal.String.Backtick */
    .cython .sc { color: #BA2121 } /* Literal.String.Char */
    .cython .sd { color: #BA2121; font-style: italic } /* Literal.String.Doc */
    .cython .s2 { color: #BA2121 } /* Literal.String.Double */
    .cython .se { color: #BB6622; font-weight: bold } /* Literal.String.Escape */
    .cython .sh { color: #BA2121 } /* Literal.String.Heredoc */
    .cython .si { color: #BB6688; font-weight: bold } /* Literal.String.Interpol */
    .cython .sx { color: #008000 } /* Literal.String.Other */
    .cython .sr { color: #BB6688 } /* Literal.String.Regex */
    .cython .s1 { color: #BA2121 } /* Literal.String.Single */
    .cython .ss { color: #19177C } /* Literal.String.Symbol */
    .cython .bp { color: #008000 } /* Name.Builtin.Pseudo */
    .cython .vc { color: #19177C } /* Name.Variable.Class */
    .cython .vg { color: #19177C } /* Name.Variable.Global */
    .cython .vi { color: #19177C } /* Name.Variable.Instance */
    .cython .il { color: #666666 } /* Literal.Number.Integer.Long */
        </style>
        <script>
        function toggleDiv(id) {
            theDiv = id.nextElementSibling
            if (theDiv.style.display != 'block') theDiv.style.display = 'block';
            else theDiv.style.display = 'none';
        }
        </script>
    </head>
    <body class="cython">
    <p>Generated by Cython 0.22</p>
    <div class="cython"><pre class='cython line score-19' onclick='toggleDiv(this)'>+1: <span class="k">def</span> <span class="nf">cy_fib</span><span class="p">(</span><span class="n">n</span><span class="p">):</span></pre>
    <pre class='cython code score-19'>/* Python wrapper */
    static PyObject *__pyx_pw_46_cython_magic_528bf20b2b08731268ded912e73e4c00_1cy_fib(PyObject *__pyx_self, PyObject *__pyx_v_n); /*proto*/
    static PyMethodDef __pyx_mdef_46_cython_magic_528bf20b2b08731268ded912e73e4c00_1cy_fib = {"cy_fib", (PyCFunction)__pyx_pw_46_cython_magic_528bf20b2b08731268ded912e73e4c00_1cy_fib, METH_O, 0};
    static PyObject *__pyx_pw_46_cython_magic_528bf20b2b08731268ded912e73e4c00_1cy_fib(PyObject *__pyx_self, PyObject *__pyx_v_n) {
      PyObject *__pyx_r = 0;
      <span class='refnanny'>__Pyx_RefNannyDeclarations</span>
      <span class='refnanny'>__Pyx_RefNannySetupContext</span>("cy_fib (wrapper)", 0);
      __pyx_r = __pyx_pf_46_cython_magic_528bf20b2b08731268ded912e73e4c00_cy_fib(__pyx_self, ((PyObject *)__pyx_v_n));
    
      /* function exit code */
      <span class='refnanny'>__Pyx_RefNannyFinishContext</span>();
      return __pyx_r;
    }
    
    static PyObject *__pyx_pf_46_cython_magic_528bf20b2b08731268ded912e73e4c00_cy_fib(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_n) {
      PyObject *__pyx_v_a = NULL;
      PyObject *__pyx_v_b = NULL;
      CYTHON_UNUSED PyObject *__pyx_v_i = NULL;
      PyObject *__pyx_r = NULL;
      <span class='refnanny'>__Pyx_RefNannyDeclarations</span>
      <span class='refnanny'>__Pyx_RefNannySetupContext</span>("cy_fib", 0);
    /* … */
      /* function exit code */
      __pyx_L1_error:;
      <span class='pyx_macro_api'>__Pyx_XDECREF</span>(__pyx_t_1);
      <span class='pyx_macro_api'>__Pyx_XDECREF</span>(__pyx_t_2);
      <span class='pyx_macro_api'>__Pyx_XDECREF</span>(__pyx_t_5);
      <span class='pyx_c_api'>__Pyx_AddTraceback</span>("_cython_magic_528bf20b2b08731268ded912e73e4c00.cy_fib", __pyx_clineno, __pyx_lineno, __pyx_filename);
      __pyx_r = NULL;
      __pyx_L0:;
      <span class='pyx_macro_api'>__Pyx_XDECREF</span>(__pyx_v_a);
      <span class='pyx_macro_api'>__Pyx_XDECREF</span>(__pyx_v_b);
      <span class='pyx_macro_api'>__Pyx_XDECREF</span>(__pyx_v_i);
      <span class='refnanny'>__Pyx_XGIVEREF</span>(__pyx_r);
      <span class='refnanny'>__Pyx_RefNannyFinishContext</span>();
      return __pyx_r;
    }
    /* … */
      __pyx_tuple_ = <span class='py_c_api'>PyTuple_Pack</span>(4, __pyx_n_s_n, __pyx_n_s_a, __pyx_n_s_b, __pyx_n_s_i);<span class='error_goto'> if (unlikely(!__pyx_tuple_)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}</span>
      <span class='refnanny'>__Pyx_GOTREF</span>(__pyx_tuple_);
      <span class='refnanny'>__Pyx_GIVEREF</span>(__pyx_tuple_);
    /* … */
      __pyx_t_1 = PyCFunction_NewEx(&amp;__pyx_mdef_46_cython_magic_528bf20b2b08731268ded912e73e4c00_1cy_fib, NULL, __pyx_n_s_cython_magic_528bf20b2b08731268);<span class='error_goto'> if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}</span>
      <span class='refnanny'>__Pyx_GOTREF</span>(__pyx_t_1);
      if (<span class='py_c_api'>PyDict_SetItem</span>(__pyx_d, __pyx_n_s_cy_fib, __pyx_t_1) &lt; 0) <span class='error_goto'>{__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}</span>
      <span class='pyx_macro_api'>__Pyx_DECREF</span>(__pyx_t_1); __pyx_t_1 = 0;
    </pre><pre class='cython line score-1' onclick='toggleDiv(this)'>+2:     <span class="n">a</span> <span class="o">=</span> <span class="mf">0</span></pre>
    <pre class='cython code score-1'>  <span class='pyx_macro_api'>__Pyx_INCREF</span>(__pyx_int_0);
      __pyx_v_a = __pyx_int_0;
    </pre><pre class='cython line score-1' onclick='toggleDiv(this)'>+3:     <span class="n">b</span> <span class="o">=</span> <span class="mf">1</span></pre>
    <pre class='cython code score-1'>  <span class='pyx_macro_api'>__Pyx_INCREF</span>(__pyx_int_1);
      __pyx_v_b = __pyx_int_1;
    </pre><pre class='cython line score-57' onclick='toggleDiv(this)'>+4:     <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">n</span><span class="p">):</span></pre>
    <pre class='cython code score-57'>  __pyx_t_1 = <span class='py_c_api'>PyTuple_New</span>(1);<span class='error_goto'> if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 4; __pyx_clineno = __LINE__; goto __pyx_L1_error;}</span>
      <span class='refnanny'>__Pyx_GOTREF</span>(__pyx_t_1);
      <span class='pyx_macro_api'>__Pyx_INCREF</span>(__pyx_v_n);
      <span class='py_macro_api'>PyTuple_SET_ITEM</span>(__pyx_t_1, 0, __pyx_v_n);
      <span class='refnanny'>__Pyx_GIVEREF</span>(__pyx_v_n);
      __pyx_t_2 = <span class='pyx_c_api'>__Pyx_PyObject_Call</span>(__pyx_builtin_range, __pyx_t_1, NULL);<span class='error_goto'> if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 4; __pyx_clineno = __LINE__; goto __pyx_L1_error;}</span>
      <span class='refnanny'>__Pyx_GOTREF</span>(__pyx_t_2);
      <span class='pyx_macro_api'>__Pyx_DECREF</span>(__pyx_t_1); __pyx_t_1 = 0;
      if (likely(<span class='py_c_api'>PyList_CheckExact</span>(__pyx_t_2)) || <span class='py_c_api'>PyTuple_CheckExact</span>(__pyx_t_2)) {
        __pyx_t_1 = __pyx_t_2; <span class='pyx_macro_api'>__Pyx_INCREF</span>(__pyx_t_1); __pyx_t_3 = 0;
        __pyx_t_4 = NULL;
      } else {
        __pyx_t_3 = -1; __pyx_t_1 = <span class='py_c_api'>PyObject_GetIter</span>(__pyx_t_2);<span class='error_goto'> if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 4; __pyx_clineno = __LINE__; goto __pyx_L1_error;}</span>
        <span class='refnanny'>__Pyx_GOTREF</span>(__pyx_t_1);
        __pyx_t_4 = Py_TYPE(__pyx_t_1)-&gt;tp_iternext;<span class='error_goto'> if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 4; __pyx_clineno = __LINE__; goto __pyx_L1_error;}</span>
      }
      <span class='pyx_macro_api'>__Pyx_DECREF</span>(__pyx_t_2); __pyx_t_2 = 0;
      for (;;) {
        if (likely(!__pyx_t_4)) {
          if (likely(<span class='py_c_api'>PyList_CheckExact</span>(__pyx_t_1))) {
            if (__pyx_t_3 &gt;= <span class='py_macro_api'>PyList_GET_SIZE</span>(__pyx_t_1)) break;
            #if CYTHON_COMPILING_IN_CPYTHON
            __pyx_t_2 = <span class='py_macro_api'>PyList_GET_ITEM</span>(__pyx_t_1, __pyx_t_3); <span class='pyx_macro_api'>__Pyx_INCREF</span>(__pyx_t_2); __pyx_t_3++;<span class='error_goto'> if (unlikely(0 &lt; 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 4; __pyx_clineno = __LINE__; goto __pyx_L1_error;}</span>
            #else
            __pyx_t_2 = <span class='py_macro_api'>PySequence_ITEM</span>(__pyx_t_1, __pyx_t_3); __pyx_t_3++;<span class='error_goto'> if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 4; __pyx_clineno = __LINE__; goto __pyx_L1_error;}</span>
            #endif
          } else {
            if (__pyx_t_3 &gt;= <span class='py_macro_api'>PyTuple_GET_SIZE</span>(__pyx_t_1)) break;
            #if CYTHON_COMPILING_IN_CPYTHON
            __pyx_t_2 = <span class='py_macro_api'>PyTuple_GET_ITEM</span>(__pyx_t_1, __pyx_t_3); <span class='pyx_macro_api'>__Pyx_INCREF</span>(__pyx_t_2); __pyx_t_3++;<span class='error_goto'> if (unlikely(0 &lt; 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 4; __pyx_clineno = __LINE__; goto __pyx_L1_error;}</span>
            #else
            __pyx_t_2 = <span class='py_macro_api'>PySequence_ITEM</span>(__pyx_t_1, __pyx_t_3); __pyx_t_3++;<span class='error_goto'> if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 4; __pyx_clineno = __LINE__; goto __pyx_L1_error;}</span>
            #endif
          }
        } else {
          __pyx_t_2 = __pyx_t_4(__pyx_t_1);
          if (unlikely(!__pyx_t_2)) {
            PyObject* exc_type = <span class='py_c_api'>PyErr_Occurred</span>();
            if (exc_type) {
              if (likely(exc_type == PyExc_StopIteration || <span class='py_c_api'>PyErr_GivenExceptionMatches</span>(exc_type, PyExc_StopIteration))) <span class='py_c_api'>PyErr_Clear</span>();
              else <span class='error_goto'>{__pyx_filename = __pyx_f[0]; __pyx_lineno = 4; __pyx_clineno = __LINE__; goto __pyx_L1_error;}</span>
            }
            break;
          }
          <span class='refnanny'>__Pyx_GOTREF</span>(__pyx_t_2);
        }
        <span class='pyx_macro_api'>__Pyx_XDECREF_SET</span>(__pyx_v_i, __pyx_t_2);
        __pyx_t_2 = 0;
    /* … */
      }
      <span class='pyx_macro_api'>__Pyx_DECREF</span>(__pyx_t_1); __pyx_t_1 = 0;
    </pre><pre class='cython line score-8' onclick='toggleDiv(this)'>+5:         <span class="n">a</span><span class="p">,</span> <span class="n">b</span> <span class="o">=</span> <span class="n">a</span><span class="o">+</span><span class="n">b</span><span class="p">,</span> <span class="n">a</span></pre>
    <pre class='cython code score-8'>    __pyx_t_2 = <span class='py_c_api'>PyNumber_Add</span>(__pyx_v_a, __pyx_v_b);<span class='error_goto'> if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 5; __pyx_clineno = __LINE__; goto __pyx_L1_error;}</span>
        <span class='refnanny'>__Pyx_GOTREF</span>(__pyx_t_2);
        __pyx_t_5 = __pyx_v_a;
        <span class='pyx_macro_api'>__Pyx_INCREF</span>(__pyx_t_5);
        <span class='pyx_macro_api'>__Pyx_DECREF_SET</span>(__pyx_v_a, __pyx_t_2);
        __pyx_t_2 = 0;
        <span class='pyx_macro_api'>__Pyx_DECREF_SET</span>(__pyx_v_b, __pyx_t_5);
        __pyx_t_5 = 0;
    </pre><pre class='cython line score-2' onclick='toggleDiv(this)'>+6:     <span class="k">return</span> <span class="n">a</span></pre>
    <pre class='cython code score-2'>  <span class='pyx_macro_api'>__Pyx_XDECREF</span>(__pyx_r);
      <span class='pyx_macro_api'>__Pyx_INCREF</span>(__pyx_v_a);
      __pyx_r = __pyx_v_a;
      goto __pyx_L0;
    </pre></div></body></html>



.. code:: python

    %%cython -a
    cpdef double cy_fib(int n):
        cdef double a, b
        a = 0
        b = 1
        for i in range(n):
            a, b = a+b, a
        return a




.. raw:: html

    <!DOCTYPE html>
    <!-- Generated by Cython 0.22 -->
    <html>
    <head>
        <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
        <style type="text/css">
        
    body.cython { font-family: courier; font-size: 12; }
    
    .cython.tag  {  }
    .cython.line { margin: 0em }
    .cython.code  { font-size: 9; color: #444444; display: none; margin: 0px 0px 0px 20px;  }
    
    .cython.code .py_c_api  { color: red; }
    .cython.code .py_macro_api  { color: #FF7000; }
    .cython.code .pyx_c_api  { color: #FF3000; }
    .cython.code .pyx_macro_api  { color: #FF7000; }
    .cython.code .refnanny  { color: #FFA000; }
    .cython.code .error_goto  { color: #FFA000; }
    
    .cython.code .coerce  { color: #008000; border: 1px dotted #008000 }
    .cython.code .py_attr { color: #FF0000; font-weight: bold; }
    .cython.code .c_attr  { color: #0000FF; }
    .cython.code .py_call { color: #FF0000; font-weight: bold; }
    .cython.code .c_call  { color: #0000FF; }
    
    .cython.score-0 {background-color: #FFFFff;}
    .cython.score-1 {background-color: #FFFFe7;}
    .cython.score-2 {background-color: #FFFFd4;}
    .cython.score-3 {background-color: #FFFFc4;}
    .cython.score-4 {background-color: #FFFFb6;}
    .cython.score-5 {background-color: #FFFFaa;}
    .cython.score-6 {background-color: #FFFF9f;}
    .cython.score-7 {background-color: #FFFF96;}
    .cython.score-8 {background-color: #FFFF8d;}
    .cython.score-9 {background-color: #FFFF86;}
    .cython.score-10 {background-color: #FFFF7f;}
    .cython.score-11 {background-color: #FFFF79;}
    .cython.score-12 {background-color: #FFFF73;}
    .cython.score-13 {background-color: #FFFF6e;}
    .cython.score-14 {background-color: #FFFF6a;}
    .cython.score-15 {background-color: #FFFF66;}
    .cython.score-16 {background-color: #FFFF62;}
    .cython.score-17 {background-color: #FFFF5e;}
    .cython.score-18 {background-color: #FFFF5b;}
    .cython.score-19 {background-color: #FFFF57;}
    .cython.score-20 {background-color: #FFFF55;}
    .cython.score-21 {background-color: #FFFF52;}
    .cython.score-22 {background-color: #FFFF4f;}
    .cython.score-23 {background-color: #FFFF4d;}
    .cython.score-24 {background-color: #FFFF4b;}
    .cython.score-25 {background-color: #FFFF48;}
    .cython.score-26 {background-color: #FFFF46;}
    .cython.score-27 {background-color: #FFFF44;}
    .cython.score-28 {background-color: #FFFF43;}
    .cython.score-29 {background-color: #FFFF41;}
    .cython.score-30 {background-color: #FFFF3f;}
    .cython.score-31 {background-color: #FFFF3e;}
    .cython.score-32 {background-color: #FFFF3c;}
    .cython.score-33 {background-color: #FFFF3b;}
    .cython.score-34 {background-color: #FFFF39;}
    .cython.score-35 {background-color: #FFFF38;}
    .cython.score-36 {background-color: #FFFF37;}
    .cython.score-37 {background-color: #FFFF36;}
    .cython.score-38 {background-color: #FFFF35;}
    .cython.score-39 {background-color: #FFFF34;}
    .cython.score-40 {background-color: #FFFF33;}
    .cython.score-41 {background-color: #FFFF32;}
    .cython.score-42 {background-color: #FFFF31;}
    .cython.score-43 {background-color: #FFFF30;}
    .cython.score-44 {background-color: #FFFF2f;}
    .cython.score-45 {background-color: #FFFF2e;}
    .cython.score-46 {background-color: #FFFF2d;}
    .cython.score-47 {background-color: #FFFF2c;}
    .cython.score-48 {background-color: #FFFF2b;}
    .cython.score-49 {background-color: #FFFF2b;}
    .cython.score-50 {background-color: #FFFF2a;}
    .cython.score-51 {background-color: #FFFF29;}
    .cython.score-52 {background-color: #FFFF29;}
    .cython.score-53 {background-color: #FFFF28;}
    .cython.score-54 {background-color: #FFFF27;}
    .cython.score-55 {background-color: #FFFF27;}
    .cython.score-56 {background-color: #FFFF26;}
    .cython.score-57 {background-color: #FFFF26;}
    .cython.score-58 {background-color: #FFFF25;}
    .cython.score-59 {background-color: #FFFF24;}
    .cython.score-60 {background-color: #FFFF24;}
    .cython.score-61 {background-color: #FFFF23;}
    .cython.score-62 {background-color: #FFFF23;}
    .cython.score-63 {background-color: #FFFF22;}
    .cython.score-64 {background-color: #FFFF22;}
    .cython.score-65 {background-color: #FFFF22;}
    .cython.score-66 {background-color: #FFFF21;}
    .cython.score-67 {background-color: #FFFF21;}
    .cython.score-68 {background-color: #FFFF20;}
    .cython.score-69 {background-color: #FFFF20;}
    .cython.score-70 {background-color: #FFFF1f;}
    .cython.score-71 {background-color: #FFFF1f;}
    .cython.score-72 {background-color: #FFFF1f;}
    .cython.score-73 {background-color: #FFFF1e;}
    .cython.score-74 {background-color: #FFFF1e;}
    .cython.score-75 {background-color: #FFFF1e;}
    .cython.score-76 {background-color: #FFFF1d;}
    .cython.score-77 {background-color: #FFFF1d;}
    .cython.score-78 {background-color: #FFFF1c;}
    .cython.score-79 {background-color: #FFFF1c;}
    .cython.score-80 {background-color: #FFFF1c;}
    .cython.score-81 {background-color: #FFFF1c;}
    .cython.score-82 {background-color: #FFFF1b;}
    .cython.score-83 {background-color: #FFFF1b;}
    .cython.score-84 {background-color: #FFFF1b;}
    .cython.score-85 {background-color: #FFFF1a;}
    .cython.score-86 {background-color: #FFFF1a;}
    .cython.score-87 {background-color: #FFFF1a;}
    .cython.score-88 {background-color: #FFFF1a;}
    .cython.score-89 {background-color: #FFFF19;}
    .cython.score-90 {background-color: #FFFF19;}
    .cython.score-91 {background-color: #FFFF19;}
    .cython.score-92 {background-color: #FFFF19;}
    .cython.score-93 {background-color: #FFFF18;}
    .cython.score-94 {background-color: #FFFF18;}
    .cython.score-95 {background-color: #FFFF18;}
    .cython.score-96 {background-color: #FFFF18;}
    .cython.score-97 {background-color: #FFFF17;}
    .cython.score-98 {background-color: #FFFF17;}
    .cython.score-99 {background-color: #FFFF17;}
    .cython.score-100 {background-color: #FFFF17;}
    .cython.score-101 {background-color: #FFFF16;}
    .cython.score-102 {background-color: #FFFF16;}
    .cython.score-103 {background-color: #FFFF16;}
    .cython.score-104 {background-color: #FFFF16;}
    .cython.score-105 {background-color: #FFFF16;}
    .cython.score-106 {background-color: #FFFF15;}
    .cython.score-107 {background-color: #FFFF15;}
    .cython.score-108 {background-color: #FFFF15;}
    .cython.score-109 {background-color: #FFFF15;}
    .cython.score-110 {background-color: #FFFF15;}
    .cython.score-111 {background-color: #FFFF15;}
    .cython.score-112 {background-color: #FFFF14;}
    .cython.score-113 {background-color: #FFFF14;}
    .cython.score-114 {background-color: #FFFF14;}
    .cython.score-115 {background-color: #FFFF14;}
    .cython.score-116 {background-color: #FFFF14;}
    .cython.score-117 {background-color: #FFFF14;}
    .cython.score-118 {background-color: #FFFF13;}
    .cython.score-119 {background-color: #FFFF13;}
    .cython.score-120 {background-color: #FFFF13;}
    .cython.score-121 {background-color: #FFFF13;}
    .cython.score-122 {background-color: #FFFF13;}
    .cython.score-123 {background-color: #FFFF13;}
    .cython.score-124 {background-color: #FFFF13;}
    .cython.score-125 {background-color: #FFFF12;}
    .cython.score-126 {background-color: #FFFF12;}
    .cython.score-127 {background-color: #FFFF12;}
    .cython.score-128 {background-color: #FFFF12;}
    .cython.score-129 {background-color: #FFFF12;}
    .cython.score-130 {background-color: #FFFF12;}
    .cython.score-131 {background-color: #FFFF12;}
    .cython.score-132 {background-color: #FFFF11;}
    .cython.score-133 {background-color: #FFFF11;}
    .cython.score-134 {background-color: #FFFF11;}
    .cython.score-135 {background-color: #FFFF11;}
    .cython.score-136 {background-color: #FFFF11;}
    .cython.score-137 {background-color: #FFFF11;}
    .cython.score-138 {background-color: #FFFF11;}
    .cython.score-139 {background-color: #FFFF11;}
    .cython.score-140 {background-color: #FFFF11;}
    .cython.score-141 {background-color: #FFFF10;}
    .cython.score-142 {background-color: #FFFF10;}
    .cython.score-143 {background-color: #FFFF10;}
    .cython.score-144 {background-color: #FFFF10;}
    .cython.score-145 {background-color: #FFFF10;}
    .cython.score-146 {background-color: #FFFF10;}
    .cython.score-147 {background-color: #FFFF10;}
    .cython.score-148 {background-color: #FFFF10;}
    .cython.score-149 {background-color: #FFFF10;}
    .cython.score-150 {background-color: #FFFF0f;}
    .cython.score-151 {background-color: #FFFF0f;}
    .cython.score-152 {background-color: #FFFF0f;}
    .cython.score-153 {background-color: #FFFF0f;}
    .cython.score-154 {background-color: #FFFF0f;}
    .cython.score-155 {background-color: #FFFF0f;}
    .cython.score-156 {background-color: #FFFF0f;}
    .cython.score-157 {background-color: #FFFF0f;}
    .cython.score-158 {background-color: #FFFF0f;}
    .cython.score-159 {background-color: #FFFF0f;}
    .cython.score-160 {background-color: #FFFF0f;}
    .cython.score-161 {background-color: #FFFF0e;}
    .cython.score-162 {background-color: #FFFF0e;}
    .cython.score-163 {background-color: #FFFF0e;}
    .cython.score-164 {background-color: #FFFF0e;}
    .cython.score-165 {background-color: #FFFF0e;}
    .cython.score-166 {background-color: #FFFF0e;}
    .cython.score-167 {background-color: #FFFF0e;}
    .cython.score-168 {background-color: #FFFF0e;}
    .cython.score-169 {background-color: #FFFF0e;}
    .cython.score-170 {background-color: #FFFF0e;}
    .cython.score-171 {background-color: #FFFF0e;}
    .cython.score-172 {background-color: #FFFF0e;}
    .cython.score-173 {background-color: #FFFF0d;}
    .cython.score-174 {background-color: #FFFF0d;}
    .cython.score-175 {background-color: #FFFF0d;}
    .cython.score-176 {background-color: #FFFF0d;}
    .cython.score-177 {background-color: #FFFF0d;}
    .cython.score-178 {background-color: #FFFF0d;}
    .cython.score-179 {background-color: #FFFF0d;}
    .cython.score-180 {background-color: #FFFF0d;}
    .cython.score-181 {background-color: #FFFF0d;}
    .cython.score-182 {background-color: #FFFF0d;}
    .cython.score-183 {background-color: #FFFF0d;}
    .cython.score-184 {background-color: #FFFF0d;}
    .cython.score-185 {background-color: #FFFF0d;}
    .cython.score-186 {background-color: #FFFF0d;}
    .cython.score-187 {background-color: #FFFF0c;}
    .cython.score-188 {background-color: #FFFF0c;}
    .cython.score-189 {background-color: #FFFF0c;}
    .cython.score-190 {background-color: #FFFF0c;}
    .cython.score-191 {background-color: #FFFF0c;}
    .cython.score-192 {background-color: #FFFF0c;}
    .cython.score-193 {background-color: #FFFF0c;}
    .cython.score-194 {background-color: #FFFF0c;}
    .cython.score-195 {background-color: #FFFF0c;}
    .cython.score-196 {background-color: #FFFF0c;}
    .cython.score-197 {background-color: #FFFF0c;}
    .cython.score-198 {background-color: #FFFF0c;}
    .cython.score-199 {background-color: #FFFF0c;}
    .cython.score-200 {background-color: #FFFF0c;}
    .cython.score-201 {background-color: #FFFF0c;}
    .cython.score-202 {background-color: #FFFF0c;}
    .cython.score-203 {background-color: #FFFF0b;}
    .cython.score-204 {background-color: #FFFF0b;}
    .cython.score-205 {background-color: #FFFF0b;}
    .cython.score-206 {background-color: #FFFF0b;}
    .cython.score-207 {background-color: #FFFF0b;}
    .cython.score-208 {background-color: #FFFF0b;}
    .cython.score-209 {background-color: #FFFF0b;}
    .cython.score-210 {background-color: #FFFF0b;}
    .cython.score-211 {background-color: #FFFF0b;}
    .cython.score-212 {background-color: #FFFF0b;}
    .cython.score-213 {background-color: #FFFF0b;}
    .cython.score-214 {background-color: #FFFF0b;}
    .cython.score-215 {background-color: #FFFF0b;}
    .cython.score-216 {background-color: #FFFF0b;}
    .cython.score-217 {background-color: #FFFF0b;}
    .cython.score-218 {background-color: #FFFF0b;}
    .cython.score-219 {background-color: #FFFF0b;}
    .cython.score-220 {background-color: #FFFF0b;}
    .cython.score-221 {background-color: #FFFF0b;}
    .cython.score-222 {background-color: #FFFF0a;}
    .cython.score-223 {background-color: #FFFF0a;}
    .cython.score-224 {background-color: #FFFF0a;}
    .cython.score-225 {background-color: #FFFF0a;}
    .cython.score-226 {background-color: #FFFF0a;}
    .cython.score-227 {background-color: #FFFF0a;}
    .cython.score-228 {background-color: #FFFF0a;}
    .cython.score-229 {background-color: #FFFF0a;}
    .cython.score-230 {background-color: #FFFF0a;}
    .cython.score-231 {background-color: #FFFF0a;}
    .cython.score-232 {background-color: #FFFF0a;}
    .cython.score-233 {background-color: #FFFF0a;}
    .cython.score-234 {background-color: #FFFF0a;}
    .cython.score-235 {background-color: #FFFF0a;}
    .cython.score-236 {background-color: #FFFF0a;}
    .cython.score-237 {background-color: #FFFF0a;}
    .cython.score-238 {background-color: #FFFF0a;}
    .cython.score-239 {background-color: #FFFF0a;}
    .cython.score-240 {background-color: #FFFF0a;}
    .cython.score-241 {background-color: #FFFF0a;}
    .cython.score-242 {background-color: #FFFF0a;}
    .cython.score-243 {background-color: #FFFF0a;}
    .cython.score-244 {background-color: #FFFF0a;}
    .cython.score-245 {background-color: #FFFF0a;}
    .cython.score-246 {background-color: #FFFF09;}
    .cython.score-247 {background-color: #FFFF09;}
    .cython.score-248 {background-color: #FFFF09;}
    .cython.score-249 {background-color: #FFFF09;}
    .cython.score-250 {background-color: #FFFF09;}
    .cython.score-251 {background-color: #FFFF09;}
    .cython.score-252 {background-color: #FFFF09;}
    .cython.score-253 {background-color: #FFFF09;}
    .cython.score-254 {background-color: #FFFF09;}.cython .hll { background-color: #ffffcc }
    .cython  { background: #f8f8f8; }
    .cython .c { color: #408080; font-style: italic } /* Comment */
    .cython .err { border: 1px solid #FF0000 } /* Error */
    .cython .k { color: #008000; font-weight: bold } /* Keyword */
    .cython .o { color: #666666 } /* Operator */
    .cython .cm { color: #408080; font-style: italic } /* Comment.Multiline */
    .cython .cp { color: #BC7A00 } /* Comment.Preproc */
    .cython .c1 { color: #408080; font-style: italic } /* Comment.Single */
    .cython .cs { color: #408080; font-style: italic } /* Comment.Special */
    .cython .gd { color: #A00000 } /* Generic.Deleted */
    .cython .ge { font-style: italic } /* Generic.Emph */
    .cython .gr { color: #FF0000 } /* Generic.Error */
    .cython .gh { color: #000080; font-weight: bold } /* Generic.Heading */
    .cython .gi { color: #00A000 } /* Generic.Inserted */
    .cython .go { color: #888888 } /* Generic.Output */
    .cython .gp { color: #000080; font-weight: bold } /* Generic.Prompt */
    .cython .gs { font-weight: bold } /* Generic.Strong */
    .cython .gu { color: #800080; font-weight: bold } /* Generic.Subheading */
    .cython .gt { color: #0044DD } /* Generic.Traceback */
    .cython .kc { color: #008000; font-weight: bold } /* Keyword.Constant */
    .cython .kd { color: #008000; font-weight: bold } /* Keyword.Declaration */
    .cython .kn { color: #008000; font-weight: bold } /* Keyword.Namespace */
    .cython .kp { color: #008000 } /* Keyword.Pseudo */
    .cython .kr { color: #008000; font-weight: bold } /* Keyword.Reserved */
    .cython .kt { color: #B00040 } /* Keyword.Type */
    .cython .m { color: #666666 } /* Literal.Number */
    .cython .s { color: #BA2121 } /* Literal.String */
    .cython .na { color: #7D9029 } /* Name.Attribute */
    .cython .nb { color: #008000 } /* Name.Builtin */
    .cython .nc { color: #0000FF; font-weight: bold } /* Name.Class */
    .cython .no { color: #880000 } /* Name.Constant */
    .cython .nd { color: #AA22FF } /* Name.Decorator */
    .cython .ni { color: #999999; font-weight: bold } /* Name.Entity */
    .cython .ne { color: #D2413A; font-weight: bold } /* Name.Exception */
    .cython .nf { color: #0000FF } /* Name.Function */
    .cython .nl { color: #A0A000 } /* Name.Label */
    .cython .nn { color: #0000FF; font-weight: bold } /* Name.Namespace */
    .cython .nt { color: #008000; font-weight: bold } /* Name.Tag */
    .cython .nv { color: #19177C } /* Name.Variable */
    .cython .ow { color: #AA22FF; font-weight: bold } /* Operator.Word */
    .cython .w { color: #bbbbbb } /* Text.Whitespace */
    .cython .mf { color: #666666 } /* Literal.Number.Float */
    .cython .mh { color: #666666 } /* Literal.Number.Hex */
    .cython .mi { color: #666666 } /* Literal.Number.Integer */
    .cython .mo { color: #666666 } /* Literal.Number.Oct */
    .cython .sb { color: #BA2121 } /* Literal.String.Backtick */
    .cython .sc { color: #BA2121 } /* Literal.String.Char */
    .cython .sd { color: #BA2121; font-style: italic } /* Literal.String.Doc */
    .cython .s2 { color: #BA2121 } /* Literal.String.Double */
    .cython .se { color: #BB6622; font-weight: bold } /* Literal.String.Escape */
    .cython .sh { color: #BA2121 } /* Literal.String.Heredoc */
    .cython .si { color: #BB6688; font-weight: bold } /* Literal.String.Interpol */
    .cython .sx { color: #008000 } /* Literal.String.Other */
    .cython .sr { color: #BB6688 } /* Literal.String.Regex */
    .cython .s1 { color: #BA2121 } /* Literal.String.Single */
    .cython .ss { color: #19177C } /* Literal.String.Symbol */
    .cython .bp { color: #008000 } /* Name.Builtin.Pseudo */
    .cython .vc { color: #19177C } /* Name.Variable.Class */
    .cython .vg { color: #19177C } /* Name.Variable.Global */
    .cython .vi { color: #19177C } /* Name.Variable.Instance */
    .cython .il { color: #666666 } /* Literal.Number.Integer.Long */
        </style>
        <script>
        function toggleDiv(id) {
            theDiv = id.nextElementSibling
            if (theDiv.style.display != 'block') theDiv.style.display = 'block';
            else theDiv.style.display = 'none';
        }
        </script>
    </head>
    <body class="cython">
    <p>Generated by Cython 0.22</p>
    <div class="cython"><pre class='cython line score-13' onclick='toggleDiv(this)'>+1: <span class="k">cpdef</span> <span class="kt">double</span> <span class="nf">cy_fib</span><span class="p">(</span><span class="nb">int</span> <span class="n">n</span><span class="p">):</span></pre>
    <pre class='cython code score-13'>static PyObject *__pyx_pw_46_cython_magic_fcdfb960513accdd55792903d2ac36a8_1cy_fib(PyObject *__pyx_self, PyObject *__pyx_arg_n); /*proto*/
    static double __pyx_f_46_cython_magic_fcdfb960513accdd55792903d2ac36a8_cy_fib(int __pyx_v_n, CYTHON_UNUSED int __pyx_skip_dispatch) {
      double __pyx_v_a;
      double __pyx_v_b;
      CYTHON_UNUSED int __pyx_v_i;
      double __pyx_r;
      <span class='refnanny'>__Pyx_RefNannyDeclarations</span>
      <span class='refnanny'>__Pyx_RefNannySetupContext</span>("cy_fib", 0);
    /* … */
      /* function exit code */
      __pyx_L0:;
      <span class='refnanny'>__Pyx_RefNannyFinishContext</span>();
      return __pyx_r;
    }
    
    /* Python wrapper */
    static PyObject *__pyx_pw_46_cython_magic_fcdfb960513accdd55792903d2ac36a8_1cy_fib(PyObject *__pyx_self, PyObject *__pyx_arg_n); /*proto*/
    static PyObject *__pyx_pw_46_cython_magic_fcdfb960513accdd55792903d2ac36a8_1cy_fib(PyObject *__pyx_self, PyObject *__pyx_arg_n) {
      int __pyx_v_n;
      PyObject *__pyx_r = 0;
      <span class='refnanny'>__Pyx_RefNannyDeclarations</span>
      <span class='refnanny'>__Pyx_RefNannySetupContext</span>("cy_fib (wrapper)", 0);
      assert(__pyx_arg_n); {
        __pyx_v_n = <span class='pyx_c_api'>__Pyx_PyInt_As_int</span>(__pyx_arg_n);<span class='error_goto'> if (unlikely((__pyx_v_n == (int)-1) &amp;&amp; PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L3_error;}</span>
      }
      goto __pyx_L4_argument_unpacking_done;
      __pyx_L3_error:;
      <span class='pyx_c_api'>__Pyx_AddTraceback</span>("_cython_magic_fcdfb960513accdd55792903d2ac36a8.cy_fib", __pyx_clineno, __pyx_lineno, __pyx_filename);
      <span class='refnanny'>__Pyx_RefNannyFinishContext</span>();
      return NULL;
      __pyx_L4_argument_unpacking_done:;
      __pyx_r = __pyx_pf_46_cython_magic_fcdfb960513accdd55792903d2ac36a8_cy_fib(__pyx_self, ((int)__pyx_v_n));
      int __pyx_lineno = 0;
      const char *__pyx_filename = NULL;
      int __pyx_clineno = 0;
    
      /* function exit code */
      <span class='refnanny'>__Pyx_RefNannyFinishContext</span>();
      return __pyx_r;
    }
    
    static PyObject *__pyx_pf_46_cython_magic_fcdfb960513accdd55792903d2ac36a8_cy_fib(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_n) {
      PyObject *__pyx_r = NULL;
      <span class='refnanny'>__Pyx_RefNannyDeclarations</span>
      <span class='refnanny'>__Pyx_RefNannySetupContext</span>("cy_fib", 0);
      <span class='pyx_macro_api'>__Pyx_XDECREF</span>(__pyx_r);
      __pyx_t_1 = <span class='py_c_api'>PyFloat_FromDouble</span>(__pyx_f_46_cython_magic_fcdfb960513accdd55792903d2ac36a8_cy_fib(__pyx_v_n, 0));<span class='error_goto'> if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}</span>
      <span class='refnanny'>__Pyx_GOTREF</span>(__pyx_t_1);
      __pyx_r = __pyx_t_1;
      __pyx_t_1 = 0;
      goto __pyx_L0;
    
      /* function exit code */
      __pyx_L1_error:;
      <span class='pyx_macro_api'>__Pyx_XDECREF</span>(__pyx_t_1);
      <span class='pyx_c_api'>__Pyx_AddTraceback</span>("_cython_magic_fcdfb960513accdd55792903d2ac36a8.cy_fib", __pyx_clineno, __pyx_lineno, __pyx_filename);
      __pyx_r = NULL;
      __pyx_L0:;
      <span class='refnanny'>__Pyx_XGIVEREF</span>(__pyx_r);
      <span class='refnanny'>__Pyx_RefNannyFinishContext</span>();
      return __pyx_r;
    }
    </pre><pre class='cython line score-0'>&#xA0;2:     <span class="k">cdef</span> <span class="kt">double</span> <span class="nf">a</span><span class="p">,</span> <span class="nf">b</span></pre>
    <pre class='cython line score-0' onclick='toggleDiv(this)'>+3:     <span class="n">a</span> <span class="o">=</span> <span class="mf">0</span></pre>
    <pre class='cython code score-0'>  __pyx_v_a = 0.0;
    </pre><pre class='cython line score-0' onclick='toggleDiv(this)'>+4:     <span class="n">b</span> <span class="o">=</span> <span class="mf">1</span></pre>
    <pre class='cython code score-0'>  __pyx_v_b = 1.0;
    </pre><pre class='cython line score-0' onclick='toggleDiv(this)'>+5:     <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">n</span><span class="p">):</span></pre>
    <pre class='cython code score-0'>  __pyx_t_1 = __pyx_v_n;
      for (__pyx_t_2 = 0; __pyx_t_2 &lt; __pyx_t_1; __pyx_t_2+=1) {
        __pyx_v_i = __pyx_t_2;
    </pre><pre class='cython line score-0' onclick='toggleDiv(this)'>+6:         <span class="n">a</span><span class="p">,</span> <span class="n">b</span> <span class="o">=</span> <span class="n">a</span><span class="o">+</span><span class="n">b</span><span class="p">,</span> <span class="n">a</span></pre>
    <pre class='cython code score-0'>    __pyx_t_3 = (__pyx_v_a + __pyx_v_b);
        __pyx_t_4 = __pyx_v_a;
        __pyx_v_a = __pyx_t_3;
        __pyx_v_b = __pyx_t_4;
      }
    </pre><pre class='cython line score-0' onclick='toggleDiv(this)'>+7:     <span class="k">return</span> <span class="n">a</span></pre>
    <pre class='cython code score-0'>  __pyx_r = __pyx_v_a;
      goto __pyx_L0;
    </pre></div></body></html>



.. code:: python

    %timeit py_fib(100)
    %timeit numba_fib(100)
    %timeit cy_fib(100)


.. parsed-literal::

    100000 loops, best of 3: 8.77 µs per loop
    1000000 loops, best of 3: 475 ns per loop
    1000000 loops, best of 3: 250 ns per loop


Example: Matrix multiplication
------------------------------

.. code:: python

    %%cython -a
    
    import numpy as np
    cimport numpy as np
    
    def py_mult(u, v):
        m, n = u.shape
        n, p = v.shape
        w = np.zeros((m, p))
        for i in range(m):
            for j in range(p):
                for k in range(n):
                    w[i, j] += u[i, k] * v[k, j]
        return w




.. raw:: html

    <!DOCTYPE html>
    <!-- Generated by Cython 0.22 -->
    <html>
    <head>
        <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
        <style type="text/css">
        
    body.cython { font-family: courier; font-size: 12; }
    
    .cython.tag  {  }
    .cython.line { margin: 0em }
    .cython.code  { font-size: 9; color: #444444; display: none; margin: 0px 0px 0px 20px;  }
    
    .cython.code .py_c_api  { color: red; }
    .cython.code .py_macro_api  { color: #FF7000; }
    .cython.code .pyx_c_api  { color: #FF3000; }
    .cython.code .pyx_macro_api  { color: #FF7000; }
    .cython.code .refnanny  { color: #FFA000; }
    .cython.code .error_goto  { color: #FFA000; }
    
    .cython.code .coerce  { color: #008000; border: 1px dotted #008000 }
    .cython.code .py_attr { color: #FF0000; font-weight: bold; }
    .cython.code .c_attr  { color: #0000FF; }
    .cython.code .py_call { color: #FF0000; font-weight: bold; }
    .cython.code .c_call  { color: #0000FF; }
    
    .cython.score-0 {background-color: #FFFFff;}
    .cython.score-1 {background-color: #FFFFe7;}
    .cython.score-2 {background-color: #FFFFd4;}
    .cython.score-3 {background-color: #FFFFc4;}
    .cython.score-4 {background-color: #FFFFb6;}
    .cython.score-5 {background-color: #FFFFaa;}
    .cython.score-6 {background-color: #FFFF9f;}
    .cython.score-7 {background-color: #FFFF96;}
    .cython.score-8 {background-color: #FFFF8d;}
    .cython.score-9 {background-color: #FFFF86;}
    .cython.score-10 {background-color: #FFFF7f;}
    .cython.score-11 {background-color: #FFFF79;}
    .cython.score-12 {background-color: #FFFF73;}
    .cython.score-13 {background-color: #FFFF6e;}
    .cython.score-14 {background-color: #FFFF6a;}
    .cython.score-15 {background-color: #FFFF66;}
    .cython.score-16 {background-color: #FFFF62;}
    .cython.score-17 {background-color: #FFFF5e;}
    .cython.score-18 {background-color: #FFFF5b;}
    .cython.score-19 {background-color: #FFFF57;}
    .cython.score-20 {background-color: #FFFF55;}
    .cython.score-21 {background-color: #FFFF52;}
    .cython.score-22 {background-color: #FFFF4f;}
    .cython.score-23 {background-color: #FFFF4d;}
    .cython.score-24 {background-color: #FFFF4b;}
    .cython.score-25 {background-color: #FFFF48;}
    .cython.score-26 {background-color: #FFFF46;}
    .cython.score-27 {background-color: #FFFF44;}
    .cython.score-28 {background-color: #FFFF43;}
    .cython.score-29 {background-color: #FFFF41;}
    .cython.score-30 {background-color: #FFFF3f;}
    .cython.score-31 {background-color: #FFFF3e;}
    .cython.score-32 {background-color: #FFFF3c;}
    .cython.score-33 {background-color: #FFFF3b;}
    .cython.score-34 {background-color: #FFFF39;}
    .cython.score-35 {background-color: #FFFF38;}
    .cython.score-36 {background-color: #FFFF37;}
    .cython.score-37 {background-color: #FFFF36;}
    .cython.score-38 {background-color: #FFFF35;}
    .cython.score-39 {background-color: #FFFF34;}
    .cython.score-40 {background-color: #FFFF33;}
    .cython.score-41 {background-color: #FFFF32;}
    .cython.score-42 {background-color: #FFFF31;}
    .cython.score-43 {background-color: #FFFF30;}
    .cython.score-44 {background-color: #FFFF2f;}
    .cython.score-45 {background-color: #FFFF2e;}
    .cython.score-46 {background-color: #FFFF2d;}
    .cython.score-47 {background-color: #FFFF2c;}
    .cython.score-48 {background-color: #FFFF2b;}
    .cython.score-49 {background-color: #FFFF2b;}
    .cython.score-50 {background-color: #FFFF2a;}
    .cython.score-51 {background-color: #FFFF29;}
    .cython.score-52 {background-color: #FFFF29;}
    .cython.score-53 {background-color: #FFFF28;}
    .cython.score-54 {background-color: #FFFF27;}
    .cython.score-55 {background-color: #FFFF27;}
    .cython.score-56 {background-color: #FFFF26;}
    .cython.score-57 {background-color: #FFFF26;}
    .cython.score-58 {background-color: #FFFF25;}
    .cython.score-59 {background-color: #FFFF24;}
    .cython.score-60 {background-color: #FFFF24;}
    .cython.score-61 {background-color: #FFFF23;}
    .cython.score-62 {background-color: #FFFF23;}
    .cython.score-63 {background-color: #FFFF22;}
    .cython.score-64 {background-color: #FFFF22;}
    .cython.score-65 {background-color: #FFFF22;}
    .cython.score-66 {background-color: #FFFF21;}
    .cython.score-67 {background-color: #FFFF21;}
    .cython.score-68 {background-color: #FFFF20;}
    .cython.score-69 {background-color: #FFFF20;}
    .cython.score-70 {background-color: #FFFF1f;}
    .cython.score-71 {background-color: #FFFF1f;}
    .cython.score-72 {background-color: #FFFF1f;}
    .cython.score-73 {background-color: #FFFF1e;}
    .cython.score-74 {background-color: #FFFF1e;}
    .cython.score-75 {background-color: #FFFF1e;}
    .cython.score-76 {background-color: #FFFF1d;}
    .cython.score-77 {background-color: #FFFF1d;}
    .cython.score-78 {background-color: #FFFF1c;}
    .cython.score-79 {background-color: #FFFF1c;}
    .cython.score-80 {background-color: #FFFF1c;}
    .cython.score-81 {background-color: #FFFF1c;}
    .cython.score-82 {background-color: #FFFF1b;}
    .cython.score-83 {background-color: #FFFF1b;}
    .cython.score-84 {background-color: #FFFF1b;}
    .cython.score-85 {background-color: #FFFF1a;}
    .cython.score-86 {background-color: #FFFF1a;}
    .cython.score-87 {background-color: #FFFF1a;}
    .cython.score-88 {background-color: #FFFF1a;}
    .cython.score-89 {background-color: #FFFF19;}
    .cython.score-90 {background-color: #FFFF19;}
    .cython.score-91 {background-color: #FFFF19;}
    .cython.score-92 {background-color: #FFFF19;}
    .cython.score-93 {background-color: #FFFF18;}
    .cython.score-94 {background-color: #FFFF18;}
    .cython.score-95 {background-color: #FFFF18;}
    .cython.score-96 {background-color: #FFFF18;}
    .cython.score-97 {background-color: #FFFF17;}
    .cython.score-98 {background-color: #FFFF17;}
    .cython.score-99 {background-color: #FFFF17;}
    .cython.score-100 {background-color: #FFFF17;}
    .cython.score-101 {background-color: #FFFF16;}
    .cython.score-102 {background-color: #FFFF16;}
    .cython.score-103 {background-color: #FFFF16;}
    .cython.score-104 {background-color: #FFFF16;}
    .cython.score-105 {background-color: #FFFF16;}
    .cython.score-106 {background-color: #FFFF15;}
    .cython.score-107 {background-color: #FFFF15;}
    .cython.score-108 {background-color: #FFFF15;}
    .cython.score-109 {background-color: #FFFF15;}
    .cython.score-110 {background-color: #FFFF15;}
    .cython.score-111 {background-color: #FFFF15;}
    .cython.score-112 {background-color: #FFFF14;}
    .cython.score-113 {background-color: #FFFF14;}
    .cython.score-114 {background-color: #FFFF14;}
    .cython.score-115 {background-color: #FFFF14;}
    .cython.score-116 {background-color: #FFFF14;}
    .cython.score-117 {background-color: #FFFF14;}
    .cython.score-118 {background-color: #FFFF13;}
    .cython.score-119 {background-color: #FFFF13;}
    .cython.score-120 {background-color: #FFFF13;}
    .cython.score-121 {background-color: #FFFF13;}
    .cython.score-122 {background-color: #FFFF13;}
    .cython.score-123 {background-color: #FFFF13;}
    .cython.score-124 {background-color: #FFFF13;}
    .cython.score-125 {background-color: #FFFF12;}
    .cython.score-126 {background-color: #FFFF12;}
    .cython.score-127 {background-color: #FFFF12;}
    .cython.score-128 {background-color: #FFFF12;}
    .cython.score-129 {background-color: #FFFF12;}
    .cython.score-130 {background-color: #FFFF12;}
    .cython.score-131 {background-color: #FFFF12;}
    .cython.score-132 {background-color: #FFFF11;}
    .cython.score-133 {background-color: #FFFF11;}
    .cython.score-134 {background-color: #FFFF11;}
    .cython.score-135 {background-color: #FFFF11;}
    .cython.score-136 {background-color: #FFFF11;}
    .cython.score-137 {background-color: #FFFF11;}
    .cython.score-138 {background-color: #FFFF11;}
    .cython.score-139 {background-color: #FFFF11;}
    .cython.score-140 {background-color: #FFFF11;}
    .cython.score-141 {background-color: #FFFF10;}
    .cython.score-142 {background-color: #FFFF10;}
    .cython.score-143 {background-color: #FFFF10;}
    .cython.score-144 {background-color: #FFFF10;}
    .cython.score-145 {background-color: #FFFF10;}
    .cython.score-146 {background-color: #FFFF10;}
    .cython.score-147 {background-color: #FFFF10;}
    .cython.score-148 {background-color: #FFFF10;}
    .cython.score-149 {background-color: #FFFF10;}
    .cython.score-150 {background-color: #FFFF0f;}
    .cython.score-151 {background-color: #FFFF0f;}
    .cython.score-152 {background-color: #FFFF0f;}
    .cython.score-153 {background-color: #FFFF0f;}
    .cython.score-154 {background-color: #FFFF0f;}
    .cython.score-155 {background-color: #FFFF0f;}
    .cython.score-156 {background-color: #FFFF0f;}
    .cython.score-157 {background-color: #FFFF0f;}
    .cython.score-158 {background-color: #FFFF0f;}
    .cython.score-159 {background-color: #FFFF0f;}
    .cython.score-160 {background-color: #FFFF0f;}
    .cython.score-161 {background-color: #FFFF0e;}
    .cython.score-162 {background-color: #FFFF0e;}
    .cython.score-163 {background-color: #FFFF0e;}
    .cython.score-164 {background-color: #FFFF0e;}
    .cython.score-165 {background-color: #FFFF0e;}
    .cython.score-166 {background-color: #FFFF0e;}
    .cython.score-167 {background-color: #FFFF0e;}
    .cython.score-168 {background-color: #FFFF0e;}
    .cython.score-169 {background-color: #FFFF0e;}
    .cython.score-170 {background-color: #FFFF0e;}
    .cython.score-171 {background-color: #FFFF0e;}
    .cython.score-172 {background-color: #FFFF0e;}
    .cython.score-173 {background-color: #FFFF0d;}
    .cython.score-174 {background-color: #FFFF0d;}
    .cython.score-175 {background-color: #FFFF0d;}
    .cython.score-176 {background-color: #FFFF0d;}
    .cython.score-177 {background-color: #FFFF0d;}
    .cython.score-178 {background-color: #FFFF0d;}
    .cython.score-179 {background-color: #FFFF0d;}
    .cython.score-180 {background-color: #FFFF0d;}
    .cython.score-181 {background-color: #FFFF0d;}
    .cython.score-182 {background-color: #FFFF0d;}
    .cython.score-183 {background-color: #FFFF0d;}
    .cython.score-184 {background-color: #FFFF0d;}
    .cython.score-185 {background-color: #FFFF0d;}
    .cython.score-186 {background-color: #FFFF0d;}
    .cython.score-187 {background-color: #FFFF0c;}
    .cython.score-188 {background-color: #FFFF0c;}
    .cython.score-189 {background-color: #FFFF0c;}
    .cython.score-190 {background-color: #FFFF0c;}
    .cython.score-191 {background-color: #FFFF0c;}
    .cython.score-192 {background-color: #FFFF0c;}
    .cython.score-193 {background-color: #FFFF0c;}
    .cython.score-194 {background-color: #FFFF0c;}
    .cython.score-195 {background-color: #FFFF0c;}
    .cython.score-196 {background-color: #FFFF0c;}
    .cython.score-197 {background-color: #FFFF0c;}
    .cython.score-198 {background-color: #FFFF0c;}
    .cython.score-199 {background-color: #FFFF0c;}
    .cython.score-200 {background-color: #FFFF0c;}
    .cython.score-201 {background-color: #FFFF0c;}
    .cython.score-202 {background-color: #FFFF0c;}
    .cython.score-203 {background-color: #FFFF0b;}
    .cython.score-204 {background-color: #FFFF0b;}
    .cython.score-205 {background-color: #FFFF0b;}
    .cython.score-206 {background-color: #FFFF0b;}
    .cython.score-207 {background-color: #FFFF0b;}
    .cython.score-208 {background-color: #FFFF0b;}
    .cython.score-209 {background-color: #FFFF0b;}
    .cython.score-210 {background-color: #FFFF0b;}
    .cython.score-211 {background-color: #FFFF0b;}
    .cython.score-212 {background-color: #FFFF0b;}
    .cython.score-213 {background-color: #FFFF0b;}
    .cython.score-214 {background-color: #FFFF0b;}
    .cython.score-215 {background-color: #FFFF0b;}
    .cython.score-216 {background-color: #FFFF0b;}
    .cython.score-217 {background-color: #FFFF0b;}
    .cython.score-218 {background-color: #FFFF0b;}
    .cython.score-219 {background-color: #FFFF0b;}
    .cython.score-220 {background-color: #FFFF0b;}
    .cython.score-221 {background-color: #FFFF0b;}
    .cython.score-222 {background-color: #FFFF0a;}
    .cython.score-223 {background-color: #FFFF0a;}
    .cython.score-224 {background-color: #FFFF0a;}
    .cython.score-225 {background-color: #FFFF0a;}
    .cython.score-226 {background-color: #FFFF0a;}
    .cython.score-227 {background-color: #FFFF0a;}
    .cython.score-228 {background-color: #FFFF0a;}
    .cython.score-229 {background-color: #FFFF0a;}
    .cython.score-230 {background-color: #FFFF0a;}
    .cython.score-231 {background-color: #FFFF0a;}
    .cython.score-232 {background-color: #FFFF0a;}
    .cython.score-233 {background-color: #FFFF0a;}
    .cython.score-234 {background-color: #FFFF0a;}
    .cython.score-235 {background-color: #FFFF0a;}
    .cython.score-236 {background-color: #FFFF0a;}
    .cython.score-237 {background-color: #FFFF0a;}
    .cython.score-238 {background-color: #FFFF0a;}
    .cython.score-239 {background-color: #FFFF0a;}
    .cython.score-240 {background-color: #FFFF0a;}
    .cython.score-241 {background-color: #FFFF0a;}
    .cython.score-242 {background-color: #FFFF0a;}
    .cython.score-243 {background-color: #FFFF0a;}
    .cython.score-244 {background-color: #FFFF0a;}
    .cython.score-245 {background-color: #FFFF0a;}
    .cython.score-246 {background-color: #FFFF09;}
    .cython.score-247 {background-color: #FFFF09;}
    .cython.score-248 {background-color: #FFFF09;}
    .cython.score-249 {background-color: #FFFF09;}
    .cython.score-250 {background-color: #FFFF09;}
    .cython.score-251 {background-color: #FFFF09;}
    .cython.score-252 {background-color: #FFFF09;}
    .cython.score-253 {background-color: #FFFF09;}
    .cython.score-254 {background-color: #FFFF09;}.cython .hll { background-color: #ffffcc }
    .cython  { background: #f8f8f8; }
    .cython .c { color: #408080; font-style: italic } /* Comment */
    .cython .err { border: 1px solid #FF0000 } /* Error */
    .cython .k { color: #008000; font-weight: bold } /* Keyword */
    .cython .o { color: #666666 } /* Operator */
    .cython .cm { color: #408080; font-style: italic } /* Comment.Multiline */
    .cython .cp { color: #BC7A00 } /* Comment.Preproc */
    .cython .c1 { color: #408080; font-style: italic } /* Comment.Single */
    .cython .cs { color: #408080; font-style: italic } /* Comment.Special */
    .cython .gd { color: #A00000 } /* Generic.Deleted */
    .cython .ge { font-style: italic } /* Generic.Emph */
    .cython .gr { color: #FF0000 } /* Generic.Error */
    .cython .gh { color: #000080; font-weight: bold } /* Generic.Heading */
    .cython .gi { color: #00A000 } /* Generic.Inserted */
    .cython .go { color: #888888 } /* Generic.Output */
    .cython .gp { color: #000080; font-weight: bold } /* Generic.Prompt */
    .cython .gs { font-weight: bold } /* Generic.Strong */
    .cython .gu { color: #800080; font-weight: bold } /* Generic.Subheading */
    .cython .gt { color: #0044DD } /* Generic.Traceback */
    .cython .kc { color: #008000; font-weight: bold } /* Keyword.Constant */
    .cython .kd { color: #008000; font-weight: bold } /* Keyword.Declaration */
    .cython .kn { color: #008000; font-weight: bold } /* Keyword.Namespace */
    .cython .kp { color: #008000 } /* Keyword.Pseudo */
    .cython .kr { color: #008000; font-weight: bold } /* Keyword.Reserved */
    .cython .kt { color: #B00040 } /* Keyword.Type */
    .cython .m { color: #666666 } /* Literal.Number */
    .cython .s { color: #BA2121 } /* Literal.String */
    .cython .na { color: #7D9029 } /* Name.Attribute */
    .cython .nb { color: #008000 } /* Name.Builtin */
    .cython .nc { color: #0000FF; font-weight: bold } /* Name.Class */
    .cython .no { color: #880000 } /* Name.Constant */
    .cython .nd { color: #AA22FF } /* Name.Decorator */
    .cython .ni { color: #999999; font-weight: bold } /* Name.Entity */
    .cython .ne { color: #D2413A; font-weight: bold } /* Name.Exception */
    .cython .nf { color: #0000FF } /* Name.Function */
    .cython .nl { color: #A0A000 } /* Name.Label */
    .cython .nn { color: #0000FF; font-weight: bold } /* Name.Namespace */
    .cython .nt { color: #008000; font-weight: bold } /* Name.Tag */
    .cython .nv { color: #19177C } /* Name.Variable */
    .cython .ow { color: #AA22FF; font-weight: bold } /* Operator.Word */
    .cython .w { color: #bbbbbb } /* Text.Whitespace */
    .cython .mf { color: #666666 } /* Literal.Number.Float */
    .cython .mh { color: #666666 } /* Literal.Number.Hex */
    .cython .mi { color: #666666 } /* Literal.Number.Integer */
    .cython .mo { color: #666666 } /* Literal.Number.Oct */
    .cython .sb { color: #BA2121 } /* Literal.String.Backtick */
    .cython .sc { color: #BA2121 } /* Literal.String.Char */
    .cython .sd { color: #BA2121; font-style: italic } /* Literal.String.Doc */
    .cython .s2 { color: #BA2121 } /* Literal.String.Double */
    .cython .se { color: #BB6622; font-weight: bold } /* Literal.String.Escape */
    .cython .sh { color: #BA2121 } /* Literal.String.Heredoc */
    .cython .si { color: #BB6688; font-weight: bold } /* Literal.String.Interpol */
    .cython .sx { color: #008000 } /* Literal.String.Other */
    .cython .sr { color: #BB6688 } /* Literal.String.Regex */
    .cython .s1 { color: #BA2121 } /* Literal.String.Single */
    .cython .ss { color: #19177C } /* Literal.String.Symbol */
    .cython .bp { color: #008000 } /* Name.Builtin.Pseudo */
    .cython .vc { color: #19177C } /* Name.Variable.Class */
    .cython .vg { color: #19177C } /* Name.Variable.Global */
    .cython .vi { color: #19177C } /* Name.Variable.Instance */
    .cython .il { color: #666666 } /* Literal.Number.Integer.Long */
        </style>
        <script>
        function toggleDiv(id) {
            theDiv = id.nextElementSibling
            if (theDiv.style.display != 'block') theDiv.style.display = 'block';
            else theDiv.style.display = 'none';
        }
        </script>
    </head>
    <body class="cython">
    <p>Generated by Cython 0.22</p>
    <div class="cython"><pre class='cython line score-0'>&#xA0;01: </pre>
    <pre class='cython line score-19' onclick='toggleDiv(this)'>+02: <span class="k">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="nn">np</span></pre>
    <pre class='cython code score-19'>  __pyx_t_1 = <span class='pyx_c_api'>__Pyx_Import</span>(__pyx_n_s_numpy, 0, -1);<span class='error_goto'> if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2; __pyx_clineno = __LINE__; goto __pyx_L1_error;}</span>
      <span class='refnanny'>__Pyx_GOTREF</span>(__pyx_t_1);
      if (<span class='py_c_api'>PyDict_SetItem</span>(__pyx_d, __pyx_n_s_np, __pyx_t_1) &lt; 0) <span class='error_goto'>{__pyx_filename = __pyx_f[0]; __pyx_lineno = 2; __pyx_clineno = __LINE__; goto __pyx_L1_error;}</span>
      <span class='pyx_macro_api'>__Pyx_DECREF</span>(__pyx_t_1); __pyx_t_1 = 0;
    /* … */
      __pyx_t_1 = <span class='py_c_api'>PyDict_New</span>();<span class='error_goto'> if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2; __pyx_clineno = __LINE__; goto __pyx_L1_error;}</span>
      <span class='refnanny'>__Pyx_GOTREF</span>(__pyx_t_1);
      if (<span class='py_c_api'>PyDict_SetItem</span>(__pyx_d, __pyx_n_s_test, __pyx_t_1) &lt; 0) <span class='error_goto'>{__pyx_filename = __pyx_f[0]; __pyx_lineno = 2; __pyx_clineno = __LINE__; goto __pyx_L1_error;}</span>
      <span class='pyx_macro_api'>__Pyx_DECREF</span>(__pyx_t_1); __pyx_t_1 = 0;
    </pre><pre class='cython line score-0'>&#xA0;03: <span class="k">cimport</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="nn">np</span></pre>
    <pre class='cython line score-0'>&#xA0;04: </pre>
    <pre class='cython line score-58' onclick='toggleDiv(this)'>+05: <span class="k">def</span> <span class="nf">py_mult</span><span class="p">(</span><span class="n">u</span><span class="p">,</span> <span class="n">v</span><span class="p">):</span></pre>
    <pre class='cython code score-58'>/* Python wrapper */
    static PyObject *__pyx_pw_46_cython_magic_8b0ed1b336ee212d16c30549d84846f5_1py_mult(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
    static PyMethodDef __pyx_mdef_46_cython_magic_8b0ed1b336ee212d16c30549d84846f5_1py_mult = {"py_mult", (PyCFunction)__pyx_pw_46_cython_magic_8b0ed1b336ee212d16c30549d84846f5_1py_mult, METH_VARARGS|METH_KEYWORDS, 0};
    static PyObject *__pyx_pw_46_cython_magic_8b0ed1b336ee212d16c30549d84846f5_1py_mult(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
      PyObject *__pyx_v_u = 0;
      PyObject *__pyx_v_v = 0;
      PyObject *__pyx_r = 0;
      <span class='refnanny'>__Pyx_RefNannyDeclarations</span>
      <span class='refnanny'>__Pyx_RefNannySetupContext</span>("py_mult (wrapper)", 0);
      {
        static PyObject **__pyx_pyargnames[] = {&amp;__pyx_n_s_u,&amp;__pyx_n_s_v,0};
        PyObject* values[2] = {0,0};
        if (unlikely(__pyx_kwds)) {
          Py_ssize_t kw_args;
          const Py_ssize_t pos_args = <span class='py_macro_api'>PyTuple_GET_SIZE</span>(__pyx_args);
          switch (pos_args) {
            case  2: values[1] = <span class='py_macro_api'>PyTuple_GET_ITEM</span>(__pyx_args, 1);
            case  1: values[0] = <span class='py_macro_api'>PyTuple_GET_ITEM</span>(__pyx_args, 0);
            case  0: break;
            default: goto __pyx_L5_argtuple_error;
          }
          kw_args = <span class='py_c_api'>PyDict_Size</span>(__pyx_kwds);
          switch (pos_args) {
            case  0:
            if (likely((values[0] = <span class='py_c_api'>PyDict_GetItem</span>(__pyx_kwds, __pyx_n_s_u)) != 0)) kw_args--;
            else goto __pyx_L5_argtuple_error;
            case  1:
            if (likely((values[1] = <span class='py_c_api'>PyDict_GetItem</span>(__pyx_kwds, __pyx_n_s_v)) != 0)) kw_args--;
            else {
              <span class='pyx_c_api'>__Pyx_RaiseArgtupleInvalid</span>("py_mult", 1, 2, 2, 1); <span class='error_goto'>{__pyx_filename = __pyx_f[0]; __pyx_lineno = 5; __pyx_clineno = __LINE__; goto __pyx_L3_error;}</span>
            }
          }
          if (unlikely(kw_args &gt; 0)) {
            if (unlikely(<span class='pyx_c_api'>__Pyx_ParseOptionalKeywords</span>(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "py_mult") &lt; 0)) <span class='error_goto'>{__pyx_filename = __pyx_f[0]; __pyx_lineno = 5; __pyx_clineno = __LINE__; goto __pyx_L3_error;}</span>
          }
        } else if (<span class='py_macro_api'>PyTuple_GET_SIZE</span>(__pyx_args) != 2) {
          goto __pyx_L5_argtuple_error;
        } else {
          values[0] = <span class='py_macro_api'>PyTuple_GET_ITEM</span>(__pyx_args, 0);
          values[1] = <span class='py_macro_api'>PyTuple_GET_ITEM</span>(__pyx_args, 1);
        }
        __pyx_v_u = values[0];
        __pyx_v_v = values[1];
      }
      goto __pyx_L4_argument_unpacking_done;
      __pyx_L5_argtuple_error:;
      <span class='pyx_c_api'>__Pyx_RaiseArgtupleInvalid</span>("py_mult", 1, 2, 2, <span class='py_macro_api'>PyTuple_GET_SIZE</span>(__pyx_args)); <span class='error_goto'>{__pyx_filename = __pyx_f[0]; __pyx_lineno = 5; __pyx_clineno = __LINE__; goto __pyx_L3_error;}</span>
      __pyx_L3_error:;
      <span class='pyx_c_api'>__Pyx_AddTraceback</span>("_cython_magic_8b0ed1b336ee212d16c30549d84846f5.py_mult", __pyx_clineno, __pyx_lineno, __pyx_filename);
      <span class='refnanny'>__Pyx_RefNannyFinishContext</span>();
      return NULL;
      __pyx_L4_argument_unpacking_done:;
      __pyx_r = __pyx_pf_46_cython_magic_8b0ed1b336ee212d16c30549d84846f5_py_mult(__pyx_self, __pyx_v_u, __pyx_v_v);
      int __pyx_lineno = 0;
      const char *__pyx_filename = NULL;
      int __pyx_clineno = 0;
    
      /* function exit code */
      <span class='refnanny'>__Pyx_RefNannyFinishContext</span>();
      return __pyx_r;
    }
    
    static PyObject *__pyx_pf_46_cython_magic_8b0ed1b336ee212d16c30549d84846f5_py_mult(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_u, PyObject *__pyx_v_v) {
      PyObject *__pyx_v_m = NULL;
      PyObject *__pyx_v_n = NULL;
      PyObject *__pyx_v_p = NULL;
      PyObject *__pyx_v_w = NULL;
      PyObject *__pyx_v_i = NULL;
      PyObject *__pyx_v_j = NULL;
      PyObject *__pyx_v_k = NULL;
      PyObject *__pyx_r = NULL;
      <span class='refnanny'>__Pyx_RefNannyDeclarations</span>
      <span class='refnanny'>__Pyx_RefNannySetupContext</span>("py_mult", 0);
    /* … */
      /* function exit code */
      __pyx_L1_error:;
      <span class='pyx_macro_api'>__Pyx_XDECREF</span>(__pyx_t_1);
      <span class='pyx_macro_api'>__Pyx_XDECREF</span>(__pyx_t_2);
      <span class='pyx_macro_api'>__Pyx_XDECREF</span>(__pyx_t_3);
      <span class='pyx_macro_api'>__Pyx_XDECREF</span>(__pyx_t_4);
      <span class='pyx_macro_api'>__Pyx_XDECREF</span>(__pyx_t_6);
      <span class='pyx_macro_api'>__Pyx_XDECREF</span>(__pyx_t_13);
      <span class='pyx_macro_api'>__Pyx_XDECREF</span>(__pyx_t_14);
      <span class='pyx_macro_api'>__Pyx_XDECREF</span>(__pyx_t_15);
      <span class='pyx_c_api'>__Pyx_AddTraceback</span>("_cython_magic_8b0ed1b336ee212d16c30549d84846f5.py_mult", __pyx_clineno, __pyx_lineno, __pyx_filename);
      __pyx_r = NULL;
      __pyx_L0:;
      <span class='pyx_macro_api'>__Pyx_XDECREF</span>(__pyx_v_m);
      <span class='pyx_macro_api'>__Pyx_XDECREF</span>(__pyx_v_n);
      <span class='pyx_macro_api'>__Pyx_XDECREF</span>(__pyx_v_p);
      <span class='pyx_macro_api'>__Pyx_XDECREF</span>(__pyx_v_w);
      <span class='pyx_macro_api'>__Pyx_XDECREF</span>(__pyx_v_i);
      <span class='pyx_macro_api'>__Pyx_XDECREF</span>(__pyx_v_j);
      <span class='pyx_macro_api'>__Pyx_XDECREF</span>(__pyx_v_k);
      <span class='refnanny'>__Pyx_XGIVEREF</span>(__pyx_r);
      <span class='refnanny'>__Pyx_RefNannyFinishContext</span>();
      return __pyx_r;
    }
    /* … */
      __pyx_tuple__7 = <span class='py_c_api'>PyTuple_Pack</span>(9, __pyx_n_s_u, __pyx_n_s_v, __pyx_n_s_m, __pyx_n_s_n, __pyx_n_s_p, __pyx_n_s_w, __pyx_n_s_i, __pyx_n_s_j, __pyx_n_s_k);<span class='error_goto'> if (unlikely(!__pyx_tuple__7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 5; __pyx_clineno = __LINE__; goto __pyx_L1_error;}</span>
      <span class='refnanny'>__Pyx_GOTREF</span>(__pyx_tuple__7);
      <span class='refnanny'>__Pyx_GIVEREF</span>(__pyx_tuple__7);
    /* … */
      __pyx_t_1 = PyCFunction_NewEx(&amp;__pyx_mdef_46_cython_magic_8b0ed1b336ee212d16c30549d84846f5_1py_mult, NULL, __pyx_n_s_cython_magic_8b0ed1b336ee212d16);<span class='error_goto'> if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 5; __pyx_clineno = __LINE__; goto __pyx_L1_error;}</span>
      <span class='refnanny'>__Pyx_GOTREF</span>(__pyx_t_1);
      if (<span class='py_c_api'>PyDict_SetItem</span>(__pyx_d, __pyx_n_s_py_mult, __pyx_t_1) &lt; 0) <span class='error_goto'>{__pyx_filename = __pyx_f[0]; __pyx_lineno = 5; __pyx_clineno = __LINE__; goto __pyx_L1_error;}</span>
      <span class='pyx_macro_api'>__Pyx_DECREF</span>(__pyx_t_1); __pyx_t_1 = 0;
    </pre><pre class='cython line score-49' onclick='toggleDiv(this)'>+06:     <span class="n">m</span><span class="p">,</span> <span class="n">n</span> <span class="o">=</span> <span class="n">u</span><span class="o">.</span><span class="n">shape</span></pre>
    <pre class='cython code score-49'>  __pyx_t_1 = <span class='pyx_c_api'>__Pyx_PyObject_GetAttrStr</span>(__pyx_v_u, __pyx_n_s_shape);<span class='error_goto'> if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 6; __pyx_clineno = __LINE__; goto __pyx_L1_error;}</span>
      <span class='refnanny'>__Pyx_GOTREF</span>(__pyx_t_1);
      if ((likely(<span class='py_c_api'>PyTuple_CheckExact</span>(__pyx_t_1))) || (<span class='py_c_api'>PyList_CheckExact</span>(__pyx_t_1))) {
        PyObject* sequence = __pyx_t_1;
        #if CYTHON_COMPILING_IN_CPYTHON
        Py_ssize_t size = Py_SIZE(sequence);
        #else
        Py_ssize_t size = <span class='py_c_api'>PySequence_Size</span>(sequence);
        #endif
        if (unlikely(size != 2)) {
          if (size &gt; 2) <span class='pyx_c_api'>__Pyx_RaiseTooManyValuesError</span>(2);
          else if (size &gt;= 0) <span class='pyx_c_api'>__Pyx_RaiseNeedMoreValuesError</span>(size);
          <span class='error_goto'>{__pyx_filename = __pyx_f[0]; __pyx_lineno = 6; __pyx_clineno = __LINE__; goto __pyx_L1_error;}</span>
        }
        #if CYTHON_COMPILING_IN_CPYTHON
        if (likely(<span class='py_c_api'>PyTuple_CheckExact</span>(sequence))) {
          __pyx_t_2 = <span class='py_macro_api'>PyTuple_GET_ITEM</span>(sequence, 0); 
          __pyx_t_3 = <span class='py_macro_api'>PyTuple_GET_ITEM</span>(sequence, 1); 
        } else {
          __pyx_t_2 = <span class='py_macro_api'>PyList_GET_ITEM</span>(sequence, 0); 
          __pyx_t_3 = <span class='py_macro_api'>PyList_GET_ITEM</span>(sequence, 1); 
        }
        <span class='pyx_macro_api'>__Pyx_INCREF</span>(__pyx_t_2);
        <span class='pyx_macro_api'>__Pyx_INCREF</span>(__pyx_t_3);
        #else
        __pyx_t_2 = <span class='py_macro_api'>PySequence_ITEM</span>(sequence, 0);<span class='error_goto'> if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 6; __pyx_clineno = __LINE__; goto __pyx_L1_error;}</span>
        <span class='refnanny'>__Pyx_GOTREF</span>(__pyx_t_2);
        __pyx_t_3 = <span class='py_macro_api'>PySequence_ITEM</span>(sequence, 1);<span class='error_goto'> if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 6; __pyx_clineno = __LINE__; goto __pyx_L1_error;}</span>
        <span class='refnanny'>__Pyx_GOTREF</span>(__pyx_t_3);
        #endif
        <span class='pyx_macro_api'>__Pyx_DECREF</span>(__pyx_t_1); __pyx_t_1 = 0;
      } else {
        Py_ssize_t index = -1;
        __pyx_t_4 = <span class='py_c_api'>PyObject_GetIter</span>(__pyx_t_1);<span class='error_goto'> if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 6; __pyx_clineno = __LINE__; goto __pyx_L1_error;}</span>
        <span class='refnanny'>__Pyx_GOTREF</span>(__pyx_t_4);
        <span class='pyx_macro_api'>__Pyx_DECREF</span>(__pyx_t_1); __pyx_t_1 = 0;
        __pyx_t_5 = Py_TYPE(__pyx_t_4)-&gt;tp_iternext;
        index = 0; __pyx_t_2 = __pyx_t_5(__pyx_t_4); if (unlikely(!__pyx_t_2)) goto __pyx_L3_unpacking_failed;
        <span class='refnanny'>__Pyx_GOTREF</span>(__pyx_t_2);
        index = 1; __pyx_t_3 = __pyx_t_5(__pyx_t_4); if (unlikely(!__pyx_t_3)) goto __pyx_L3_unpacking_failed;
        <span class='refnanny'>__Pyx_GOTREF</span>(__pyx_t_3);
        if (<span class='pyx_c_api'>__Pyx_IternextUnpackEndCheck</span>(__pyx_t_5(__pyx_t_4), 2) &lt; 0) <span class='error_goto'>{__pyx_filename = __pyx_f[0]; __pyx_lineno = 6; __pyx_clineno = __LINE__; goto __pyx_L1_error;}</span>
        __pyx_t_5 = NULL;
        <span class='pyx_macro_api'>__Pyx_DECREF</span>(__pyx_t_4); __pyx_t_4 = 0;
        goto __pyx_L4_unpacking_done;
        __pyx_L3_unpacking_failed:;
        <span class='pyx_macro_api'>__Pyx_DECREF</span>(__pyx_t_4); __pyx_t_4 = 0;
        __pyx_t_5 = NULL;
        if (<span class='pyx_c_api'>__Pyx_IterFinish</span>() == 0) <span class='pyx_c_api'>__Pyx_RaiseNeedMoreValuesError</span>(index);
        <span class='error_goto'>{__pyx_filename = __pyx_f[0]; __pyx_lineno = 6; __pyx_clineno = __LINE__; goto __pyx_L1_error;}</span>
        __pyx_L4_unpacking_done:;
      }
      __pyx_v_m = __pyx_t_2;
      __pyx_t_2 = 0;
      __pyx_v_n = __pyx_t_3;
      __pyx_t_3 = 0;
    </pre><pre class='cython line score-50' onclick='toggleDiv(this)'>+07:     <span class="n">n</span><span class="p">,</span> <span class="n">p</span> <span class="o">=</span> <span class="n">v</span><span class="o">.</span><span class="n">shape</span></pre>
    <pre class='cython code score-50'>  __pyx_t_1 = <span class='pyx_c_api'>__Pyx_PyObject_GetAttrStr</span>(__pyx_v_v, __pyx_n_s_shape);<span class='error_goto'> if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 7; __pyx_clineno = __LINE__; goto __pyx_L1_error;}</span>
      <span class='refnanny'>__Pyx_GOTREF</span>(__pyx_t_1);
      if ((likely(<span class='py_c_api'>PyTuple_CheckExact</span>(__pyx_t_1))) || (<span class='py_c_api'>PyList_CheckExact</span>(__pyx_t_1))) {
        PyObject* sequence = __pyx_t_1;
        #if CYTHON_COMPILING_IN_CPYTHON
        Py_ssize_t size = Py_SIZE(sequence);
        #else
        Py_ssize_t size = <span class='py_c_api'>PySequence_Size</span>(sequence);
        #endif
        if (unlikely(size != 2)) {
          if (size &gt; 2) <span class='pyx_c_api'>__Pyx_RaiseTooManyValuesError</span>(2);
          else if (size &gt;= 0) <span class='pyx_c_api'>__Pyx_RaiseNeedMoreValuesError</span>(size);
          <span class='error_goto'>{__pyx_filename = __pyx_f[0]; __pyx_lineno = 7; __pyx_clineno = __LINE__; goto __pyx_L1_error;}</span>
        }
        #if CYTHON_COMPILING_IN_CPYTHON
        if (likely(<span class='py_c_api'>PyTuple_CheckExact</span>(sequence))) {
          __pyx_t_3 = <span class='py_macro_api'>PyTuple_GET_ITEM</span>(sequence, 0); 
          __pyx_t_2 = <span class='py_macro_api'>PyTuple_GET_ITEM</span>(sequence, 1); 
        } else {
          __pyx_t_3 = <span class='py_macro_api'>PyList_GET_ITEM</span>(sequence, 0); 
          __pyx_t_2 = <span class='py_macro_api'>PyList_GET_ITEM</span>(sequence, 1); 
        }
        <span class='pyx_macro_api'>__Pyx_INCREF</span>(__pyx_t_3);
        <span class='pyx_macro_api'>__Pyx_INCREF</span>(__pyx_t_2);
        #else
        __pyx_t_3 = <span class='py_macro_api'>PySequence_ITEM</span>(sequence, 0);<span class='error_goto'> if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 7; __pyx_clineno = __LINE__; goto __pyx_L1_error;}</span>
        <span class='refnanny'>__Pyx_GOTREF</span>(__pyx_t_3);
        __pyx_t_2 = <span class='py_macro_api'>PySequence_ITEM</span>(sequence, 1);<span class='error_goto'> if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 7; __pyx_clineno = __LINE__; goto __pyx_L1_error;}</span>
        <span class='refnanny'>__Pyx_GOTREF</span>(__pyx_t_2);
        #endif
        <span class='pyx_macro_api'>__Pyx_DECREF</span>(__pyx_t_1); __pyx_t_1 = 0;
      } else {
        Py_ssize_t index = -1;
        __pyx_t_4 = <span class='py_c_api'>PyObject_GetIter</span>(__pyx_t_1);<span class='error_goto'> if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 7; __pyx_clineno = __LINE__; goto __pyx_L1_error;}</span>
        <span class='refnanny'>__Pyx_GOTREF</span>(__pyx_t_4);
        <span class='pyx_macro_api'>__Pyx_DECREF</span>(__pyx_t_1); __pyx_t_1 = 0;
        __pyx_t_5 = Py_TYPE(__pyx_t_4)-&gt;tp_iternext;
        index = 0; __pyx_t_3 = __pyx_t_5(__pyx_t_4); if (unlikely(!__pyx_t_3)) goto __pyx_L5_unpacking_failed;
        <span class='refnanny'>__Pyx_GOTREF</span>(__pyx_t_3);
        index = 1; __pyx_t_2 = __pyx_t_5(__pyx_t_4); if (unlikely(!__pyx_t_2)) goto __pyx_L5_unpacking_failed;
        <span class='refnanny'>__Pyx_GOTREF</span>(__pyx_t_2);
        if (<span class='pyx_c_api'>__Pyx_IternextUnpackEndCheck</span>(__pyx_t_5(__pyx_t_4), 2) &lt; 0) <span class='error_goto'>{__pyx_filename = __pyx_f[0]; __pyx_lineno = 7; __pyx_clineno = __LINE__; goto __pyx_L1_error;}</span>
        __pyx_t_5 = NULL;
        <span class='pyx_macro_api'>__Pyx_DECREF</span>(__pyx_t_4); __pyx_t_4 = 0;
        goto __pyx_L6_unpacking_done;
        __pyx_L5_unpacking_failed:;
        <span class='pyx_macro_api'>__Pyx_DECREF</span>(__pyx_t_4); __pyx_t_4 = 0;
        __pyx_t_5 = NULL;
        if (<span class='pyx_c_api'>__Pyx_IterFinish</span>() == 0) <span class='pyx_c_api'>__Pyx_RaiseNeedMoreValuesError</span>(index);
        <span class='error_goto'>{__pyx_filename = __pyx_f[0]; __pyx_lineno = 7; __pyx_clineno = __LINE__; goto __pyx_L1_error;}</span>
        __pyx_L6_unpacking_done:;
      }
      <span class='pyx_macro_api'>__Pyx_DECREF_SET</span>(__pyx_v_n, __pyx_t_3);
      __pyx_t_3 = 0;
      __pyx_v_p = __pyx_t_2;
      __pyx_t_2 = 0;
    </pre><pre class='cython line score-38' onclick='toggleDiv(this)'>+08:     <span class="n">w</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">zeros</span><span class="p">((</span><span class="n">m</span><span class="p">,</span> <span class="n">p</span><span class="p">))</span></pre>
    <pre class='cython code score-38'>  __pyx_t_2 = <span class='pyx_c_api'>__Pyx_GetModuleGlobalName</span>(__pyx_n_s_np);<span class='error_goto'> if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 8; __pyx_clineno = __LINE__; goto __pyx_L1_error;}</span>
      <span class='refnanny'>__Pyx_GOTREF</span>(__pyx_t_2);
      __pyx_t_3 = <span class='pyx_c_api'>__Pyx_PyObject_GetAttrStr</span>(__pyx_t_2, __pyx_n_s_zeros);<span class='error_goto'> if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 8; __pyx_clineno = __LINE__; goto __pyx_L1_error;}</span>
      <span class='refnanny'>__Pyx_GOTREF</span>(__pyx_t_3);
      <span class='pyx_macro_api'>__Pyx_DECREF</span>(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_2 = <span class='py_c_api'>PyTuple_New</span>(2);<span class='error_goto'> if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 8; __pyx_clineno = __LINE__; goto __pyx_L1_error;}</span>
      <span class='refnanny'>__Pyx_GOTREF</span>(__pyx_t_2);
      <span class='pyx_macro_api'>__Pyx_INCREF</span>(__pyx_v_m);
      <span class='py_macro_api'>PyTuple_SET_ITEM</span>(__pyx_t_2, 0, __pyx_v_m);
      <span class='refnanny'>__Pyx_GIVEREF</span>(__pyx_v_m);
      <span class='pyx_macro_api'>__Pyx_INCREF</span>(__pyx_v_p);
      <span class='py_macro_api'>PyTuple_SET_ITEM</span>(__pyx_t_2, 1, __pyx_v_p);
      <span class='refnanny'>__Pyx_GIVEREF</span>(__pyx_v_p);
      __pyx_t_4 = NULL;
      if (CYTHON_COMPILING_IN_CPYTHON &amp;&amp; unlikely(<span class='py_c_api'>PyMethod_Check</span>(__pyx_t_3))) {
        __pyx_t_4 = <span class='py_macro_api'>PyMethod_GET_SELF</span>(__pyx_t_3);
        if (likely(__pyx_t_4)) {
          PyObject* function = <span class='py_macro_api'>PyMethod_GET_FUNCTION</span>(__pyx_t_3);
          <span class='pyx_macro_api'>__Pyx_INCREF</span>(__pyx_t_4);
          <span class='pyx_macro_api'>__Pyx_INCREF</span>(function);
          <span class='pyx_macro_api'>__Pyx_DECREF_SET</span>(__pyx_t_3, function);
        }
      }
      if (!__pyx_t_4) {
        __pyx_t_1 = <span class='pyx_c_api'>__Pyx_PyObject_CallOneArg</span>(__pyx_t_3, __pyx_t_2);<span class='error_goto'> if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 8; __pyx_clineno = __LINE__; goto __pyx_L1_error;}</span>
        <span class='pyx_macro_api'>__Pyx_DECREF</span>(__pyx_t_2); __pyx_t_2 = 0;
        <span class='refnanny'>__Pyx_GOTREF</span>(__pyx_t_1);
      } else {
        __pyx_t_6 = <span class='py_c_api'>PyTuple_New</span>(1+1);<span class='error_goto'> if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 8; __pyx_clineno = __LINE__; goto __pyx_L1_error;}</span>
        <span class='refnanny'>__Pyx_GOTREF</span>(__pyx_t_6);
        <span class='py_macro_api'>PyTuple_SET_ITEM</span>(__pyx_t_6, 0, __pyx_t_4); <span class='refnanny'>__Pyx_GIVEREF</span>(__pyx_t_4); __pyx_t_4 = NULL;
        <span class='py_macro_api'>PyTuple_SET_ITEM</span>(__pyx_t_6, 0+1, __pyx_t_2);
        <span class='refnanny'>__Pyx_GIVEREF</span>(__pyx_t_2);
        __pyx_t_2 = 0;
        __pyx_t_1 = <span class='pyx_c_api'>__Pyx_PyObject_Call</span>(__pyx_t_3, __pyx_t_6, NULL);<span class='error_goto'> if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 8; __pyx_clineno = __LINE__; goto __pyx_L1_error;}</span>
        <span class='refnanny'>__Pyx_GOTREF</span>(__pyx_t_1);
        <span class='pyx_macro_api'>__Pyx_DECREF</span>(__pyx_t_6); __pyx_t_6 = 0;
      }
      <span class='pyx_macro_api'>__Pyx_DECREF</span>(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_v_w = __pyx_t_1;
      __pyx_t_1 = 0;
    </pre><pre class='cython line score-57' onclick='toggleDiv(this)'>+09:     <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">m</span><span class="p">):</span></pre>
    <pre class='cython code score-57'>  __pyx_t_1 = <span class='py_c_api'>PyTuple_New</span>(1);<span class='error_goto'> if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 9; __pyx_clineno = __LINE__; goto __pyx_L1_error;}</span>
      <span class='refnanny'>__Pyx_GOTREF</span>(__pyx_t_1);
      <span class='pyx_macro_api'>__Pyx_INCREF</span>(__pyx_v_m);
      <span class='py_macro_api'>PyTuple_SET_ITEM</span>(__pyx_t_1, 0, __pyx_v_m);
      <span class='refnanny'>__Pyx_GIVEREF</span>(__pyx_v_m);
      __pyx_t_3 = <span class='pyx_c_api'>__Pyx_PyObject_Call</span>(__pyx_builtin_range, __pyx_t_1, NULL);<span class='error_goto'> if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 9; __pyx_clineno = __LINE__; goto __pyx_L1_error;}</span>
      <span class='refnanny'>__Pyx_GOTREF</span>(__pyx_t_3);
      <span class='pyx_macro_api'>__Pyx_DECREF</span>(__pyx_t_1); __pyx_t_1 = 0;
      if (likely(<span class='py_c_api'>PyList_CheckExact</span>(__pyx_t_3)) || <span class='py_c_api'>PyTuple_CheckExact</span>(__pyx_t_3)) {
        __pyx_t_1 = __pyx_t_3; <span class='pyx_macro_api'>__Pyx_INCREF</span>(__pyx_t_1); __pyx_t_7 = 0;
        __pyx_t_8 = NULL;
      } else {
        __pyx_t_7 = -1; __pyx_t_1 = <span class='py_c_api'>PyObject_GetIter</span>(__pyx_t_3);<span class='error_goto'> if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 9; __pyx_clineno = __LINE__; goto __pyx_L1_error;}</span>
        <span class='refnanny'>__Pyx_GOTREF</span>(__pyx_t_1);
        __pyx_t_8 = Py_TYPE(__pyx_t_1)-&gt;tp_iternext;<span class='error_goto'> if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 9; __pyx_clineno = __LINE__; goto __pyx_L1_error;}</span>
      }
      <span class='pyx_macro_api'>__Pyx_DECREF</span>(__pyx_t_3); __pyx_t_3 = 0;
      for (;;) {
        if (likely(!__pyx_t_8)) {
          if (likely(<span class='py_c_api'>PyList_CheckExact</span>(__pyx_t_1))) {
            if (__pyx_t_7 &gt;= <span class='py_macro_api'>PyList_GET_SIZE</span>(__pyx_t_1)) break;
            #if CYTHON_COMPILING_IN_CPYTHON
            __pyx_t_3 = <span class='py_macro_api'>PyList_GET_ITEM</span>(__pyx_t_1, __pyx_t_7); <span class='pyx_macro_api'>__Pyx_INCREF</span>(__pyx_t_3); __pyx_t_7++;<span class='error_goto'> if (unlikely(0 &lt; 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 9; __pyx_clineno = __LINE__; goto __pyx_L1_error;}</span>
            #else
            __pyx_t_3 = <span class='py_macro_api'>PySequence_ITEM</span>(__pyx_t_1, __pyx_t_7); __pyx_t_7++;<span class='error_goto'> if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 9; __pyx_clineno = __LINE__; goto __pyx_L1_error;}</span>
            #endif
          } else {
            if (__pyx_t_7 &gt;= <span class='py_macro_api'>PyTuple_GET_SIZE</span>(__pyx_t_1)) break;
            #if CYTHON_COMPILING_IN_CPYTHON
            __pyx_t_3 = <span class='py_macro_api'>PyTuple_GET_ITEM</span>(__pyx_t_1, __pyx_t_7); <span class='pyx_macro_api'>__Pyx_INCREF</span>(__pyx_t_3); __pyx_t_7++;<span class='error_goto'> if (unlikely(0 &lt; 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 9; __pyx_clineno = __LINE__; goto __pyx_L1_error;}</span>
            #else
            __pyx_t_3 = <span class='py_macro_api'>PySequence_ITEM</span>(__pyx_t_1, __pyx_t_7); __pyx_t_7++;<span class='error_goto'> if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 9; __pyx_clineno = __LINE__; goto __pyx_L1_error;}</span>
            #endif
          }
        } else {
          __pyx_t_3 = __pyx_t_8(__pyx_t_1);
          if (unlikely(!__pyx_t_3)) {
            PyObject* exc_type = <span class='py_c_api'>PyErr_Occurred</span>();
            if (exc_type) {
              if (likely(exc_type == PyExc_StopIteration || <span class='py_c_api'>PyErr_GivenExceptionMatches</span>(exc_type, PyExc_StopIteration))) <span class='py_c_api'>PyErr_Clear</span>();
              else <span class='error_goto'>{__pyx_filename = __pyx_f[0]; __pyx_lineno = 9; __pyx_clineno = __LINE__; goto __pyx_L1_error;}</span>
            }
            break;
          }
          <span class='refnanny'>__Pyx_GOTREF</span>(__pyx_t_3);
        }
        <span class='pyx_macro_api'>__Pyx_XDECREF_SET</span>(__pyx_v_i, __pyx_t_3);
        __pyx_t_3 = 0;
    /* … */
      }
      <span class='pyx_macro_api'>__Pyx_DECREF</span>(__pyx_t_1); __pyx_t_1 = 0;
    </pre><pre class='cython line score-57' onclick='toggleDiv(this)'>+10:         <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">p</span><span class="p">):</span></pre>
    <pre class='cython code score-57'>    __pyx_t_3 = <span class='py_c_api'>PyTuple_New</span>(1);<span class='error_goto'> if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 10; __pyx_clineno = __LINE__; goto __pyx_L1_error;}</span>
        <span class='refnanny'>__Pyx_GOTREF</span>(__pyx_t_3);
        <span class='pyx_macro_api'>__Pyx_INCREF</span>(__pyx_v_p);
        <span class='py_macro_api'>PyTuple_SET_ITEM</span>(__pyx_t_3, 0, __pyx_v_p);
        <span class='refnanny'>__Pyx_GIVEREF</span>(__pyx_v_p);
        __pyx_t_6 = <span class='pyx_c_api'>__Pyx_PyObject_Call</span>(__pyx_builtin_range, __pyx_t_3, NULL);<span class='error_goto'> if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 10; __pyx_clineno = __LINE__; goto __pyx_L1_error;}</span>
        <span class='refnanny'>__Pyx_GOTREF</span>(__pyx_t_6);
        <span class='pyx_macro_api'>__Pyx_DECREF</span>(__pyx_t_3); __pyx_t_3 = 0;
        if (likely(<span class='py_c_api'>PyList_CheckExact</span>(__pyx_t_6)) || <span class='py_c_api'>PyTuple_CheckExact</span>(__pyx_t_6)) {
          __pyx_t_3 = __pyx_t_6; <span class='pyx_macro_api'>__Pyx_INCREF</span>(__pyx_t_3); __pyx_t_9 = 0;
          __pyx_t_10 = NULL;
        } else {
          __pyx_t_9 = -1; __pyx_t_3 = <span class='py_c_api'>PyObject_GetIter</span>(__pyx_t_6);<span class='error_goto'> if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 10; __pyx_clineno = __LINE__; goto __pyx_L1_error;}</span>
          <span class='refnanny'>__Pyx_GOTREF</span>(__pyx_t_3);
          __pyx_t_10 = Py_TYPE(__pyx_t_3)-&gt;tp_iternext;<span class='error_goto'> if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 10; __pyx_clineno = __LINE__; goto __pyx_L1_error;}</span>
        }
        <span class='pyx_macro_api'>__Pyx_DECREF</span>(__pyx_t_6); __pyx_t_6 = 0;
        for (;;) {
          if (likely(!__pyx_t_10)) {
            if (likely(<span class='py_c_api'>PyList_CheckExact</span>(__pyx_t_3))) {
              if (__pyx_t_9 &gt;= <span class='py_macro_api'>PyList_GET_SIZE</span>(__pyx_t_3)) break;
              #if CYTHON_COMPILING_IN_CPYTHON
              __pyx_t_6 = <span class='py_macro_api'>PyList_GET_ITEM</span>(__pyx_t_3, __pyx_t_9); <span class='pyx_macro_api'>__Pyx_INCREF</span>(__pyx_t_6); __pyx_t_9++;<span class='error_goto'> if (unlikely(0 &lt; 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 10; __pyx_clineno = __LINE__; goto __pyx_L1_error;}</span>
              #else
              __pyx_t_6 = <span class='py_macro_api'>PySequence_ITEM</span>(__pyx_t_3, __pyx_t_9); __pyx_t_9++;<span class='error_goto'> if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 10; __pyx_clineno = __LINE__; goto __pyx_L1_error;}</span>
              #endif
            } else {
              if (__pyx_t_9 &gt;= <span class='py_macro_api'>PyTuple_GET_SIZE</span>(__pyx_t_3)) break;
              #if CYTHON_COMPILING_IN_CPYTHON
              __pyx_t_6 = <span class='py_macro_api'>PyTuple_GET_ITEM</span>(__pyx_t_3, __pyx_t_9); <span class='pyx_macro_api'>__Pyx_INCREF</span>(__pyx_t_6); __pyx_t_9++;<span class='error_goto'> if (unlikely(0 &lt; 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 10; __pyx_clineno = __LINE__; goto __pyx_L1_error;}</span>
              #else
              __pyx_t_6 = <span class='py_macro_api'>PySequence_ITEM</span>(__pyx_t_3, __pyx_t_9); __pyx_t_9++;<span class='error_goto'> if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 10; __pyx_clineno = __LINE__; goto __pyx_L1_error;}</span>
              #endif
            }
          } else {
            __pyx_t_6 = __pyx_t_10(__pyx_t_3);
            if (unlikely(!__pyx_t_6)) {
              PyObject* exc_type = <span class='py_c_api'>PyErr_Occurred</span>();
              if (exc_type) {
                if (likely(exc_type == PyExc_StopIteration || <span class='py_c_api'>PyErr_GivenExceptionMatches</span>(exc_type, PyExc_StopIteration))) <span class='py_c_api'>PyErr_Clear</span>();
                else <span class='error_goto'>{__pyx_filename = __pyx_f[0]; __pyx_lineno = 10; __pyx_clineno = __LINE__; goto __pyx_L1_error;}</span>
              }
              break;
            }
            <span class='refnanny'>__Pyx_GOTREF</span>(__pyx_t_6);
          }
          <span class='pyx_macro_api'>__Pyx_XDECREF_SET</span>(__pyx_v_j, __pyx_t_6);
          __pyx_t_6 = 0;
    /* … */
        }
        <span class='pyx_macro_api'>__Pyx_DECREF</span>(__pyx_t_3); __pyx_t_3 = 0;
    </pre><pre class='cython line score-57' onclick='toggleDiv(this)'>+11:             <span class="k">for</span> <span class="n">k</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">n</span><span class="p">):</span></pre>
    <pre class='cython code score-57'>      __pyx_t_6 = <span class='py_c_api'>PyTuple_New</span>(1);<span class='error_goto'> if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 11; __pyx_clineno = __LINE__; goto __pyx_L1_error;}</span>
          <span class='refnanny'>__Pyx_GOTREF</span>(__pyx_t_6);
          <span class='pyx_macro_api'>__Pyx_INCREF</span>(__pyx_v_n);
          <span class='py_macro_api'>PyTuple_SET_ITEM</span>(__pyx_t_6, 0, __pyx_v_n);
          <span class='refnanny'>__Pyx_GIVEREF</span>(__pyx_v_n);
          __pyx_t_2 = <span class='pyx_c_api'>__Pyx_PyObject_Call</span>(__pyx_builtin_range, __pyx_t_6, NULL);<span class='error_goto'> if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 11; __pyx_clineno = __LINE__; goto __pyx_L1_error;}</span>
          <span class='refnanny'>__Pyx_GOTREF</span>(__pyx_t_2);
          <span class='pyx_macro_api'>__Pyx_DECREF</span>(__pyx_t_6); __pyx_t_6 = 0;
          if (likely(<span class='py_c_api'>PyList_CheckExact</span>(__pyx_t_2)) || <span class='py_c_api'>PyTuple_CheckExact</span>(__pyx_t_2)) {
            __pyx_t_6 = __pyx_t_2; <span class='pyx_macro_api'>__Pyx_INCREF</span>(__pyx_t_6); __pyx_t_11 = 0;
            __pyx_t_12 = NULL;
          } else {
            __pyx_t_11 = -1; __pyx_t_6 = <span class='py_c_api'>PyObject_GetIter</span>(__pyx_t_2);<span class='error_goto'> if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 11; __pyx_clineno = __LINE__; goto __pyx_L1_error;}</span>
            <span class='refnanny'>__Pyx_GOTREF</span>(__pyx_t_6);
            __pyx_t_12 = Py_TYPE(__pyx_t_6)-&gt;tp_iternext;<span class='error_goto'> if (unlikely(!__pyx_t_12)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 11; __pyx_clineno = __LINE__; goto __pyx_L1_error;}</span>
          }
          <span class='pyx_macro_api'>__Pyx_DECREF</span>(__pyx_t_2); __pyx_t_2 = 0;
          for (;;) {
            if (likely(!__pyx_t_12)) {
              if (likely(<span class='py_c_api'>PyList_CheckExact</span>(__pyx_t_6))) {
                if (__pyx_t_11 &gt;= <span class='py_macro_api'>PyList_GET_SIZE</span>(__pyx_t_6)) break;
                #if CYTHON_COMPILING_IN_CPYTHON
                __pyx_t_2 = <span class='py_macro_api'>PyList_GET_ITEM</span>(__pyx_t_6, __pyx_t_11); <span class='pyx_macro_api'>__Pyx_INCREF</span>(__pyx_t_2); __pyx_t_11++;<span class='error_goto'> if (unlikely(0 &lt; 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 11; __pyx_clineno = __LINE__; goto __pyx_L1_error;}</span>
                #else
                __pyx_t_2 = <span class='py_macro_api'>PySequence_ITEM</span>(__pyx_t_6, __pyx_t_11); __pyx_t_11++;<span class='error_goto'> if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 11; __pyx_clineno = __LINE__; goto __pyx_L1_error;}</span>
                #endif
              } else {
                if (__pyx_t_11 &gt;= <span class='py_macro_api'>PyTuple_GET_SIZE</span>(__pyx_t_6)) break;
                #if CYTHON_COMPILING_IN_CPYTHON
                __pyx_t_2 = <span class='py_macro_api'>PyTuple_GET_ITEM</span>(__pyx_t_6, __pyx_t_11); <span class='pyx_macro_api'>__Pyx_INCREF</span>(__pyx_t_2); __pyx_t_11++;<span class='error_goto'> if (unlikely(0 &lt; 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 11; __pyx_clineno = __LINE__; goto __pyx_L1_error;}</span>
                #else
                __pyx_t_2 = <span class='py_macro_api'>PySequence_ITEM</span>(__pyx_t_6, __pyx_t_11); __pyx_t_11++;<span class='error_goto'> if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 11; __pyx_clineno = __LINE__; goto __pyx_L1_error;}</span>
                #endif
              }
            } else {
              __pyx_t_2 = __pyx_t_12(__pyx_t_6);
              if (unlikely(!__pyx_t_2)) {
                PyObject* exc_type = <span class='py_c_api'>PyErr_Occurred</span>();
                if (exc_type) {
                  if (likely(exc_type == PyExc_StopIteration || <span class='py_c_api'>PyErr_GivenExceptionMatches</span>(exc_type, PyExc_StopIteration))) <span class='py_c_api'>PyErr_Clear</span>();
                  else <span class='error_goto'>{__pyx_filename = __pyx_f[0]; __pyx_lineno = 11; __pyx_clineno = __LINE__; goto __pyx_L1_error;}</span>
                }
                break;
              }
              <span class='refnanny'>__Pyx_GOTREF</span>(__pyx_t_2);
            }
            <span class='pyx_macro_api'>__Pyx_XDECREF_SET</span>(__pyx_v_k, __pyx_t_2);
            __pyx_t_2 = 0;
    /* … */
          }
          <span class='pyx_macro_api'>__Pyx_DECREF</span>(__pyx_t_6); __pyx_t_6 = 0;
    </pre><pre class='cython line score-65' onclick='toggleDiv(this)'>+12:                 <span class="n">w</span><span class="p">[</span><span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">]</span> <span class="o">+=</span> <span class="n">u</span><span class="p">[</span><span class="n">i</span><span class="p">,</span> <span class="n">k</span><span class="p">]</span> <span class="o">*</span> <span class="n">v</span><span class="p">[</span><span class="n">k</span><span class="p">,</span> <span class="n">j</span><span class="p">]</span></pre>
    <pre class='cython code score-65'>        __pyx_t_2 = <span class='py_c_api'>PyTuple_New</span>(2);<span class='error_goto'> if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 12; __pyx_clineno = __LINE__; goto __pyx_L1_error;}</span>
            <span class='refnanny'>__Pyx_GOTREF</span>(__pyx_t_2);
            <span class='pyx_macro_api'>__Pyx_INCREF</span>(__pyx_v_i);
            <span class='py_macro_api'>PyTuple_SET_ITEM</span>(__pyx_t_2, 0, __pyx_v_i);
            <span class='refnanny'>__Pyx_GIVEREF</span>(__pyx_v_i);
            <span class='pyx_macro_api'>__Pyx_INCREF</span>(__pyx_v_j);
            <span class='py_macro_api'>PyTuple_SET_ITEM</span>(__pyx_t_2, 1, __pyx_v_j);
            <span class='refnanny'>__Pyx_GIVEREF</span>(__pyx_v_j);
            __pyx_t_4 = <span class='py_c_api'>PyObject_GetItem</span>(__pyx_v_w, __pyx_t_2);<span class='error_goto'> if (unlikely(__pyx_t_4 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 12; __pyx_clineno = __LINE__; goto __pyx_L1_error;}</span>;
            <span class='refnanny'>__Pyx_GOTREF</span>(__pyx_t_4);
            __pyx_t_13 = <span class='py_c_api'>PyTuple_New</span>(2);<span class='error_goto'> if (unlikely(!__pyx_t_13)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 12; __pyx_clineno = __LINE__; goto __pyx_L1_error;}</span>
            <span class='refnanny'>__Pyx_GOTREF</span>(__pyx_t_13);
            <span class='pyx_macro_api'>__Pyx_INCREF</span>(__pyx_v_i);
            <span class='py_macro_api'>PyTuple_SET_ITEM</span>(__pyx_t_13, 0, __pyx_v_i);
            <span class='refnanny'>__Pyx_GIVEREF</span>(__pyx_v_i);
            <span class='pyx_macro_api'>__Pyx_INCREF</span>(__pyx_v_k);
            <span class='py_macro_api'>PyTuple_SET_ITEM</span>(__pyx_t_13, 1, __pyx_v_k);
            <span class='refnanny'>__Pyx_GIVEREF</span>(__pyx_v_k);
            __pyx_t_14 = <span class='py_c_api'>PyObject_GetItem</span>(__pyx_v_u, __pyx_t_13);<span class='error_goto'> if (unlikely(__pyx_t_14 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 12; __pyx_clineno = __LINE__; goto __pyx_L1_error;}</span>;
            <span class='refnanny'>__Pyx_GOTREF</span>(__pyx_t_14);
            <span class='pyx_macro_api'>__Pyx_DECREF</span>(__pyx_t_13); __pyx_t_13 = 0;
            __pyx_t_13 = <span class='py_c_api'>PyTuple_New</span>(2);<span class='error_goto'> if (unlikely(!__pyx_t_13)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 12; __pyx_clineno = __LINE__; goto __pyx_L1_error;}</span>
            <span class='refnanny'>__Pyx_GOTREF</span>(__pyx_t_13);
            <span class='pyx_macro_api'>__Pyx_INCREF</span>(__pyx_v_k);
            <span class='py_macro_api'>PyTuple_SET_ITEM</span>(__pyx_t_13, 0, __pyx_v_k);
            <span class='refnanny'>__Pyx_GIVEREF</span>(__pyx_v_k);
            <span class='pyx_macro_api'>__Pyx_INCREF</span>(__pyx_v_j);
            <span class='py_macro_api'>PyTuple_SET_ITEM</span>(__pyx_t_13, 1, __pyx_v_j);
            <span class='refnanny'>__Pyx_GIVEREF</span>(__pyx_v_j);
            __pyx_t_15 = <span class='py_c_api'>PyObject_GetItem</span>(__pyx_v_v, __pyx_t_13);<span class='error_goto'> if (unlikely(__pyx_t_15 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 12; __pyx_clineno = __LINE__; goto __pyx_L1_error;}</span>;
            <span class='refnanny'>__Pyx_GOTREF</span>(__pyx_t_15);
            <span class='pyx_macro_api'>__Pyx_DECREF</span>(__pyx_t_13); __pyx_t_13 = 0;
            __pyx_t_13 = <span class='py_c_api'>PyNumber_Multiply</span>(__pyx_t_14, __pyx_t_15);<span class='error_goto'> if (unlikely(!__pyx_t_13)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 12; __pyx_clineno = __LINE__; goto __pyx_L1_error;}</span>
            <span class='refnanny'>__Pyx_GOTREF</span>(__pyx_t_13);
            <span class='pyx_macro_api'>__Pyx_DECREF</span>(__pyx_t_14); __pyx_t_14 = 0;
            <span class='pyx_macro_api'>__Pyx_DECREF</span>(__pyx_t_15); __pyx_t_15 = 0;
            __pyx_t_15 = <span class='py_c_api'>PyNumber_InPlaceAdd</span>(__pyx_t_4, __pyx_t_13);<span class='error_goto'> if (unlikely(!__pyx_t_15)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 12; __pyx_clineno = __LINE__; goto __pyx_L1_error;}</span>
            <span class='refnanny'>__Pyx_GOTREF</span>(__pyx_t_15);
            <span class='pyx_macro_api'>__Pyx_DECREF</span>(__pyx_t_4); __pyx_t_4 = 0;
            <span class='pyx_macro_api'>__Pyx_DECREF</span>(__pyx_t_13); __pyx_t_13 = 0;
            if (unlikely(<span class='py_c_api'>PyObject_SetItem</span>(__pyx_v_w, __pyx_t_2, __pyx_t_15) &lt; 0)) <span class='error_goto'>{__pyx_filename = __pyx_f[0]; __pyx_lineno = 12; __pyx_clineno = __LINE__; goto __pyx_L1_error;}</span>
            <span class='pyx_macro_api'>__Pyx_DECREF</span>(__pyx_t_15); __pyx_t_15 = 0;
            <span class='pyx_macro_api'>__Pyx_DECREF</span>(__pyx_t_2); __pyx_t_2 = 0;
    </pre><pre class='cython line score-2' onclick='toggleDiv(this)'>+13:     <span class="k">return</span> <span class="n">w</span></pre>
    <pre class='cython code score-2'>  <span class='pyx_macro_api'>__Pyx_XDECREF</span>(__pyx_r);
      <span class='pyx_macro_api'>__Pyx_INCREF</span>(__pyx_v_w);
      __pyx_r = __pyx_v_w;
      goto __pyx_L0;
    </pre></div></body></html>



.. code:: python

    @jit
    def numba_mult(u, v):
        m, n = u.shape
        n, p = v.shape
        w = np.zeros((m, p))
        for i in range(m):
            for j in range(p):
                for k in range(n):
                    w[i, j] += u[i, k] * v[k, j]
        return w   

.. code:: python

    %%cython -a
    import numpy as np
    cimport numpy as np
    
    cimport cython
    @cython.boundscheck(False)
    @cython.wraparound(False)
    def cy_mult(double[:,::1] u, double[:,::1] v):
        m = u.shape[0]
        n = u.shape[1]
        p = v.shape[1]
        
        cdef int i, j, k
        cdef double[:,::1] w = np.zeros((m, p), dtype=np.float64)
        for i in range(m):
            for j in range(p):
                for k in range(n):
                    w[i, j] += u[i, k] * v[k, j]
        return np.asarray(w)




.. raw:: html

    <!DOCTYPE html>
    <!-- Generated by Cython 0.22 -->
    <html>
    <head>
        <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
        <style type="text/css">
        
    body.cython { font-family: courier; font-size: 12; }
    
    .cython.tag  {  }
    .cython.line { margin: 0em }
    .cython.code  { font-size: 9; color: #444444; display: none; margin: 0px 0px 0px 20px;  }
    
    .cython.code .py_c_api  { color: red; }
    .cython.code .py_macro_api  { color: #FF7000; }
    .cython.code .pyx_c_api  { color: #FF3000; }
    .cython.code .pyx_macro_api  { color: #FF7000; }
    .cython.code .refnanny  { color: #FFA000; }
    .cython.code .error_goto  { color: #FFA000; }
    
    .cython.code .coerce  { color: #008000; border: 1px dotted #008000 }
    .cython.code .py_attr { color: #FF0000; font-weight: bold; }
    .cython.code .c_attr  { color: #0000FF; }
    .cython.code .py_call { color: #FF0000; font-weight: bold; }
    .cython.code .c_call  { color: #0000FF; }
    
    .cython.score-0 {background-color: #FFFFff;}
    .cython.score-1 {background-color: #FFFFe7;}
    .cython.score-2 {background-color: #FFFFd4;}
    .cython.score-3 {background-color: #FFFFc4;}
    .cython.score-4 {background-color: #FFFFb6;}
    .cython.score-5 {background-color: #FFFFaa;}
    .cython.score-6 {background-color: #FFFF9f;}
    .cython.score-7 {background-color: #FFFF96;}
    .cython.score-8 {background-color: #FFFF8d;}
    .cython.score-9 {background-color: #FFFF86;}
    .cython.score-10 {background-color: #FFFF7f;}
    .cython.score-11 {background-color: #FFFF79;}
    .cython.score-12 {background-color: #FFFF73;}
    .cython.score-13 {background-color: #FFFF6e;}
    .cython.score-14 {background-color: #FFFF6a;}
    .cython.score-15 {background-color: #FFFF66;}
    .cython.score-16 {background-color: #FFFF62;}
    .cython.score-17 {background-color: #FFFF5e;}
    .cython.score-18 {background-color: #FFFF5b;}
    .cython.score-19 {background-color: #FFFF57;}
    .cython.score-20 {background-color: #FFFF55;}
    .cython.score-21 {background-color: #FFFF52;}
    .cython.score-22 {background-color: #FFFF4f;}
    .cython.score-23 {background-color: #FFFF4d;}
    .cython.score-24 {background-color: #FFFF4b;}
    .cython.score-25 {background-color: #FFFF48;}
    .cython.score-26 {background-color: #FFFF46;}
    .cython.score-27 {background-color: #FFFF44;}
    .cython.score-28 {background-color: #FFFF43;}
    .cython.score-29 {background-color: #FFFF41;}
    .cython.score-30 {background-color: #FFFF3f;}
    .cython.score-31 {background-color: #FFFF3e;}
    .cython.score-32 {background-color: #FFFF3c;}
    .cython.score-33 {background-color: #FFFF3b;}
    .cython.score-34 {background-color: #FFFF39;}
    .cython.score-35 {background-color: #FFFF38;}
    .cython.score-36 {background-color: #FFFF37;}
    .cython.score-37 {background-color: #FFFF36;}
    .cython.score-38 {background-color: #FFFF35;}
    .cython.score-39 {background-color: #FFFF34;}
    .cython.score-40 {background-color: #FFFF33;}
    .cython.score-41 {background-color: #FFFF32;}
    .cython.score-42 {background-color: #FFFF31;}
    .cython.score-43 {background-color: #FFFF30;}
    .cython.score-44 {background-color: #FFFF2f;}
    .cython.score-45 {background-color: #FFFF2e;}
    .cython.score-46 {background-color: #FFFF2d;}
    .cython.score-47 {background-color: #FFFF2c;}
    .cython.score-48 {background-color: #FFFF2b;}
    .cython.score-49 {background-color: #FFFF2b;}
    .cython.score-50 {background-color: #FFFF2a;}
    .cython.score-51 {background-color: #FFFF29;}
    .cython.score-52 {background-color: #FFFF29;}
    .cython.score-53 {background-color: #FFFF28;}
    .cython.score-54 {background-color: #FFFF27;}
    .cython.score-55 {background-color: #FFFF27;}
    .cython.score-56 {background-color: #FFFF26;}
    .cython.score-57 {background-color: #FFFF26;}
    .cython.score-58 {background-color: #FFFF25;}
    .cython.score-59 {background-color: #FFFF24;}
    .cython.score-60 {background-color: #FFFF24;}
    .cython.score-61 {background-color: #FFFF23;}
    .cython.score-62 {background-color: #FFFF23;}
    .cython.score-63 {background-color: #FFFF22;}
    .cython.score-64 {background-color: #FFFF22;}
    .cython.score-65 {background-color: #FFFF22;}
    .cython.score-66 {background-color: #FFFF21;}
    .cython.score-67 {background-color: #FFFF21;}
    .cython.score-68 {background-color: #FFFF20;}
    .cython.score-69 {background-color: #FFFF20;}
    .cython.score-70 {background-color: #FFFF1f;}
    .cython.score-71 {background-color: #FFFF1f;}
    .cython.score-72 {background-color: #FFFF1f;}
    .cython.score-73 {background-color: #FFFF1e;}
    .cython.score-74 {background-color: #FFFF1e;}
    .cython.score-75 {background-color: #FFFF1e;}
    .cython.score-76 {background-color: #FFFF1d;}
    .cython.score-77 {background-color: #FFFF1d;}
    .cython.score-78 {background-color: #FFFF1c;}
    .cython.score-79 {background-color: #FFFF1c;}
    .cython.score-80 {background-color: #FFFF1c;}
    .cython.score-81 {background-color: #FFFF1c;}
    .cython.score-82 {background-color: #FFFF1b;}
    .cython.score-83 {background-color: #FFFF1b;}
    .cython.score-84 {background-color: #FFFF1b;}
    .cython.score-85 {background-color: #FFFF1a;}
    .cython.score-86 {background-color: #FFFF1a;}
    .cython.score-87 {background-color: #FFFF1a;}
    .cython.score-88 {background-color: #FFFF1a;}
    .cython.score-89 {background-color: #FFFF19;}
    .cython.score-90 {background-color: #FFFF19;}
    .cython.score-91 {background-color: #FFFF19;}
    .cython.score-92 {background-color: #FFFF19;}
    .cython.score-93 {background-color: #FFFF18;}
    .cython.score-94 {background-color: #FFFF18;}
    .cython.score-95 {background-color: #FFFF18;}
    .cython.score-96 {background-color: #FFFF18;}
    .cython.score-97 {background-color: #FFFF17;}
    .cython.score-98 {background-color: #FFFF17;}
    .cython.score-99 {background-color: #FFFF17;}
    .cython.score-100 {background-color: #FFFF17;}
    .cython.score-101 {background-color: #FFFF16;}
    .cython.score-102 {background-color: #FFFF16;}
    .cython.score-103 {background-color: #FFFF16;}
    .cython.score-104 {background-color: #FFFF16;}
    .cython.score-105 {background-color: #FFFF16;}
    .cython.score-106 {background-color: #FFFF15;}
    .cython.score-107 {background-color: #FFFF15;}
    .cython.score-108 {background-color: #FFFF15;}
    .cython.score-109 {background-color: #FFFF15;}
    .cython.score-110 {background-color: #FFFF15;}
    .cython.score-111 {background-color: #FFFF15;}
    .cython.score-112 {background-color: #FFFF14;}
    .cython.score-113 {background-color: #FFFF14;}
    .cython.score-114 {background-color: #FFFF14;}
    .cython.score-115 {background-color: #FFFF14;}
    .cython.score-116 {background-color: #FFFF14;}
    .cython.score-117 {background-color: #FFFF14;}
    .cython.score-118 {background-color: #FFFF13;}
    .cython.score-119 {background-color: #FFFF13;}
    .cython.score-120 {background-color: #FFFF13;}
    .cython.score-121 {background-color: #FFFF13;}
    .cython.score-122 {background-color: #FFFF13;}
    .cython.score-123 {background-color: #FFFF13;}
    .cython.score-124 {background-color: #FFFF13;}
    .cython.score-125 {background-color: #FFFF12;}
    .cython.score-126 {background-color: #FFFF12;}
    .cython.score-127 {background-color: #FFFF12;}
    .cython.score-128 {background-color: #FFFF12;}
    .cython.score-129 {background-color: #FFFF12;}
    .cython.score-130 {background-color: #FFFF12;}
    .cython.score-131 {background-color: #FFFF12;}
    .cython.score-132 {background-color: #FFFF11;}
    .cython.score-133 {background-color: #FFFF11;}
    .cython.score-134 {background-color: #FFFF11;}
    .cython.score-135 {background-color: #FFFF11;}
    .cython.score-136 {background-color: #FFFF11;}
    .cython.score-137 {background-color: #FFFF11;}
    .cython.score-138 {background-color: #FFFF11;}
    .cython.score-139 {background-color: #FFFF11;}
    .cython.score-140 {background-color: #FFFF11;}
    .cython.score-141 {background-color: #FFFF10;}
    .cython.score-142 {background-color: #FFFF10;}
    .cython.score-143 {background-color: #FFFF10;}
    .cython.score-144 {background-color: #FFFF10;}
    .cython.score-145 {background-color: #FFFF10;}
    .cython.score-146 {background-color: #FFFF10;}
    .cython.score-147 {background-color: #FFFF10;}
    .cython.score-148 {background-color: #FFFF10;}
    .cython.score-149 {background-color: #FFFF10;}
    .cython.score-150 {background-color: #FFFF0f;}
    .cython.score-151 {background-color: #FFFF0f;}
    .cython.score-152 {background-color: #FFFF0f;}
    .cython.score-153 {background-color: #FFFF0f;}
    .cython.score-154 {background-color: #FFFF0f;}
    .cython.score-155 {background-color: #FFFF0f;}
    .cython.score-156 {background-color: #FFFF0f;}
    .cython.score-157 {background-color: #FFFF0f;}
    .cython.score-158 {background-color: #FFFF0f;}
    .cython.score-159 {background-color: #FFFF0f;}
    .cython.score-160 {background-color: #FFFF0f;}
    .cython.score-161 {background-color: #FFFF0e;}
    .cython.score-162 {background-color: #FFFF0e;}
    .cython.score-163 {background-color: #FFFF0e;}
    .cython.score-164 {background-color: #FFFF0e;}
    .cython.score-165 {background-color: #FFFF0e;}
    .cython.score-166 {background-color: #FFFF0e;}
    .cython.score-167 {background-color: #FFFF0e;}
    .cython.score-168 {background-color: #FFFF0e;}
    .cython.score-169 {background-color: #FFFF0e;}
    .cython.score-170 {background-color: #FFFF0e;}
    .cython.score-171 {background-color: #FFFF0e;}
    .cython.score-172 {background-color: #FFFF0e;}
    .cython.score-173 {background-color: #FFFF0d;}
    .cython.score-174 {background-color: #FFFF0d;}
    .cython.score-175 {background-color: #FFFF0d;}
    .cython.score-176 {background-color: #FFFF0d;}
    .cython.score-177 {background-color: #FFFF0d;}
    .cython.score-178 {background-color: #FFFF0d;}
    .cython.score-179 {background-color: #FFFF0d;}
    .cython.score-180 {background-color: #FFFF0d;}
    .cython.score-181 {background-color: #FFFF0d;}
    .cython.score-182 {background-color: #FFFF0d;}
    .cython.score-183 {background-color: #FFFF0d;}
    .cython.score-184 {background-color: #FFFF0d;}
    .cython.score-185 {background-color: #FFFF0d;}
    .cython.score-186 {background-color: #FFFF0d;}
    .cython.score-187 {background-color: #FFFF0c;}
    .cython.score-188 {background-color: #FFFF0c;}
    .cython.score-189 {background-color: #FFFF0c;}
    .cython.score-190 {background-color: #FFFF0c;}
    .cython.score-191 {background-color: #FFFF0c;}
    .cython.score-192 {background-color: #FFFF0c;}
    .cython.score-193 {background-color: #FFFF0c;}
    .cython.score-194 {background-color: #FFFF0c;}
    .cython.score-195 {background-color: #FFFF0c;}
    .cython.score-196 {background-color: #FFFF0c;}
    .cython.score-197 {background-color: #FFFF0c;}
    .cython.score-198 {background-color: #FFFF0c;}
    .cython.score-199 {background-color: #FFFF0c;}
    .cython.score-200 {background-color: #FFFF0c;}
    .cython.score-201 {background-color: #FFFF0c;}
    .cython.score-202 {background-color: #FFFF0c;}
    .cython.score-203 {background-color: #FFFF0b;}
    .cython.score-204 {background-color: #FFFF0b;}
    .cython.score-205 {background-color: #FFFF0b;}
    .cython.score-206 {background-color: #FFFF0b;}
    .cython.score-207 {background-color: #FFFF0b;}
    .cython.score-208 {background-color: #FFFF0b;}
    .cython.score-209 {background-color: #FFFF0b;}
    .cython.score-210 {background-color: #FFFF0b;}
    .cython.score-211 {background-color: #FFFF0b;}
    .cython.score-212 {background-color: #FFFF0b;}
    .cython.score-213 {background-color: #FFFF0b;}
    .cython.score-214 {background-color: #FFFF0b;}
    .cython.score-215 {background-color: #FFFF0b;}
    .cython.score-216 {background-color: #FFFF0b;}
    .cython.score-217 {background-color: #FFFF0b;}
    .cython.score-218 {background-color: #FFFF0b;}
    .cython.score-219 {background-color: #FFFF0b;}
    .cython.score-220 {background-color: #FFFF0b;}
    .cython.score-221 {background-color: #FFFF0b;}
    .cython.score-222 {background-color: #FFFF0a;}
    .cython.score-223 {background-color: #FFFF0a;}
    .cython.score-224 {background-color: #FFFF0a;}
    .cython.score-225 {background-color: #FFFF0a;}
    .cython.score-226 {background-color: #FFFF0a;}
    .cython.score-227 {background-color: #FFFF0a;}
    .cython.score-228 {background-color: #FFFF0a;}
    .cython.score-229 {background-color: #FFFF0a;}
    .cython.score-230 {background-color: #FFFF0a;}
    .cython.score-231 {background-color: #FFFF0a;}
    .cython.score-232 {background-color: #FFFF0a;}
    .cython.score-233 {background-color: #FFFF0a;}
    .cython.score-234 {background-color: #FFFF0a;}
    .cython.score-235 {background-color: #FFFF0a;}
    .cython.score-236 {background-color: #FFFF0a;}
    .cython.score-237 {background-color: #FFFF0a;}
    .cython.score-238 {background-color: #FFFF0a;}
    .cython.score-239 {background-color: #FFFF0a;}
    .cython.score-240 {background-color: #FFFF0a;}
    .cython.score-241 {background-color: #FFFF0a;}
    .cython.score-242 {background-color: #FFFF0a;}
    .cython.score-243 {background-color: #FFFF0a;}
    .cython.score-244 {background-color: #FFFF0a;}
    .cython.score-245 {background-color: #FFFF0a;}
    .cython.score-246 {background-color: #FFFF09;}
    .cython.score-247 {background-color: #FFFF09;}
    .cython.score-248 {background-color: #FFFF09;}
    .cython.score-249 {background-color: #FFFF09;}
    .cython.score-250 {background-color: #FFFF09;}
    .cython.score-251 {background-color: #FFFF09;}
    .cython.score-252 {background-color: #FFFF09;}
    .cython.score-253 {background-color: #FFFF09;}
    .cython.score-254 {background-color: #FFFF09;}.cython .hll { background-color: #ffffcc }
    .cython  { background: #f8f8f8; }
    .cython .c { color: #408080; font-style: italic } /* Comment */
    .cython .err { border: 1px solid #FF0000 } /* Error */
    .cython .k { color: #008000; font-weight: bold } /* Keyword */
    .cython .o { color: #666666 } /* Operator */
    .cython .cm { color: #408080; font-style: italic } /* Comment.Multiline */
    .cython .cp { color: #BC7A00 } /* Comment.Preproc */
    .cython .c1 { color: #408080; font-style: italic } /* Comment.Single */
    .cython .cs { color: #408080; font-style: italic } /* Comment.Special */
    .cython .gd { color: #A00000 } /* Generic.Deleted */
    .cython .ge { font-style: italic } /* Generic.Emph */
    .cython .gr { color: #FF0000 } /* Generic.Error */
    .cython .gh { color: #000080; font-weight: bold } /* Generic.Heading */
    .cython .gi { color: #00A000 } /* Generic.Inserted */
    .cython .go { color: #888888 } /* Generic.Output */
    .cython .gp { color: #000080; font-weight: bold } /* Generic.Prompt */
    .cython .gs { font-weight: bold } /* Generic.Strong */
    .cython .gu { color: #800080; font-weight: bold } /* Generic.Subheading */
    .cython .gt { color: #0044DD } /* Generic.Traceback */
    .cython .kc { color: #008000; font-weight: bold } /* Keyword.Constant */
    .cython .kd { color: #008000; font-weight: bold } /* Keyword.Declaration */
    .cython .kn { color: #008000; font-weight: bold } /* Keyword.Namespace */
    .cython .kp { color: #008000 } /* Keyword.Pseudo */
    .cython .kr { color: #008000; font-weight: bold } /* Keyword.Reserved */
    .cython .kt { color: #B00040 } /* Keyword.Type */
    .cython .m { color: #666666 } /* Literal.Number */
    .cython .s { color: #BA2121 } /* Literal.String */
    .cython .na { color: #7D9029 } /* Name.Attribute */
    .cython .nb { color: #008000 } /* Name.Builtin */
    .cython .nc { color: #0000FF; font-weight: bold } /* Name.Class */
    .cython .no { color: #880000 } /* Name.Constant */
    .cython .nd { color: #AA22FF } /* Name.Decorator */
    .cython .ni { color: #999999; font-weight: bold } /* Name.Entity */
    .cython .ne { color: #D2413A; font-weight: bold } /* Name.Exception */
    .cython .nf { color: #0000FF } /* Name.Function */
    .cython .nl { color: #A0A000 } /* Name.Label */
    .cython .nn { color: #0000FF; font-weight: bold } /* Name.Namespace */
    .cython .nt { color: #008000; font-weight: bold } /* Name.Tag */
    .cython .nv { color: #19177C } /* Name.Variable */
    .cython .ow { color: #AA22FF; font-weight: bold } /* Operator.Word */
    .cython .w { color: #bbbbbb } /* Text.Whitespace */
    .cython .mf { color: #666666 } /* Literal.Number.Float */
    .cython .mh { color: #666666 } /* Literal.Number.Hex */
    .cython .mi { color: #666666 } /* Literal.Number.Integer */
    .cython .mo { color: #666666 } /* Literal.Number.Oct */
    .cython .sb { color: #BA2121 } /* Literal.String.Backtick */
    .cython .sc { color: #BA2121 } /* Literal.String.Char */
    .cython .sd { color: #BA2121; font-style: italic } /* Literal.String.Doc */
    .cython .s2 { color: #BA2121 } /* Literal.String.Double */
    .cython .se { color: #BB6622; font-weight: bold } /* Literal.String.Escape */
    .cython .sh { color: #BA2121 } /* Literal.String.Heredoc */
    .cython .si { color: #BB6688; font-weight: bold } /* Literal.String.Interpol */
    .cython .sx { color: #008000 } /* Literal.String.Other */
    .cython .sr { color: #BB6688 } /* Literal.String.Regex */
    .cython .s1 { color: #BA2121 } /* Literal.String.Single */
    .cython .ss { color: #19177C } /* Literal.String.Symbol */
    .cython .bp { color: #008000 } /* Name.Builtin.Pseudo */
    .cython .vc { color: #19177C } /* Name.Variable.Class */
    .cython .vg { color: #19177C } /* Name.Variable.Global */
    .cython .vi { color: #19177C } /* Name.Variable.Instance */
    .cython .il { color: #666666 } /* Literal.Number.Integer.Long */
        </style>
        <script>
        function toggleDiv(id) {
            theDiv = id.nextElementSibling
            if (theDiv.style.display != 'block') theDiv.style.display = 'block';
            else theDiv.style.display = 'none';
        }
        </script>
    </head>
    <body class="cython">
    <p>Generated by Cython 0.22</p>
    <div class="cython"><pre class='cython line score-19' onclick='toggleDiv(this)'>+01: <span class="k">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="nn">np</span></pre>
    <pre class='cython code score-19'>  __pyx_t_1 = <span class='pyx_c_api'>__Pyx_Import</span>(__pyx_n_s_numpy, 0, -1);<span class='error_goto'> if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}</span>
      <span class='refnanny'>__Pyx_GOTREF</span>(__pyx_t_1);
      if (<span class='py_c_api'>PyDict_SetItem</span>(__pyx_d, __pyx_n_s_np, __pyx_t_1) &lt; 0) <span class='error_goto'>{__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}</span>
      <span class='pyx_macro_api'>__Pyx_DECREF</span>(__pyx_t_1); __pyx_t_1 = 0;
    /* … */
      __pyx_t_1 = <span class='py_c_api'>PyDict_New</span>();<span class='error_goto'> if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}</span>
      <span class='refnanny'>__Pyx_GOTREF</span>(__pyx_t_1);
      if (<span class='py_c_api'>PyDict_SetItem</span>(__pyx_d, __pyx_n_s_test, __pyx_t_1) &lt; 0) <span class='error_goto'>{__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}</span>
      <span class='pyx_macro_api'>__Pyx_DECREF</span>(__pyx_t_1); __pyx_t_1 = 0;
    </pre><pre class='cython line score-0'>&#xA0;02: <span class="k">cimport</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="nn">np</span></pre>
    <pre class='cython line score-0'>&#xA0;03: </pre>
    <pre class='cython line score-0'>&#xA0;04: <span class="k">cimport</span> <span class="nn">cython</span></pre>
    <pre class='cython line score-0'>&#xA0;05: <span class="nd">@cython</span><span class="o">.</span><span class="n">boundscheck</span><span class="p">(</span><span class="bp">False</span><span class="p">)</span></pre>
    <pre class='cython line score-0'>&#xA0;06: <span class="nd">@cython</span><span class="o">.</span><span class="n">wraparound</span><span class="p">(</span><span class="bp">False</span><span class="p">)</span></pre>
    <pre class='cython line score-54' onclick='toggleDiv(this)'>+07: <span class="k">def</span> <span class="nf">cy_mult</span><span class="p">(</span><span class="n">double</span><span class="p">[:,::</span><span class="mf">1</span><span class="p">]</span> <span class="n">u</span><span class="p">,</span> <span class="n">double</span><span class="p">[:,::</span><span class="mf">1</span><span class="p">]</span> <span class="n">v</span><span class="p">):</span></pre>
    <pre class='cython code score-54'>/* Python wrapper */
    static PyObject *__pyx_pw_46_cython_magic_c24e7137ef154798b36e2a1be82a76c6_1cy_mult(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
    static PyMethodDef __pyx_mdef_46_cython_magic_c24e7137ef154798b36e2a1be82a76c6_1cy_mult = {"cy_mult", (PyCFunction)__pyx_pw_46_cython_magic_c24e7137ef154798b36e2a1be82a76c6_1cy_mult, METH_VARARGS|METH_KEYWORDS, 0};
    static PyObject *__pyx_pw_46_cython_magic_c24e7137ef154798b36e2a1be82a76c6_1cy_mult(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
      __Pyx_memviewslice __pyx_v_u = { 0, 0, { 0 }, { 0 }, { 0 } };
      __Pyx_memviewslice __pyx_v_v = { 0, 0, { 0 }, { 0 }, { 0 } };
      PyObject *__pyx_r = 0;
      <span class='refnanny'>__Pyx_RefNannyDeclarations</span>
      <span class='refnanny'>__Pyx_RefNannySetupContext</span>("cy_mult (wrapper)", 0);
      {
        static PyObject **__pyx_pyargnames[] = {&amp;__pyx_n_s_u,&amp;__pyx_n_s_v,0};
        PyObject* values[2] = {0,0};
        if (unlikely(__pyx_kwds)) {
          Py_ssize_t kw_args;
          const Py_ssize_t pos_args = <span class='py_macro_api'>PyTuple_GET_SIZE</span>(__pyx_args);
          switch (pos_args) {
            case  2: values[1] = <span class='py_macro_api'>PyTuple_GET_ITEM</span>(__pyx_args, 1);
            case  1: values[0] = <span class='py_macro_api'>PyTuple_GET_ITEM</span>(__pyx_args, 0);
            case  0: break;
            default: goto __pyx_L5_argtuple_error;
          }
          kw_args = <span class='py_c_api'>PyDict_Size</span>(__pyx_kwds);
          switch (pos_args) {
            case  0:
            if (likely((values[0] = <span class='py_c_api'>PyDict_GetItem</span>(__pyx_kwds, __pyx_n_s_u)) != 0)) kw_args--;
            else goto __pyx_L5_argtuple_error;
            case  1:
            if (likely((values[1] = <span class='py_c_api'>PyDict_GetItem</span>(__pyx_kwds, __pyx_n_s_v)) != 0)) kw_args--;
            else {
              <span class='pyx_c_api'>__Pyx_RaiseArgtupleInvalid</span>("cy_mult", 1, 2, 2, 1); <span class='error_goto'>{__pyx_filename = __pyx_f[0]; __pyx_lineno = 7; __pyx_clineno = __LINE__; goto __pyx_L3_error;}</span>
            }
          }
          if (unlikely(kw_args &gt; 0)) {
            if (unlikely(<span class='pyx_c_api'>__Pyx_ParseOptionalKeywords</span>(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "cy_mult") &lt; 0)) <span class='error_goto'>{__pyx_filename = __pyx_f[0]; __pyx_lineno = 7; __pyx_clineno = __LINE__; goto __pyx_L3_error;}</span>
          }
        } else if (<span class='py_macro_api'>PyTuple_GET_SIZE</span>(__pyx_args) != 2) {
          goto __pyx_L5_argtuple_error;
        } else {
          values[0] = <span class='py_macro_api'>PyTuple_GET_ITEM</span>(__pyx_args, 0);
          values[1] = <span class='py_macro_api'>PyTuple_GET_ITEM</span>(__pyx_args, 1);
        }
        __pyx_v_u = <span class='pyx_c_api'>__Pyx_PyObject_to_MemoryviewSlice_d_dc_double</span>(values[0]);<span class='error_goto'> if (unlikely(!__pyx_v_u.memview)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 7; __pyx_clineno = __LINE__; goto __pyx_L3_error;}</span>
        __pyx_v_v = <span class='pyx_c_api'>__Pyx_PyObject_to_MemoryviewSlice_d_dc_double</span>(values[1]);<span class='error_goto'> if (unlikely(!__pyx_v_v.memview)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 7; __pyx_clineno = __LINE__; goto __pyx_L3_error;}</span>
      }
      goto __pyx_L4_argument_unpacking_done;
      __pyx_L5_argtuple_error:;
      <span class='pyx_c_api'>__Pyx_RaiseArgtupleInvalid</span>("cy_mult", 1, 2, 2, <span class='py_macro_api'>PyTuple_GET_SIZE</span>(__pyx_args)); <span class='error_goto'>{__pyx_filename = __pyx_f[0]; __pyx_lineno = 7; __pyx_clineno = __LINE__; goto __pyx_L3_error;}</span>
      __pyx_L3_error:;
      <span class='pyx_c_api'>__Pyx_AddTraceback</span>("_cython_magic_c24e7137ef154798b36e2a1be82a76c6.cy_mult", __pyx_clineno, __pyx_lineno, __pyx_filename);
      <span class='refnanny'>__Pyx_RefNannyFinishContext</span>();
      return NULL;
      __pyx_L4_argument_unpacking_done:;
      __pyx_r = __pyx_pf_46_cython_magic_c24e7137ef154798b36e2a1be82a76c6_cy_mult(__pyx_self, __pyx_v_u, __pyx_v_v);
      int __pyx_lineno = 0;
      const char *__pyx_filename = NULL;
      int __pyx_clineno = 0;
    
      /* function exit code */
      <span class='refnanny'>__Pyx_RefNannyFinishContext</span>();
      return __pyx_r;
    }
    
    static PyObject *__pyx_pf_46_cython_magic_c24e7137ef154798b36e2a1be82a76c6_cy_mult(CYTHON_UNUSED PyObject *__pyx_self, __Pyx_memviewslice __pyx_v_u, __Pyx_memviewslice __pyx_v_v) {
      Py_ssize_t __pyx_v_m;
      Py_ssize_t __pyx_v_n;
      Py_ssize_t __pyx_v_p;
      int __pyx_v_i;
      int __pyx_v_j;
      int __pyx_v_k;
      __Pyx_memviewslice __pyx_v_w = { 0, 0, { 0 }, { 0 }, { 0 } };
      PyObject *__pyx_r = NULL;
      <span class='refnanny'>__Pyx_RefNannyDeclarations</span>
      <span class='refnanny'>__Pyx_RefNannySetupContext</span>("cy_mult", 0);
    /* … */
      /* function exit code */
      __pyx_L1_error:;
      <span class='pyx_macro_api'>__Pyx_XDECREF</span>(__pyx_t_1);
      <span class='pyx_macro_api'>__Pyx_XDECREF</span>(__pyx_t_2);
      <span class='pyx_macro_api'>__Pyx_XDECREF</span>(__pyx_t_3);
      <span class='pyx_macro_api'>__Pyx_XDECREF</span>(__pyx_t_4);
      <span class='pyx_macro_api'>__Pyx_XDECREF</span>(__pyx_t_5);
      __PYX_XDEC_MEMVIEW(&amp;__pyx_t_6, 1);
      <span class='pyx_c_api'>__Pyx_AddTraceback</span>("_cython_magic_c24e7137ef154798b36e2a1be82a76c6.cy_mult", __pyx_clineno, __pyx_lineno, __pyx_filename);
      __pyx_r = NULL;
      __pyx_L0:;
      __PYX_XDEC_MEMVIEW(&amp;__pyx_v_w, 1);
      __PYX_XDEC_MEMVIEW(&amp;__pyx_v_u, 1);
      __PYX_XDEC_MEMVIEW(&amp;__pyx_v_v, 1);
      <span class='refnanny'>__Pyx_XGIVEREF</span>(__pyx_r);
      <span class='refnanny'>__Pyx_RefNannyFinishContext</span>();
      return __pyx_r;
    }
    /* … */
      __pyx_tuple__19 = <span class='py_c_api'>PyTuple_Pack</span>(9, __pyx_n_s_u, __pyx_n_s_v, __pyx_n_s_m, __pyx_n_s_n, __pyx_n_s_p, __pyx_n_s_i, __pyx_n_s_j, __pyx_n_s_k, __pyx_n_s_w);<span class='error_goto'> if (unlikely(!__pyx_tuple__19)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 7; __pyx_clineno = __LINE__; goto __pyx_L1_error;}</span>
      <span class='refnanny'>__Pyx_GOTREF</span>(__pyx_tuple__19);
      <span class='refnanny'>__Pyx_GIVEREF</span>(__pyx_tuple__19);
    /* … */
      __pyx_t_1 = PyCFunction_NewEx(&amp;__pyx_mdef_46_cython_magic_c24e7137ef154798b36e2a1be82a76c6_1cy_mult, NULL, __pyx_n_s_cython_magic_c24e7137ef154798b3);<span class='error_goto'> if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 7; __pyx_clineno = __LINE__; goto __pyx_L1_error;}</span>
      <span class='refnanny'>__Pyx_GOTREF</span>(__pyx_t_1);
      if (<span class='py_c_api'>PyDict_SetItem</span>(__pyx_d, __pyx_n_s_cy_mult, __pyx_t_1) &lt; 0) <span class='error_goto'>{__pyx_filename = __pyx_f[0]; __pyx_lineno = 7; __pyx_clineno = __LINE__; goto __pyx_L1_error;}</span>
      <span class='pyx_macro_api'>__Pyx_DECREF</span>(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_codeobj__20 = (PyObject*)<span class='pyx_c_api'>__Pyx_PyCode_New</span>(2, 0, 9, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__19, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_Users_cliburn_ipython_cython__c, __pyx_n_s_cy_mult, 7, __pyx_empty_bytes);<span class='error_goto'> if (unlikely(!__pyx_codeobj__20)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 7; __pyx_clineno = __LINE__; goto __pyx_L1_error;}</span>
    </pre><pre class='cython line score-0' onclick='toggleDiv(this)'>+08:     <span class="n">m</span> <span class="o">=</span> <span class="n">u</span><span class="o">.</span><span class="n">shape</span><span class="p">[</span><span class="mf">0</span><span class="p">]</span></pre>
    <pre class='cython code score-0'>  __pyx_v_m = (__pyx_v_u.shape[0]);
    </pre><pre class='cython line score-0' onclick='toggleDiv(this)'>+09:     <span class="n">n</span> <span class="o">=</span> <span class="n">u</span><span class="o">.</span><span class="n">shape</span><span class="p">[</span><span class="mf">1</span><span class="p">]</span></pre>
    <pre class='cython code score-0'>  __pyx_v_n = (__pyx_v_u.shape[1]);
    </pre><pre class='cython line score-0' onclick='toggleDiv(this)'>+10:     <span class="n">p</span> <span class="o">=</span> <span class="n">v</span><span class="o">.</span><span class="n">shape</span><span class="p">[</span><span class="mf">1</span><span class="p">]</span></pre>
    <pre class='cython code score-0'>  __pyx_v_p = (__pyx_v_v.shape[1]);
    </pre><pre class='cython line score-0'>&#xA0;11: </pre>
    <pre class='cython line score-0'>&#xA0;12:     <span class="k">cdef</span> <span class="kt">int</span> <span class="nf">i</span><span class="p">,</span> <span class="nf">j</span><span class="p">,</span> <span class="nf">k</span></pre>
    <pre class='cython line score-52' onclick='toggleDiv(this)'>+13:     <span class="k">cdef</span> <span class="kt">double</span>[<span class="p">:,::</span><span class="mf">1</span><span class="p">]</span> <span class="n">w</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">zeros</span><span class="p">((</span><span class="n">m</span><span class="p">,</span> <span class="n">p</span><span class="p">),</span> <span class="n">dtype</span><span class="o">=</span><span class="n">np</span><span class="o">.</span><span class="n">float64</span><span class="p">)</span></pre>
    <pre class='cython code score-52'>  __pyx_t_1 = <span class='pyx_c_api'>__Pyx_GetModuleGlobalName</span>(__pyx_n_s_np);<span class='error_goto'> if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 13; __pyx_clineno = __LINE__; goto __pyx_L1_error;}</span>
      <span class='refnanny'>__Pyx_GOTREF</span>(__pyx_t_1);
      __pyx_t_2 = <span class='pyx_c_api'>__Pyx_PyObject_GetAttrStr</span>(__pyx_t_1, __pyx_n_s_zeros);<span class='error_goto'> if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 13; __pyx_clineno = __LINE__; goto __pyx_L1_error;}</span>
      <span class='refnanny'>__Pyx_GOTREF</span>(__pyx_t_2);
      <span class='pyx_macro_api'>__Pyx_DECREF</span>(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_1 = <span class='py_c_api'>PyInt_FromSsize_t</span>(__pyx_v_m);<span class='error_goto'> if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 13; __pyx_clineno = __LINE__; goto __pyx_L1_error;}</span>
      <span class='refnanny'>__Pyx_GOTREF</span>(__pyx_t_1);
      __pyx_t_3 = <span class='py_c_api'>PyInt_FromSsize_t</span>(__pyx_v_p);<span class='error_goto'> if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 13; __pyx_clineno = __LINE__; goto __pyx_L1_error;}</span>
      <span class='refnanny'>__Pyx_GOTREF</span>(__pyx_t_3);
      __pyx_t_4 = <span class='py_c_api'>PyTuple_New</span>(2);<span class='error_goto'> if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 13; __pyx_clineno = __LINE__; goto __pyx_L1_error;}</span>
      <span class='refnanny'>__Pyx_GOTREF</span>(__pyx_t_4);
      <span class='py_macro_api'>PyTuple_SET_ITEM</span>(__pyx_t_4, 0, __pyx_t_1);
      <span class='refnanny'>__Pyx_GIVEREF</span>(__pyx_t_1);
      <span class='py_macro_api'>PyTuple_SET_ITEM</span>(__pyx_t_4, 1, __pyx_t_3);
      <span class='refnanny'>__Pyx_GIVEREF</span>(__pyx_t_3);
      __pyx_t_1 = 0;
      __pyx_t_3 = 0;
      __pyx_t_3 = <span class='py_c_api'>PyTuple_New</span>(1);<span class='error_goto'> if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 13; __pyx_clineno = __LINE__; goto __pyx_L1_error;}</span>
      <span class='refnanny'>__Pyx_GOTREF</span>(__pyx_t_3);
      <span class='py_macro_api'>PyTuple_SET_ITEM</span>(__pyx_t_3, 0, __pyx_t_4);
      <span class='refnanny'>__Pyx_GIVEREF</span>(__pyx_t_4);
      __pyx_t_4 = 0;
      __pyx_t_4 = <span class='py_c_api'>PyDict_New</span>();<span class='error_goto'> if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 13; __pyx_clineno = __LINE__; goto __pyx_L1_error;}</span>
      <span class='refnanny'>__Pyx_GOTREF</span>(__pyx_t_4);
      __pyx_t_1 = <span class='pyx_c_api'>__Pyx_GetModuleGlobalName</span>(__pyx_n_s_np);<span class='error_goto'> if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 13; __pyx_clineno = __LINE__; goto __pyx_L1_error;}</span>
      <span class='refnanny'>__Pyx_GOTREF</span>(__pyx_t_1);
      __pyx_t_5 = <span class='pyx_c_api'>__Pyx_PyObject_GetAttrStr</span>(__pyx_t_1, __pyx_n_s_float64);<span class='error_goto'> if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 13; __pyx_clineno = __LINE__; goto __pyx_L1_error;}</span>
      <span class='refnanny'>__Pyx_GOTREF</span>(__pyx_t_5);
      <span class='pyx_macro_api'>__Pyx_DECREF</span>(__pyx_t_1); __pyx_t_1 = 0;
      if (<span class='py_c_api'>PyDict_SetItem</span>(__pyx_t_4, __pyx_n_s_dtype, __pyx_t_5) &lt; 0) <span class='error_goto'>{__pyx_filename = __pyx_f[0]; __pyx_lineno = 13; __pyx_clineno = __LINE__; goto __pyx_L1_error;}</span>
      <span class='pyx_macro_api'>__Pyx_DECREF</span>(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_5 = <span class='pyx_c_api'>__Pyx_PyObject_Call</span>(__pyx_t_2, __pyx_t_3, __pyx_t_4);<span class='error_goto'> if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 13; __pyx_clineno = __LINE__; goto __pyx_L1_error;}</span>
      <span class='refnanny'>__Pyx_GOTREF</span>(__pyx_t_5);
      <span class='pyx_macro_api'>__Pyx_DECREF</span>(__pyx_t_2); __pyx_t_2 = 0;
      <span class='pyx_macro_api'>__Pyx_DECREF</span>(__pyx_t_3); __pyx_t_3 = 0;
      <span class='pyx_macro_api'>__Pyx_DECREF</span>(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = <span class='pyx_c_api'>__Pyx_PyObject_to_MemoryviewSlice_d_dc_double</span>(__pyx_t_5);
      if (unlikely(!__pyx_t_6.memview)) <span class='error_goto'>{__pyx_filename = __pyx_f[0]; __pyx_lineno = 13; __pyx_clineno = __LINE__; goto __pyx_L1_error;}</span>
      <span class='pyx_macro_api'>__Pyx_DECREF</span>(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_v_w = __pyx_t_6;
      __pyx_t_6.memview = NULL;
      __pyx_t_6.data = NULL;
    </pre><pre class='cython line score-0' onclick='toggleDiv(this)'>+14:     <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">m</span><span class="p">):</span></pre>
    <pre class='cython code score-0'>  __pyx_t_7 = __pyx_v_m;
      for (__pyx_t_8 = 0; __pyx_t_8 &lt; __pyx_t_7; __pyx_t_8+=1) {
        __pyx_v_i = __pyx_t_8;
    </pre><pre class='cython line score-0' onclick='toggleDiv(this)'>+15:         <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">p</span><span class="p">):</span></pre>
    <pre class='cython code score-0'>    __pyx_t_9 = __pyx_v_p;
        for (__pyx_t_10 = 0; __pyx_t_10 &lt; __pyx_t_9; __pyx_t_10+=1) {
          __pyx_v_j = __pyx_t_10;
    </pre><pre class='cython line score-0' onclick='toggleDiv(this)'>+16:             <span class="k">for</span> <span class="n">k</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">n</span><span class="p">):</span></pre>
    <pre class='cython code score-0'>      __pyx_t_11 = __pyx_v_n;
          for (__pyx_t_12 = 0; __pyx_t_12 &lt; __pyx_t_11; __pyx_t_12+=1) {
            __pyx_v_k = __pyx_t_12;
    </pre><pre class='cython line score-0' onclick='toggleDiv(this)'>+17:                 <span class="n">w</span><span class="p">[</span><span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">]</span> <span class="o">+=</span> <span class="n">u</span><span class="p">[</span><span class="n">i</span><span class="p">,</span> <span class="n">k</span><span class="p">]</span> <span class="o">*</span> <span class="n">v</span><span class="p">[</span><span class="n">k</span><span class="p">,</span> <span class="n">j</span><span class="p">]</span></pre>
    <pre class='cython code score-0'>        __pyx_t_13 = __pyx_v_i;
            __pyx_t_14 = __pyx_v_k;
            __pyx_t_15 = __pyx_v_k;
            __pyx_t_16 = __pyx_v_j;
            __pyx_t_17 = __pyx_v_i;
            __pyx_t_18 = __pyx_v_j;
            *((double *) ( /* dim=1 */ ((char *) (((double *) ( /* dim=0 */ (__pyx_v_w.data + __pyx_t_17 * __pyx_v_w.strides[0]) )) + __pyx_t_18)) )) += ((*((double *) ( /* dim=1 */ ((char *) (((double *) ( /* dim=0 */ (__pyx_v_u.data + __pyx_t_13 * __pyx_v_u.strides[0]) )) + __pyx_t_14)) ))) * (*((double *) ( /* dim=1 */ ((char *) (((double *) ( /* dim=0 */ (__pyx_v_v.data + __pyx_t_15 * __pyx_v_v.strides[0]) )) + __pyx_t_16)) ))));
          }
        }
      }
    </pre><pre class='cython line score-30' onclick='toggleDiv(this)'>+18:     <span class="k">return</span> <span class="n">np</span><span class="o">.</span><span class="n">asarray</span><span class="p">(</span><span class="n">w</span><span class="p">)</span></pre>
    <pre class='cython code score-30'>  <span class='pyx_macro_api'>__Pyx_XDECREF</span>(__pyx_r);
      __pyx_t_4 = <span class='pyx_c_api'>__Pyx_GetModuleGlobalName</span>(__pyx_n_s_np);<span class='error_goto'> if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 18; __pyx_clineno = __LINE__; goto __pyx_L1_error;}</span>
      <span class='refnanny'>__Pyx_GOTREF</span>(__pyx_t_4);
      __pyx_t_3 = <span class='pyx_c_api'>__Pyx_PyObject_GetAttrStr</span>(__pyx_t_4, __pyx_n_s_asarray);<span class='error_goto'> if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 18; __pyx_clineno = __LINE__; goto __pyx_L1_error;}</span>
      <span class='refnanny'>__Pyx_GOTREF</span>(__pyx_t_3);
      <span class='pyx_macro_api'>__Pyx_DECREF</span>(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_4 = __pyx_memoryview_fromslice(__pyx_v_w, 2, (PyObject *(*)(char *)) __pyx_memview_get_double, (int (*)(char *, PyObject *)) __pyx_memview_set_double, 0);;<span class='error_goto'> if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 18; __pyx_clineno = __LINE__; goto __pyx_L1_error;}</span>
      <span class='refnanny'>__Pyx_GOTREF</span>(__pyx_t_4);
      __pyx_t_2 = NULL;
      if (CYTHON_COMPILING_IN_CPYTHON &amp;&amp; unlikely(<span class='py_c_api'>PyMethod_Check</span>(__pyx_t_3))) {
        __pyx_t_2 = <span class='py_macro_api'>PyMethod_GET_SELF</span>(__pyx_t_3);
        if (likely(__pyx_t_2)) {
          PyObject* function = <span class='py_macro_api'>PyMethod_GET_FUNCTION</span>(__pyx_t_3);
          <span class='pyx_macro_api'>__Pyx_INCREF</span>(__pyx_t_2);
          <span class='pyx_macro_api'>__Pyx_INCREF</span>(function);
          <span class='pyx_macro_api'>__Pyx_DECREF_SET</span>(__pyx_t_3, function);
        }
      }
      if (!__pyx_t_2) {
        __pyx_t_5 = <span class='pyx_c_api'>__Pyx_PyObject_CallOneArg</span>(__pyx_t_3, __pyx_t_4);<span class='error_goto'> if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 18; __pyx_clineno = __LINE__; goto __pyx_L1_error;}</span>
        <span class='pyx_macro_api'>__Pyx_DECREF</span>(__pyx_t_4); __pyx_t_4 = 0;
        <span class='refnanny'>__Pyx_GOTREF</span>(__pyx_t_5);
      } else {
        __pyx_t_1 = <span class='py_c_api'>PyTuple_New</span>(1+1);<span class='error_goto'> if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 18; __pyx_clineno = __LINE__; goto __pyx_L1_error;}</span>
        <span class='refnanny'>__Pyx_GOTREF</span>(__pyx_t_1);
        <span class='py_macro_api'>PyTuple_SET_ITEM</span>(__pyx_t_1, 0, __pyx_t_2); <span class='refnanny'>__Pyx_GIVEREF</span>(__pyx_t_2); __pyx_t_2 = NULL;
        <span class='py_macro_api'>PyTuple_SET_ITEM</span>(__pyx_t_1, 0+1, __pyx_t_4);
        <span class='refnanny'>__Pyx_GIVEREF</span>(__pyx_t_4);
        __pyx_t_4 = 0;
        __pyx_t_5 = <span class='pyx_c_api'>__Pyx_PyObject_Call</span>(__pyx_t_3, __pyx_t_1, NULL);<span class='error_goto'> if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 18; __pyx_clineno = __LINE__; goto __pyx_L1_error;}</span>
        <span class='refnanny'>__Pyx_GOTREF</span>(__pyx_t_5);
        <span class='pyx_macro_api'>__Pyx_DECREF</span>(__pyx_t_1); __pyx_t_1 = 0;
      }
      <span class='pyx_macro_api'>__Pyx_DECREF</span>(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_r = __pyx_t_5;
      __pyx_t_5 = 0;
      goto __pyx_L0;
    </pre></div></body></html>



.. code:: python

    m = 50
    n = 30
    p = 40
    u = np.random.random((m, n))
    v = np.random.random((n, p))

.. code:: python

    %timeit -n 10 np.dot(u, v)
    %timeit -n 10 py_mult(u, v)
    %timeit -n 10 numba_mult(u, v)
    %timeit -n 10 cy_mult(u, v)


.. parsed-literal::

    10 loops, best of 3: 16 µs per loop
    10 loops, best of 3: 46 ms per loop
    10 loops, best of 3: 74.2 µs per loop
    10 loops, best of 3: 205 µs per loop


Example: Pairwise distance matrix
---------------------------------

Python
^^^^^^

.. code:: python

    def py_euclidean(vs, i, j):
        n = vs.shape[1]
        d = 0.0
        for k in range(n):
            t = vs[i, k] - vs[j, k]
            d += t*t
        return np.sqrt(d)
    
    def py_pairwise(vs, dist):
        n = len(vs)
        ds = np.empty((n, n))
        for i in range(n):
            for j in range(n):
                if i == j:
                    ds[i, j] = 0
                elif i > j:
                    ds[i, j] = ds[j, i]
                else:
                    ds[i, j] = dist(vs, i, j)
        return ds

.. code:: python

    vs = np.random.random((100, 100))

.. code:: python

    py_pairwise(vs, py_euclidean)




.. parsed-literal::

    array([[ 0.    ,  4.0287,  4.0001, ...,  4.3067,  4.0137,  4.2026],
           [ 4.0287,  0.    ,  3.7854, ...,  3.7035,  3.8681,  4.2034],
           [ 4.0001,  3.7854,  0.    , ...,  4.0247,  4.2126,  4.0511],
           ..., 
           [ 4.3067,  3.7035,  4.0247, ...,  0.    ,  3.8594,  4.4682],
           [ 4.0137,  3.8681,  4.2126, ...,  3.8594,  0.    ,  4.1816],
           [ 4.2026,  4.2034,  4.0511, ...,  4.4682,  4.1816,  0.    ]])



Profiling code
--------------

.. code:: python

    %timeit py_pairwise(vs, py_euclidean)


.. parsed-literal::

    1 loops, best of 3: 520 ms per loop


.. code:: python

    prof = %prun -r -q py_pairwise(vs, py_euclidean)


.. parsed-literal::

     

.. code:: python

    prof.sort_stats('time').print_stats(10);


.. parsed-literal::

             10006 function calls in 0.569 seconds
    
       Ordered by: internal time
    
       ncalls  tottime  percall  cumtime  percall filename:lineno(function)
         4950    0.551    0.000    0.559    0.000 <ipython-input-14-bdacffbdf484>:1(py_euclidean)
            1    0.010    0.010    0.569    0.569 <ipython-input-14-bdacffbdf484>:9(py_pairwise)
         5051    0.008    0.000    0.008    0.000 {range}
            1    0.000    0.000    0.000    0.000 {numpy.core.multiarray.empty}
            1    0.000    0.000    0.569    0.569 <string>:1(<module>)
            1    0.000    0.000    0.000    0.000 {len}
            1    0.000    0.000    0.000    0.000 {method 'disable' of '_lsprof.Profiler' objects}
    
    


Numba
-----

.. code:: python

    @jit(nopython=True)
    def numba_euclidean(vs, i, j):
        n = vs.shape[1]
        d = 0.0
        for k in range(n):
            t = vs[i, k] - vs[j, k]
            d += t*t
        return np.sqrt(d)
    
    @jit
    def numba_pairwise(vs, dist):
        n = vs.shape[0]
        ds = np.empty((n, n))
        for i in range(n):
            for j in range(n):
                if i == j:
                    ds[i, j] = 0
                elif i > j:
                    ds[i, j] = ds[j, i]
                else:
                    ds[i, j] = dist(vs, i, j)
        return ds

.. code:: python

    %timeit -n 100 py_euclidean(vs, 0, 1)
    %timeit -n 100 numba_euclidean(vs, 0, 1)


.. parsed-literal::

    100 loops, best of 3: 111 µs per loop
    100 loops, best of 3: 1.12 µs per loop


.. code:: python

    %timeit -n 10 py_pairwise(vs, py_euclidean)
    %timeit -n 10 numba_pairwise(vs, numba_euclidean)


.. parsed-literal::

    10 loops, best of 3: 537 ms per loop
    10 loops, best of 3: 6.44 ms per loop


.. code:: python

    prof = %prun -r -q numba_pairwise(vs, numba_euclidean)


.. parsed-literal::

     

.. code:: python

    prof.sort_stats('time').print_stats(10);


.. parsed-literal::

             28 function calls in 0.014 seconds
    
       Ordered by: internal time
    
       ncalls  tottime  percall  cumtime  percall filename:lineno(function)
            1    0.014    0.014    0.014    0.014 <string>:1(<module>)
            2    0.000    0.000    0.000    0.000 numpy_support.py:131(map_arrayscalar_type)
            2    0.000    0.000    0.000    0.000 numpy_support.py:80(from_dtype)
            2    0.000    0.000    0.000    0.000 context.py:130(resolve_data_type)
           16    0.000    0.000    0.000    0.000 {isinstance}
            2    0.000    0.000    0.000    0.000 dispatcher.py:178(typeof_pyval)
            2    0.000    0.000    0.000    0.000 numpy_support.py:144(is_array)
            1    0.000    0.000    0.000    0.000 {method 'disable' of '_lsprof.Profiler' objects}
    
    


Cython
------

.. code:: python

    %%cython -a -lm
    from libc.math cimport sqrt 
    import numpy as np
    cimport numpy as np
    cimport cython
    
    # function pointer 
    ctypedef double (*func)(double[:, ::1], int i, int j)
    
    @cython.boundscheck(False)
    @cython.wraparound(False)
    cdef double cy_euclidean(double[:, ::1] vs, int i, int j):
        cdef double d = 0.0, t
        cdef int k
    
        cdef int n = vs.shape[1]
        for k in range(n):
            t = vs[i, k] - vs[j, k]
            d += t*t
        return sqrt(d)
    
    @cython.boundscheck(False)
    @cython.wraparound(False)
    def cy_pairwise(double[:,::1] vs, metric='euclidean'):
        n = vs.shape[0]
        cdef double[:, ::1] ds = np.empty((n, n))
        cdef int i, j
    
        cdef func dist
        if metric == 'euclidean':
            dist = &cy_euclidean
        else:
            raise ValueError('Metric not found')
    
        for i in range(n):
            for j in range(n):
                if i == j:
                    ds[i, j] = 0
                elif i > j:
                    ds[i, j] = ds[j, i]
                else:
                    ds[i, j] = dist(vs, i, j)
        return np.asarray(ds)




.. raw:: html

    <!DOCTYPE html>
    <!-- Generated by Cython 0.22 -->
    <html>
    <head>
        <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
        <style type="text/css">
        
    body.cython { font-family: courier; font-size: 12; }
    
    .cython.tag  {  }
    .cython.line { margin: 0em }
    .cython.code  { font-size: 9; color: #444444; display: none; margin: 0px 0px 0px 20px;  }
    
    .cython.code .py_c_api  { color: red; }
    .cython.code .py_macro_api  { color: #FF7000; }
    .cython.code .pyx_c_api  { color: #FF3000; }
    .cython.code .pyx_macro_api  { color: #FF7000; }
    .cython.code .refnanny  { color: #FFA000; }
    .cython.code .error_goto  { color: #FFA000; }
    
    .cython.code .coerce  { color: #008000; border: 1px dotted #008000 }
    .cython.code .py_attr { color: #FF0000; font-weight: bold; }
    .cython.code .c_attr  { color: #0000FF; }
    .cython.code .py_call { color: #FF0000; font-weight: bold; }
    .cython.code .c_call  { color: #0000FF; }
    
    .cython.score-0 {background-color: #FFFFff;}
    .cython.score-1 {background-color: #FFFFe7;}
    .cython.score-2 {background-color: #FFFFd4;}
    .cython.score-3 {background-color: #FFFFc4;}
    .cython.score-4 {background-color: #FFFFb6;}
    .cython.score-5 {background-color: #FFFFaa;}
    .cython.score-6 {background-color: #FFFF9f;}
    .cython.score-7 {background-color: #FFFF96;}
    .cython.score-8 {background-color: #FFFF8d;}
    .cython.score-9 {background-color: #FFFF86;}
    .cython.score-10 {background-color: #FFFF7f;}
    .cython.score-11 {background-color: #FFFF79;}
    .cython.score-12 {background-color: #FFFF73;}
    .cython.score-13 {background-color: #FFFF6e;}
    .cython.score-14 {background-color: #FFFF6a;}
    .cython.score-15 {background-color: #FFFF66;}
    .cython.score-16 {background-color: #FFFF62;}
    .cython.score-17 {background-color: #FFFF5e;}
    .cython.score-18 {background-color: #FFFF5b;}
    .cython.score-19 {background-color: #FFFF57;}
    .cython.score-20 {background-color: #FFFF55;}
    .cython.score-21 {background-color: #FFFF52;}
    .cython.score-22 {background-color: #FFFF4f;}
    .cython.score-23 {background-color: #FFFF4d;}
    .cython.score-24 {background-color: #FFFF4b;}
    .cython.score-25 {background-color: #FFFF48;}
    .cython.score-26 {background-color: #FFFF46;}
    .cython.score-27 {background-color: #FFFF44;}
    .cython.score-28 {background-color: #FFFF43;}
    .cython.score-29 {background-color: #FFFF41;}
    .cython.score-30 {background-color: #FFFF3f;}
    .cython.score-31 {background-color: #FFFF3e;}
    .cython.score-32 {background-color: #FFFF3c;}
    .cython.score-33 {background-color: #FFFF3b;}
    .cython.score-34 {background-color: #FFFF39;}
    .cython.score-35 {background-color: #FFFF38;}
    .cython.score-36 {background-color: #FFFF37;}
    .cython.score-37 {background-color: #FFFF36;}
    .cython.score-38 {background-color: #FFFF35;}
    .cython.score-39 {background-color: #FFFF34;}
    .cython.score-40 {background-color: #FFFF33;}
    .cython.score-41 {background-color: #FFFF32;}
    .cython.score-42 {background-color: #FFFF31;}
    .cython.score-43 {background-color: #FFFF30;}
    .cython.score-44 {background-color: #FFFF2f;}
    .cython.score-45 {background-color: #FFFF2e;}
    .cython.score-46 {background-color: #FFFF2d;}
    .cython.score-47 {background-color: #FFFF2c;}
    .cython.score-48 {background-color: #FFFF2b;}
    .cython.score-49 {background-color: #FFFF2b;}
    .cython.score-50 {background-color: #FFFF2a;}
    .cython.score-51 {background-color: #FFFF29;}
    .cython.score-52 {background-color: #FFFF29;}
    .cython.score-53 {background-color: #FFFF28;}
    .cython.score-54 {background-color: #FFFF27;}
    .cython.score-55 {background-color: #FFFF27;}
    .cython.score-56 {background-color: #FFFF26;}
    .cython.score-57 {background-color: #FFFF26;}
    .cython.score-58 {background-color: #FFFF25;}
    .cython.score-59 {background-color: #FFFF24;}
    .cython.score-60 {background-color: #FFFF24;}
    .cython.score-61 {background-color: #FFFF23;}
    .cython.score-62 {background-color: #FFFF23;}
    .cython.score-63 {background-color: #FFFF22;}
    .cython.score-64 {background-color: #FFFF22;}
    .cython.score-65 {background-color: #FFFF22;}
    .cython.score-66 {background-color: #FFFF21;}
    .cython.score-67 {background-color: #FFFF21;}
    .cython.score-68 {background-color: #FFFF20;}
    .cython.score-69 {background-color: #FFFF20;}
    .cython.score-70 {background-color: #FFFF1f;}
    .cython.score-71 {background-color: #FFFF1f;}
    .cython.score-72 {background-color: #FFFF1f;}
    .cython.score-73 {background-color: #FFFF1e;}
    .cython.score-74 {background-color: #FFFF1e;}
    .cython.score-75 {background-color: #FFFF1e;}
    .cython.score-76 {background-color: #FFFF1d;}
    .cython.score-77 {background-color: #FFFF1d;}
    .cython.score-78 {background-color: #FFFF1c;}
    .cython.score-79 {background-color: #FFFF1c;}
    .cython.score-80 {background-color: #FFFF1c;}
    .cython.score-81 {background-color: #FFFF1c;}
    .cython.score-82 {background-color: #FFFF1b;}
    .cython.score-83 {background-color: #FFFF1b;}
    .cython.score-84 {background-color: #FFFF1b;}
    .cython.score-85 {background-color: #FFFF1a;}
    .cython.score-86 {background-color: #FFFF1a;}
    .cython.score-87 {background-color: #FFFF1a;}
    .cython.score-88 {background-color: #FFFF1a;}
    .cython.score-89 {background-color: #FFFF19;}
    .cython.score-90 {background-color: #FFFF19;}
    .cython.score-91 {background-color: #FFFF19;}
    .cython.score-92 {background-color: #FFFF19;}
    .cython.score-93 {background-color: #FFFF18;}
    .cython.score-94 {background-color: #FFFF18;}
    .cython.score-95 {background-color: #FFFF18;}
    .cython.score-96 {background-color: #FFFF18;}
    .cython.score-97 {background-color: #FFFF17;}
    .cython.score-98 {background-color: #FFFF17;}
    .cython.score-99 {background-color: #FFFF17;}
    .cython.score-100 {background-color: #FFFF17;}
    .cython.score-101 {background-color: #FFFF16;}
    .cython.score-102 {background-color: #FFFF16;}
    .cython.score-103 {background-color: #FFFF16;}
    .cython.score-104 {background-color: #FFFF16;}
    .cython.score-105 {background-color: #FFFF16;}
    .cython.score-106 {background-color: #FFFF15;}
    .cython.score-107 {background-color: #FFFF15;}
    .cython.score-108 {background-color: #FFFF15;}
    .cython.score-109 {background-color: #FFFF15;}
    .cython.score-110 {background-color: #FFFF15;}
    .cython.score-111 {background-color: #FFFF15;}
    .cython.score-112 {background-color: #FFFF14;}
    .cython.score-113 {background-color: #FFFF14;}
    .cython.score-114 {background-color: #FFFF14;}
    .cython.score-115 {background-color: #FFFF14;}
    .cython.score-116 {background-color: #FFFF14;}
    .cython.score-117 {background-color: #FFFF14;}
    .cython.score-118 {background-color: #FFFF13;}
    .cython.score-119 {background-color: #FFFF13;}
    .cython.score-120 {background-color: #FFFF13;}
    .cython.score-121 {background-color: #FFFF13;}
    .cython.score-122 {background-color: #FFFF13;}
    .cython.score-123 {background-color: #FFFF13;}
    .cython.score-124 {background-color: #FFFF13;}
    .cython.score-125 {background-color: #FFFF12;}
    .cython.score-126 {background-color: #FFFF12;}
    .cython.score-127 {background-color: #FFFF12;}
    .cython.score-128 {background-color: #FFFF12;}
    .cython.score-129 {background-color: #FFFF12;}
    .cython.score-130 {background-color: #FFFF12;}
    .cython.score-131 {background-color: #FFFF12;}
    .cython.score-132 {background-color: #FFFF11;}
    .cython.score-133 {background-color: #FFFF11;}
    .cython.score-134 {background-color: #FFFF11;}
    .cython.score-135 {background-color: #FFFF11;}
    .cython.score-136 {background-color: #FFFF11;}
    .cython.score-137 {background-color: #FFFF11;}
    .cython.score-138 {background-color: #FFFF11;}
    .cython.score-139 {background-color: #FFFF11;}
    .cython.score-140 {background-color: #FFFF11;}
    .cython.score-141 {background-color: #FFFF10;}
    .cython.score-142 {background-color: #FFFF10;}
    .cython.score-143 {background-color: #FFFF10;}
    .cython.score-144 {background-color: #FFFF10;}
    .cython.score-145 {background-color: #FFFF10;}
    .cython.score-146 {background-color: #FFFF10;}
    .cython.score-147 {background-color: #FFFF10;}
    .cython.score-148 {background-color: #FFFF10;}
    .cython.score-149 {background-color: #FFFF10;}
    .cython.score-150 {background-color: #FFFF0f;}
    .cython.score-151 {background-color: #FFFF0f;}
    .cython.score-152 {background-color: #FFFF0f;}
    .cython.score-153 {background-color: #FFFF0f;}
    .cython.score-154 {background-color: #FFFF0f;}
    .cython.score-155 {background-color: #FFFF0f;}
    .cython.score-156 {background-color: #FFFF0f;}
    .cython.score-157 {background-color: #FFFF0f;}
    .cython.score-158 {background-color: #FFFF0f;}
    .cython.score-159 {background-color: #FFFF0f;}
    .cython.score-160 {background-color: #FFFF0f;}
    .cython.score-161 {background-color: #FFFF0e;}
    .cython.score-162 {background-color: #FFFF0e;}
    .cython.score-163 {background-color: #FFFF0e;}
    .cython.score-164 {background-color: #FFFF0e;}
    .cython.score-165 {background-color: #FFFF0e;}
    .cython.score-166 {background-color: #FFFF0e;}
    .cython.score-167 {background-color: #FFFF0e;}
    .cython.score-168 {background-color: #FFFF0e;}
    .cython.score-169 {background-color: #FFFF0e;}
    .cython.score-170 {background-color: #FFFF0e;}
    .cython.score-171 {background-color: #FFFF0e;}
    .cython.score-172 {background-color: #FFFF0e;}
    .cython.score-173 {background-color: #FFFF0d;}
    .cython.score-174 {background-color: #FFFF0d;}
    .cython.score-175 {background-color: #FFFF0d;}
    .cython.score-176 {background-color: #FFFF0d;}
    .cython.score-177 {background-color: #FFFF0d;}
    .cython.score-178 {background-color: #FFFF0d;}
    .cython.score-179 {background-color: #FFFF0d;}
    .cython.score-180 {background-color: #FFFF0d;}
    .cython.score-181 {background-color: #FFFF0d;}
    .cython.score-182 {background-color: #FFFF0d;}
    .cython.score-183 {background-color: #FFFF0d;}
    .cython.score-184 {background-color: #FFFF0d;}
    .cython.score-185 {background-color: #FFFF0d;}
    .cython.score-186 {background-color: #FFFF0d;}
    .cython.score-187 {background-color: #FFFF0c;}
    .cython.score-188 {background-color: #FFFF0c;}
    .cython.score-189 {background-color: #FFFF0c;}
    .cython.score-190 {background-color: #FFFF0c;}
    .cython.score-191 {background-color: #FFFF0c;}
    .cython.score-192 {background-color: #FFFF0c;}
    .cython.score-193 {background-color: #FFFF0c;}
    .cython.score-194 {background-color: #FFFF0c;}
    .cython.score-195 {background-color: #FFFF0c;}
    .cython.score-196 {background-color: #FFFF0c;}
    .cython.score-197 {background-color: #FFFF0c;}
    .cython.score-198 {background-color: #FFFF0c;}
    .cython.score-199 {background-color: #FFFF0c;}
    .cython.score-200 {background-color: #FFFF0c;}
    .cython.score-201 {background-color: #FFFF0c;}
    .cython.score-202 {background-color: #FFFF0c;}
    .cython.score-203 {background-color: #FFFF0b;}
    .cython.score-204 {background-color: #FFFF0b;}
    .cython.score-205 {background-color: #FFFF0b;}
    .cython.score-206 {background-color: #FFFF0b;}
    .cython.score-207 {background-color: #FFFF0b;}
    .cython.score-208 {background-color: #FFFF0b;}
    .cython.score-209 {background-color: #FFFF0b;}
    .cython.score-210 {background-color: #FFFF0b;}
    .cython.score-211 {background-color: #FFFF0b;}
    .cython.score-212 {background-color: #FFFF0b;}
    .cython.score-213 {background-color: #FFFF0b;}
    .cython.score-214 {background-color: #FFFF0b;}
    .cython.score-215 {background-color: #FFFF0b;}
    .cython.score-216 {background-color: #FFFF0b;}
    .cython.score-217 {background-color: #FFFF0b;}
    .cython.score-218 {background-color: #FFFF0b;}
    .cython.score-219 {background-color: #FFFF0b;}
    .cython.score-220 {background-color: #FFFF0b;}
    .cython.score-221 {background-color: #FFFF0b;}
    .cython.score-222 {background-color: #FFFF0a;}
    .cython.score-223 {background-color: #FFFF0a;}
    .cython.score-224 {background-color: #FFFF0a;}
    .cython.score-225 {background-color: #FFFF0a;}
    .cython.score-226 {background-color: #FFFF0a;}
    .cython.score-227 {background-color: #FFFF0a;}
    .cython.score-228 {background-color: #FFFF0a;}
    .cython.score-229 {background-color: #FFFF0a;}
    .cython.score-230 {background-color: #FFFF0a;}
    .cython.score-231 {background-color: #FFFF0a;}
    .cython.score-232 {background-color: #FFFF0a;}
    .cython.score-233 {background-color: #FFFF0a;}
    .cython.score-234 {background-color: #FFFF0a;}
    .cython.score-235 {background-color: #FFFF0a;}
    .cython.score-236 {background-color: #FFFF0a;}
    .cython.score-237 {background-color: #FFFF0a;}
    .cython.score-238 {background-color: #FFFF0a;}
    .cython.score-239 {background-color: #FFFF0a;}
    .cython.score-240 {background-color: #FFFF0a;}
    .cython.score-241 {background-color: #FFFF0a;}
    .cython.score-242 {background-color: #FFFF0a;}
    .cython.score-243 {background-color: #FFFF0a;}
    .cython.score-244 {background-color: #FFFF0a;}
    .cython.score-245 {background-color: #FFFF0a;}
    .cython.score-246 {background-color: #FFFF09;}
    .cython.score-247 {background-color: #FFFF09;}
    .cython.score-248 {background-color: #FFFF09;}
    .cython.score-249 {background-color: #FFFF09;}
    .cython.score-250 {background-color: #FFFF09;}
    .cython.score-251 {background-color: #FFFF09;}
    .cython.score-252 {background-color: #FFFF09;}
    .cython.score-253 {background-color: #FFFF09;}
    .cython.score-254 {background-color: #FFFF09;}.cython .hll { background-color: #ffffcc }
    .cython  { background: #f8f8f8; }
    .cython .c { color: #408080; font-style: italic } /* Comment */
    .cython .err { border: 1px solid #FF0000 } /* Error */
    .cython .k { color: #008000; font-weight: bold } /* Keyword */
    .cython .o { color: #666666 } /* Operator */
    .cython .cm { color: #408080; font-style: italic } /* Comment.Multiline */
    .cython .cp { color: #BC7A00 } /* Comment.Preproc */
    .cython .c1 { color: #408080; font-style: italic } /* Comment.Single */
    .cython .cs { color: #408080; font-style: italic } /* Comment.Special */
    .cython .gd { color: #A00000 } /* Generic.Deleted */
    .cython .ge { font-style: italic } /* Generic.Emph */
    .cython .gr { color: #FF0000 } /* Generic.Error */
    .cython .gh { color: #000080; font-weight: bold } /* Generic.Heading */
    .cython .gi { color: #00A000 } /* Generic.Inserted */
    .cython .go { color: #888888 } /* Generic.Output */
    .cython .gp { color: #000080; font-weight: bold } /* Generic.Prompt */
    .cython .gs { font-weight: bold } /* Generic.Strong */
    .cython .gu { color: #800080; font-weight: bold } /* Generic.Subheading */
    .cython .gt { color: #0044DD } /* Generic.Traceback */
    .cython .kc { color: #008000; font-weight: bold } /* Keyword.Constant */
    .cython .kd { color: #008000; font-weight: bold } /* Keyword.Declaration */
    .cython .kn { color: #008000; font-weight: bold } /* Keyword.Namespace */
    .cython .kp { color: #008000 } /* Keyword.Pseudo */
    .cython .kr { color: #008000; font-weight: bold } /* Keyword.Reserved */
    .cython .kt { color: #B00040 } /* Keyword.Type */
    .cython .m { color: #666666 } /* Literal.Number */
    .cython .s { color: #BA2121 } /* Literal.String */
    .cython .na { color: #7D9029 } /* Name.Attribute */
    .cython .nb { color: #008000 } /* Name.Builtin */
    .cython .nc { color: #0000FF; font-weight: bold } /* Name.Class */
    .cython .no { color: #880000 } /* Name.Constant */
    .cython .nd { color: #AA22FF } /* Name.Decorator */
    .cython .ni { color: #999999; font-weight: bold } /* Name.Entity */
    .cython .ne { color: #D2413A; font-weight: bold } /* Name.Exception */
    .cython .nf { color: #0000FF } /* Name.Function */
    .cython .nl { color: #A0A000 } /* Name.Label */
    .cython .nn { color: #0000FF; font-weight: bold } /* Name.Namespace */
    .cython .nt { color: #008000; font-weight: bold } /* Name.Tag */
    .cython .nv { color: #19177C } /* Name.Variable */
    .cython .ow { color: #AA22FF; font-weight: bold } /* Operator.Word */
    .cython .w { color: #bbbbbb } /* Text.Whitespace */
    .cython .mf { color: #666666 } /* Literal.Number.Float */
    .cython .mh { color: #666666 } /* Literal.Number.Hex */
    .cython .mi { color: #666666 } /* Literal.Number.Integer */
    .cython .mo { color: #666666 } /* Literal.Number.Oct */
    .cython .sb { color: #BA2121 } /* Literal.String.Backtick */
    .cython .sc { color: #BA2121 } /* Literal.String.Char */
    .cython .sd { color: #BA2121; font-style: italic } /* Literal.String.Doc */
    .cython .s2 { color: #BA2121 } /* Literal.String.Double */
    .cython .se { color: #BB6622; font-weight: bold } /* Literal.String.Escape */
    .cython .sh { color: #BA2121 } /* Literal.String.Heredoc */
    .cython .si { color: #BB6688; font-weight: bold } /* Literal.String.Interpol */
    .cython .sx { color: #008000 } /* Literal.String.Other */
    .cython .sr { color: #BB6688 } /* Literal.String.Regex */
    .cython .s1 { color: #BA2121 } /* Literal.String.Single */
    .cython .ss { color: #19177C } /* Literal.String.Symbol */
    .cython .bp { color: #008000 } /* Name.Builtin.Pseudo */
    .cython .vc { color: #19177C } /* Name.Variable.Class */
    .cython .vg { color: #19177C } /* Name.Variable.Global */
    .cython .vi { color: #19177C } /* Name.Variable.Instance */
    .cython .il { color: #666666 } /* Literal.Number.Integer.Long */
        </style>
        <script>
        function toggleDiv(id) {
            theDiv = id.nextElementSibling
            if (theDiv.style.display != 'block') theDiv.style.display = 'block';
            else theDiv.style.display = 'none';
        }
        </script>
    </head>
    <body class="cython">
    <p>Generated by Cython 0.22</p>
    <div class="cython"><pre class='cython line score-11' onclick='toggleDiv(this)'>+01: <span class="k">from</span> <span class="nn">libc.math</span> <span class="k">cimport</span> <span class="n">sqrt</span></pre>
    <pre class='cython code score-11'>  __pyx_t_1 = <span class='py_c_api'>PyDict_New</span>();<span class='error_goto'> if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}</span>
      <span class='refnanny'>__Pyx_GOTREF</span>(__pyx_t_1);
      if (<span class='py_c_api'>PyDict_SetItem</span>(__pyx_d, __pyx_n_s_test, __pyx_t_1) &lt; 0) <span class='error_goto'>{__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}</span>
      <span class='pyx_macro_api'>__Pyx_DECREF</span>(__pyx_t_1); __pyx_t_1 = 0;
    </pre><pre class='cython line score-8' onclick='toggleDiv(this)'>+02: <span class="k">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="nn">np</span></pre>
    <pre class='cython code score-8'>  __pyx_t_1 = <span class='pyx_c_api'>__Pyx_Import</span>(__pyx_n_s_numpy, 0, -1);<span class='error_goto'> if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2; __pyx_clineno = __LINE__; goto __pyx_L1_error;}</span>
      <span class='refnanny'>__Pyx_GOTREF</span>(__pyx_t_1);
      if (<span class='py_c_api'>PyDict_SetItem</span>(__pyx_d, __pyx_n_s_np, __pyx_t_1) &lt; 0) <span class='error_goto'>{__pyx_filename = __pyx_f[0]; __pyx_lineno = 2; __pyx_clineno = __LINE__; goto __pyx_L1_error;}</span>
      <span class='pyx_macro_api'>__Pyx_DECREF</span>(__pyx_t_1); __pyx_t_1 = 0;
    </pre><pre class='cython line score-0'>&#xA0;03: <span class="k">cimport</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="nn">np</span></pre>
    <pre class='cython line score-0'>&#xA0;04: <span class="k">cimport</span> <span class="nn">cython</span></pre>
    <pre class='cython line score-0'>&#xA0;05: </pre>
    <pre class='cython line score-0'>&#xA0;06: <span class="c"># function pointer </span></pre>
    <pre class='cython line score-0' onclick='toggleDiv(this)'>+07: <span class="k">ctypedef</span> <span class="n">double</span> <span class="p">(</span><span class="o">*</span><span class="n">func</span><span class="p">)(</span><span class="n">double</span><span class="p">[:,</span> <span class="p">::</span><span class="mf">1</span><span class="p">],</span> <span class="nb">int</span> <span class="n">i</span><span class="p">,</span> <span class="nb">int</span> <span class="n">j</span><span class="p">)</span></pre>
    <pre class='cython code score-0'>typedef double (*__pyx_t_46_cython_magic_b37b7c839d5aa08ad1e5a2ad53e9c211_func)(__Pyx_memviewslice, int, int);
    </pre><pre class='cython line score-0'>&#xA0;08: </pre>
    <pre class='cython line score-0'>&#xA0;09: <span class="nd">@cython</span><span class="o">.</span><span class="n">boundscheck</span><span class="p">(</span><span class="bp">False</span><span class="p">)</span></pre>
    <pre class='cython line score-0'>&#xA0;10: <span class="nd">@cython</span><span class="o">.</span><span class="n">wraparound</span><span class="p">(</span><span class="bp">False</span><span class="p">)</span></pre>
    <pre class='cython line score-0' onclick='toggleDiv(this)'>+11: <span class="k">cdef</span> <span class="kt">double</span> <span class="nf">cy_euclidean</span><span class="p">(</span><span class="n">double</span><span class="p">[:,</span> <span class="p">::</span><span class="mf">1</span><span class="p">]</span> <span class="n">vs</span><span class="p">,</span> <span class="nb">int</span> <span class="n">i</span><span class="p">,</span> <span class="nb">int</span> <span class="n">j</span><span class="p">):</span></pre>
    <pre class='cython code score-0'>static double __pyx_f_46_cython_magic_b37b7c839d5aa08ad1e5a2ad53e9c211_cy_euclidean(__Pyx_memviewslice __pyx_v_vs, int __pyx_v_i, int __pyx_v_j) {
      double __pyx_v_d;
      double __pyx_v_t;
      int __pyx_v_k;
      int __pyx_v_n;
      double __pyx_r;
      <span class='refnanny'>__Pyx_RefNannyDeclarations</span>
      <span class='refnanny'>__Pyx_RefNannySetupContext</span>("cy_euclidean", 0);
    /* … */
      /* function exit code */
      __pyx_L0:;
      <span class='refnanny'>__Pyx_RefNannyFinishContext</span>();
      return __pyx_r;
    }
    </pre><pre class='cython line score-0' onclick='toggleDiv(this)'>+12:     <span class="k">cdef</span> <span class="kt">double</span> <span class="nf">d</span> <span class="o">=</span> <span class="mf">0.0</span><span class="p">,</span> <span class="n">t</span></pre>
    <pre class='cython code score-0'>  __pyx_v_d = 0.0;
    </pre><pre class='cython line score-0'>&#xA0;13:     <span class="k">cdef</span> <span class="kt">int</span> <span class="nf">k</span></pre>
    <pre class='cython line score-0'>&#xA0;14: </pre>
    <pre class='cython line score-0' onclick='toggleDiv(this)'>+15:     <span class="k">cdef</span> <span class="kt">int</span> <span class="nf">n</span> <span class="o">=</span> <span class="n">vs</span><span class="o">.</span><span class="n">shape</span><span class="p">[</span><span class="mf">1</span><span class="p">]</span></pre>
    <pre class='cython code score-0'>  __pyx_v_n = (__pyx_v_vs.shape[1]);
    </pre><pre class='cython line score-0' onclick='toggleDiv(this)'>+16:     <span class="k">for</span> <span class="n">k</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">n</span><span class="p">):</span></pre>
    <pre class='cython code score-0'>  __pyx_t_1 = __pyx_v_n;
      for (__pyx_t_2 = 0; __pyx_t_2 &lt; __pyx_t_1; __pyx_t_2+=1) {
        __pyx_v_k = __pyx_t_2;
    </pre><pre class='cython line score-0' onclick='toggleDiv(this)'>+17:         <span class="n">t</span> <span class="o">=</span> <span class="n">vs</span><span class="p">[</span><span class="n">i</span><span class="p">,</span> <span class="n">k</span><span class="p">]</span> <span class="o">-</span> <span class="n">vs</span><span class="p">[</span><span class="n">j</span><span class="p">,</span> <span class="n">k</span><span class="p">]</span></pre>
    <pre class='cython code score-0'>    __pyx_t_3 = __pyx_v_i;
        __pyx_t_4 = __pyx_v_k;
        __pyx_t_5 = __pyx_v_j;
        __pyx_t_6 = __pyx_v_k;
        __pyx_v_t = ((*((double *) ( /* dim=1 */ ((char *) (((double *) ( /* dim=0 */ (__pyx_v_vs.data + __pyx_t_3 * __pyx_v_vs.strides[0]) )) + __pyx_t_4)) ))) - (*((double *) ( /* dim=1 */ ((char *) (((double *) ( /* dim=0 */ (__pyx_v_vs.data + __pyx_t_5 * __pyx_v_vs.strides[0]) )) + __pyx_t_6)) ))));
    </pre><pre class='cython line score-0' onclick='toggleDiv(this)'>+18:         <span class="n">d</span> <span class="o">+=</span> <span class="n">t</span><span class="o">*</span><span class="n">t</span></pre>
    <pre class='cython code score-0'>    __pyx_v_d = (__pyx_v_d + (__pyx_v_t * __pyx_v_t));
      }
    </pre><pre class='cython line score-0' onclick='toggleDiv(this)'>+19:     <span class="k">return</span> <span class="n">sqrt</span><span class="p">(</span><span class="n">d</span><span class="p">)</span></pre>
    <pre class='cython code score-0'>  __pyx_r = sqrt(__pyx_v_d);
      goto __pyx_L0;
    </pre><pre class='cython line score-0'>&#xA0;20: </pre>
    <pre class='cython line score-0'>&#xA0;21: <span class="nd">@cython</span><span class="o">.</span><span class="n">boundscheck</span><span class="p">(</span><span class="bp">False</span><span class="p">)</span></pre>
    <pre class='cython line score-0'>&#xA0;22: <span class="nd">@cython</span><span class="o">.</span><span class="n">wraparound</span><span class="p">(</span><span class="bp">False</span><span class="p">)</span></pre>
    <pre class='cython line score-50' onclick='toggleDiv(this)'>+23: <span class="k">def</span> <span class="nf">cy_pairwise</span><span class="p">(</span><span class="n">double</span><span class="p">[:,::</span><span class="mf">1</span><span class="p">]</span> <span class="n">vs</span><span class="p">,</span> <span class="n">metric</span><span class="o">=</span><span class="s">&#39;euclidean&#39;</span><span class="p">):</span></pre>
    <pre class='cython code score-50'>/* Python wrapper */
    static PyObject *__pyx_pw_46_cython_magic_b37b7c839d5aa08ad1e5a2ad53e9c211_1cy_pairwise(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
    static PyMethodDef __pyx_mdef_46_cython_magic_b37b7c839d5aa08ad1e5a2ad53e9c211_1cy_pairwise = {"cy_pairwise", (PyCFunction)__pyx_pw_46_cython_magic_b37b7c839d5aa08ad1e5a2ad53e9c211_1cy_pairwise, METH_VARARGS|METH_KEYWORDS, 0};
    static PyObject *__pyx_pw_46_cython_magic_b37b7c839d5aa08ad1e5a2ad53e9c211_1cy_pairwise(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
      __Pyx_memviewslice __pyx_v_vs = { 0, 0, { 0 }, { 0 }, { 0 } };
      PyObject *__pyx_v_metric = 0;
      PyObject *__pyx_r = 0;
      <span class='refnanny'>__Pyx_RefNannyDeclarations</span>
      <span class='refnanny'>__Pyx_RefNannySetupContext</span>("cy_pairwise (wrapper)", 0);
      {
        static PyObject **__pyx_pyargnames[] = {&amp;__pyx_n_s_vs,&amp;__pyx_n_s_metric,0};
        PyObject* values[2] = {0,0};
        values[1] = ((PyObject *)__pyx_n_s_euclidean);
        if (unlikely(__pyx_kwds)) {
          Py_ssize_t kw_args;
          const Py_ssize_t pos_args = <span class='py_macro_api'>PyTuple_GET_SIZE</span>(__pyx_args);
          switch (pos_args) {
            case  2: values[1] = <span class='py_macro_api'>PyTuple_GET_ITEM</span>(__pyx_args, 1);
            case  1: values[0] = <span class='py_macro_api'>PyTuple_GET_ITEM</span>(__pyx_args, 0);
            case  0: break;
            default: goto __pyx_L5_argtuple_error;
          }
          kw_args = <span class='py_c_api'>PyDict_Size</span>(__pyx_kwds);
          switch (pos_args) {
            case  0:
            if (likely((values[0] = <span class='py_c_api'>PyDict_GetItem</span>(__pyx_kwds, __pyx_n_s_vs)) != 0)) kw_args--;
            else goto __pyx_L5_argtuple_error;
            case  1:
            if (kw_args &gt; 0) {
              PyObject* value = <span class='py_c_api'>PyDict_GetItem</span>(__pyx_kwds, __pyx_n_s_metric);
              if (value) { values[1] = value; kw_args--; }
            }
          }
          if (unlikely(kw_args &gt; 0)) {
            if (unlikely(<span class='pyx_c_api'>__Pyx_ParseOptionalKeywords</span>(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "cy_pairwise") &lt; 0)) <span class='error_goto'>{__pyx_filename = __pyx_f[0]; __pyx_lineno = 23; __pyx_clineno = __LINE__; goto __pyx_L3_error;}</span>
          }
        } else {
          switch (<span class='py_macro_api'>PyTuple_GET_SIZE</span>(__pyx_args)) {
            case  2: values[1] = <span class='py_macro_api'>PyTuple_GET_ITEM</span>(__pyx_args, 1);
            case  1: values[0] = <span class='py_macro_api'>PyTuple_GET_ITEM</span>(__pyx_args, 0);
            break;
            default: goto __pyx_L5_argtuple_error;
          }
        }
        __pyx_v_vs = <span class='pyx_c_api'>__Pyx_PyObject_to_MemoryviewSlice_d_dc_double</span>(values[0]);<span class='error_goto'> if (unlikely(!__pyx_v_vs.memview)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 23; __pyx_clineno = __LINE__; goto __pyx_L3_error;}</span>
        __pyx_v_metric = values[1];
      }
      goto __pyx_L4_argument_unpacking_done;
      __pyx_L5_argtuple_error:;
      <span class='pyx_c_api'>__Pyx_RaiseArgtupleInvalid</span>("cy_pairwise", 0, 1, 2, <span class='py_macro_api'>PyTuple_GET_SIZE</span>(__pyx_args)); <span class='error_goto'>{__pyx_filename = __pyx_f[0]; __pyx_lineno = 23; __pyx_clineno = __LINE__; goto __pyx_L3_error;}</span>
      __pyx_L3_error:;
      <span class='pyx_c_api'>__Pyx_AddTraceback</span>("_cython_magic_b37b7c839d5aa08ad1e5a2ad53e9c211.cy_pairwise", __pyx_clineno, __pyx_lineno, __pyx_filename);
      <span class='refnanny'>__Pyx_RefNannyFinishContext</span>();
      return NULL;
      __pyx_L4_argument_unpacking_done:;
      __pyx_r = __pyx_pf_46_cython_magic_b37b7c839d5aa08ad1e5a2ad53e9c211_cy_pairwise(__pyx_self, __pyx_v_vs, __pyx_v_metric);
      int __pyx_lineno = 0;
      const char *__pyx_filename = NULL;
      int __pyx_clineno = 0;
    
      /* function exit code */
      <span class='refnanny'>__Pyx_RefNannyFinishContext</span>();
      return __pyx_r;
    }
    
    static PyObject *__pyx_pf_46_cython_magic_b37b7c839d5aa08ad1e5a2ad53e9c211_cy_pairwise(CYTHON_UNUSED PyObject *__pyx_self, __Pyx_memviewslice __pyx_v_vs, PyObject *__pyx_v_metric) {
      Py_ssize_t __pyx_v_n;
      __Pyx_memviewslice __pyx_v_ds = { 0, 0, { 0 }, { 0 }, { 0 } };
      int __pyx_v_i;
      int __pyx_v_j;
      __pyx_t_46_cython_magic_b37b7c839d5aa08ad1e5a2ad53e9c211_func __pyx_v_dist;
      PyObject *__pyx_r = NULL;
      <span class='refnanny'>__Pyx_RefNannyDeclarations</span>
      <span class='refnanny'>__Pyx_RefNannySetupContext</span>("cy_pairwise", 0);
    /* … */
      /* function exit code */
      __pyx_L1_error:;
      <span class='pyx_macro_api'>__Pyx_XDECREF</span>(__pyx_t_1);
      <span class='pyx_macro_api'>__Pyx_XDECREF</span>(__pyx_t_2);
      <span class='pyx_macro_api'>__Pyx_XDECREF</span>(__pyx_t_3);
      <span class='pyx_macro_api'>__Pyx_XDECREF</span>(__pyx_t_4);
      <span class='pyx_macro_api'>__Pyx_XDECREF</span>(__pyx_t_5);
      __PYX_XDEC_MEMVIEW(&amp;__pyx_t_6, 1);
      <span class='pyx_c_api'>__Pyx_AddTraceback</span>("_cython_magic_b37b7c839d5aa08ad1e5a2ad53e9c211.cy_pairwise", __pyx_clineno, __pyx_lineno, __pyx_filename);
      __pyx_r = NULL;
      __pyx_L0:;
      __PYX_XDEC_MEMVIEW(&amp;__pyx_v_ds, 1);
      __PYX_XDEC_MEMVIEW(&amp;__pyx_v_vs, 1);
      <span class='refnanny'>__Pyx_XGIVEREF</span>(__pyx_r);
      <span class='refnanny'>__Pyx_RefNannyFinishContext</span>();
      return __pyx_r;
    }
    /* … */
      __pyx_tuple__20 = <span class='py_c_api'>PyTuple_Pack</span>(7, __pyx_n_s_vs, __pyx_n_s_metric, __pyx_n_s_n, __pyx_n_s_ds, __pyx_n_s_i, __pyx_n_s_j, __pyx_n_s_dist);<span class='error_goto'> if (unlikely(!__pyx_tuple__20)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 23; __pyx_clineno = __LINE__; goto __pyx_L1_error;}</span>
      <span class='refnanny'>__Pyx_GOTREF</span>(__pyx_tuple__20);
      <span class='refnanny'>__Pyx_GIVEREF</span>(__pyx_tuple__20);
    /* … */
      __pyx_t_1 = PyCFunction_NewEx(&amp;__pyx_mdef_46_cython_magic_b37b7c839d5aa08ad1e5a2ad53e9c211_1cy_pairwise, NULL, __pyx_n_s_cython_magic_b37b7c839d5aa08ad1);<span class='error_goto'> if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 23; __pyx_clineno = __LINE__; goto __pyx_L1_error;}</span>
      <span class='refnanny'>__Pyx_GOTREF</span>(__pyx_t_1);
      if (<span class='py_c_api'>PyDict_SetItem</span>(__pyx_d, __pyx_n_s_cy_pairwise, __pyx_t_1) &lt; 0) <span class='error_goto'>{__pyx_filename = __pyx_f[0]; __pyx_lineno = 23; __pyx_clineno = __LINE__; goto __pyx_L1_error;}</span>
      <span class='pyx_macro_api'>__Pyx_DECREF</span>(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_codeobj__21 = (PyObject*)<span class='pyx_c_api'>__Pyx_PyCode_New</span>(2, 0, 7, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__20, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_Users_cliburn_ipython_cython__c, __pyx_n_s_cy_pairwise, 23, __pyx_empty_bytes);<span class='error_goto'> if (unlikely(!__pyx_codeobj__21)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 23; __pyx_clineno = __LINE__; goto __pyx_L1_error;}</span>
    </pre><pre class='cython line score-0' onclick='toggleDiv(this)'>+24:     <span class="n">n</span> <span class="o">=</span> <span class="n">vs</span><span class="o">.</span><span class="n">shape</span><span class="p">[</span><span class="mf">0</span><span class="p">]</span></pre>
    <pre class='cython code score-0'>  __pyx_v_n = (__pyx_v_vs.shape[0]);
    </pre><pre class='cython line score-49' onclick='toggleDiv(this)'>+25:     <span class="k">cdef</span> <span class="kt">double</span>[<span class="p">:,</span> <span class="p">::</span><span class="mf">1</span><span class="p">]</span> <span class="n">ds</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">empty</span><span class="p">((</span><span class="n">n</span><span class="p">,</span> <span class="n">n</span><span class="p">))</span></pre>
    <pre class='cython code score-49'>  __pyx_t_2 = <span class='pyx_c_api'>__Pyx_GetModuleGlobalName</span>(__pyx_n_s_np);<span class='error_goto'> if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 25; __pyx_clineno = __LINE__; goto __pyx_L1_error;}</span>
      <span class='refnanny'>__Pyx_GOTREF</span>(__pyx_t_2);
      __pyx_t_3 = <span class='pyx_c_api'>__Pyx_PyObject_GetAttrStr</span>(__pyx_t_2, __pyx_n_s_empty);<span class='error_goto'> if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 25; __pyx_clineno = __LINE__; goto __pyx_L1_error;}</span>
      <span class='refnanny'>__Pyx_GOTREF</span>(__pyx_t_3);
      <span class='pyx_macro_api'>__Pyx_DECREF</span>(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_2 = <span class='py_c_api'>PyInt_FromSsize_t</span>(__pyx_v_n);<span class='error_goto'> if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 25; __pyx_clineno = __LINE__; goto __pyx_L1_error;}</span>
      <span class='refnanny'>__Pyx_GOTREF</span>(__pyx_t_2);
      __pyx_t_4 = <span class='py_c_api'>PyInt_FromSsize_t</span>(__pyx_v_n);<span class='error_goto'> if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 25; __pyx_clineno = __LINE__; goto __pyx_L1_error;}</span>
      <span class='refnanny'>__Pyx_GOTREF</span>(__pyx_t_4);
      __pyx_t_5 = <span class='py_c_api'>PyTuple_New</span>(2);<span class='error_goto'> if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 25; __pyx_clineno = __LINE__; goto __pyx_L1_error;}</span>
      <span class='refnanny'>__Pyx_GOTREF</span>(__pyx_t_5);
      <span class='py_macro_api'>PyTuple_SET_ITEM</span>(__pyx_t_5, 0, __pyx_t_2);
      <span class='refnanny'>__Pyx_GIVEREF</span>(__pyx_t_2);
      <span class='py_macro_api'>PyTuple_SET_ITEM</span>(__pyx_t_5, 1, __pyx_t_4);
      <span class='refnanny'>__Pyx_GIVEREF</span>(__pyx_t_4);
      __pyx_t_2 = 0;
      __pyx_t_4 = 0;
      __pyx_t_4 = NULL;
      if (CYTHON_COMPILING_IN_CPYTHON &amp;&amp; unlikely(<span class='py_c_api'>PyMethod_Check</span>(__pyx_t_3))) {
        __pyx_t_4 = <span class='py_macro_api'>PyMethod_GET_SELF</span>(__pyx_t_3);
        if (likely(__pyx_t_4)) {
          PyObject* function = <span class='py_macro_api'>PyMethod_GET_FUNCTION</span>(__pyx_t_3);
          <span class='pyx_macro_api'>__Pyx_INCREF</span>(__pyx_t_4);
          <span class='pyx_macro_api'>__Pyx_INCREF</span>(function);
          <span class='pyx_macro_api'>__Pyx_DECREF_SET</span>(__pyx_t_3, function);
        }
      }
      if (!__pyx_t_4) {
        __pyx_t_1 = <span class='pyx_c_api'>__Pyx_PyObject_CallOneArg</span>(__pyx_t_3, __pyx_t_5);<span class='error_goto'> if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 25; __pyx_clineno = __LINE__; goto __pyx_L1_error;}</span>
        <span class='pyx_macro_api'>__Pyx_DECREF</span>(__pyx_t_5); __pyx_t_5 = 0;
        <span class='refnanny'>__Pyx_GOTREF</span>(__pyx_t_1);
      } else {
        __pyx_t_2 = <span class='py_c_api'>PyTuple_New</span>(1+1);<span class='error_goto'> if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 25; __pyx_clineno = __LINE__; goto __pyx_L1_error;}</span>
        <span class='refnanny'>__Pyx_GOTREF</span>(__pyx_t_2);
        <span class='py_macro_api'>PyTuple_SET_ITEM</span>(__pyx_t_2, 0, __pyx_t_4); <span class='refnanny'>__Pyx_GIVEREF</span>(__pyx_t_4); __pyx_t_4 = NULL;
        <span class='py_macro_api'>PyTuple_SET_ITEM</span>(__pyx_t_2, 0+1, __pyx_t_5);
        <span class='refnanny'>__Pyx_GIVEREF</span>(__pyx_t_5);
        __pyx_t_5 = 0;
        __pyx_t_1 = <span class='pyx_c_api'>__Pyx_PyObject_Call</span>(__pyx_t_3, __pyx_t_2, NULL);<span class='error_goto'> if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 25; __pyx_clineno = __LINE__; goto __pyx_L1_error;}</span>
        <span class='refnanny'>__Pyx_GOTREF</span>(__pyx_t_1);
        <span class='pyx_macro_api'>__Pyx_DECREF</span>(__pyx_t_2); __pyx_t_2 = 0;
      }
      <span class='pyx_macro_api'>__Pyx_DECREF</span>(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = <span class='pyx_c_api'>__Pyx_PyObject_to_MemoryviewSlice_d_dc_double</span>(__pyx_t_1);
      if (unlikely(!__pyx_t_6.memview)) <span class='error_goto'>{__pyx_filename = __pyx_f[0]; __pyx_lineno = 25; __pyx_clineno = __LINE__; goto __pyx_L1_error;}</span>
      <span class='pyx_macro_api'>__Pyx_DECREF</span>(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_v_ds = __pyx_t_6;
      __pyx_t_6.memview = NULL;
      __pyx_t_6.data = NULL;
    </pre><pre class='cython line score-0'>&#xA0;26:     <span class="k">cdef</span> <span class="kt">int</span> <span class="nf">i</span><span class="p">,</span> <span class="nf">j</span></pre>
    <pre class='cython line score-0'>&#xA0;27: </pre>
    <pre class='cython line score-0'>&#xA0;28:     <span class="k">cdef</span> <span class="kt">func</span> <span class="nf">dist</span></pre>
    <pre class='cython line score-2' onclick='toggleDiv(this)'>+29:     <span class="k">if</span> <span class="n">metric</span> <span class="o">==</span> <span class="s">&#39;euclidean&#39;</span><span class="p">:</span></pre>
    <pre class='cython code score-2'>  __pyx_t_7 = (<span class='pyx_c_api'>__Pyx_PyString_Equals</span>(__pyx_v_metric, __pyx_n_s_euclidean, Py_EQ));<span class='error_goto'> if (unlikely(__pyx_t_7 &lt; 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 29; __pyx_clineno = __LINE__; goto __pyx_L1_error;}</span>
      if (__pyx_t_7) {
    </pre><pre class='cython line score-0' onclick='toggleDiv(this)'>+30:         <span class="n">dist</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">cy_euclidean</span></pre>
    <pre class='cython code score-0'>    __pyx_v_dist = (&amp;__pyx_f_46_cython_magic_b37b7c839d5aa08ad1e5a2ad53e9c211_cy_euclidean);
        goto __pyx_L3;
      }
      /*else*/ {
    </pre><pre class='cython line score-0'>&#xA0;31:     <span class="k">else</span><span class="p">:</span></pre>
    <pre class='cython line score-10' onclick='toggleDiv(this)'>+32:         <span class="k">raise</span> <span class="ne">ValueError</span><span class="p">(</span><span class="s">&#39;Metric not found&#39;</span><span class="p">)</span></pre>
    <pre class='cython code score-10'>    __pyx_t_1 = <span class='pyx_c_api'>__Pyx_PyObject_Call</span>(__pyx_builtin_ValueError, __pyx_tuple_, NULL);<span class='error_goto'> if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 32; __pyx_clineno = __LINE__; goto __pyx_L1_error;}</span>
        <span class='refnanny'>__Pyx_GOTREF</span>(__pyx_t_1);
        <span class='pyx_c_api'>__Pyx_Raise</span>(__pyx_t_1, 0, 0, 0);
        <span class='pyx_macro_api'>__Pyx_DECREF</span>(__pyx_t_1); __pyx_t_1 = 0;
        <span class='error_goto'>{__pyx_filename = __pyx_f[0]; __pyx_lineno = 32; __pyx_clineno = __LINE__; goto __pyx_L1_error;}</span>
      }
      __pyx_L3:;
    /* … */
      __pyx_tuple_ = <span class='py_c_api'>PyTuple_Pack</span>(1, __pyx_kp_s_Metric_not_found);<span class='error_goto'> if (unlikely(!__pyx_tuple_)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 32; __pyx_clineno = __LINE__; goto __pyx_L1_error;}</span>
      <span class='refnanny'>__Pyx_GOTREF</span>(__pyx_tuple_);
      <span class='refnanny'>__Pyx_GIVEREF</span>(__pyx_tuple_);
    </pre><pre class='cython line score-0'>&#xA0;33: </pre>
    <pre class='cython line score-0' onclick='toggleDiv(this)'>+34:     <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">n</span><span class="p">):</span></pre>
    <pre class='cython code score-0'>  __pyx_t_8 = __pyx_v_n;
      for (__pyx_t_9 = 0; __pyx_t_9 &lt; __pyx_t_8; __pyx_t_9+=1) {
        __pyx_v_i = __pyx_t_9;
    </pre><pre class='cython line score-0' onclick='toggleDiv(this)'>+35:         <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">n</span><span class="p">):</span></pre>
    <pre class='cython code score-0'>    __pyx_t_10 = __pyx_v_n;
        for (__pyx_t_11 = 0; __pyx_t_11 &lt; __pyx_t_10; __pyx_t_11+=1) {
          __pyx_v_j = __pyx_t_11;
    </pre><pre class='cython line score-0' onclick='toggleDiv(this)'>+36:             <span class="k">if</span> <span class="n">i</span> <span class="o">==</span> <span class="n">j</span><span class="p">:</span></pre>
    <pre class='cython code score-0'>      __pyx_t_7 = ((__pyx_v_i == __pyx_v_j) != 0);
          if (__pyx_t_7) {
    </pre><pre class='cython line score-0' onclick='toggleDiv(this)'>+37:                 <span class="n">ds</span><span class="p">[</span><span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="mf">0</span></pre>
    <pre class='cython code score-0'>        __pyx_t_12 = __pyx_v_i;
            __pyx_t_13 = __pyx_v_j;
            *((double *) ( /* dim=1 */ ((char *) (((double *) ( /* dim=0 */ (__pyx_v_ds.data + __pyx_t_12 * __pyx_v_ds.strides[0]) )) + __pyx_t_13)) )) = 0.0;
            goto __pyx_L8;
          }
    </pre><pre class='cython line score-0' onclick='toggleDiv(this)'>+38:             <span class="k">elif</span> <span class="n">i</span> <span class="o">&gt;</span> <span class="n">j</span><span class="p">:</span></pre>
    <pre class='cython code score-0'>      __pyx_t_7 = ((__pyx_v_i &gt; __pyx_v_j) != 0);
          if (__pyx_t_7) {
    </pre><pre class='cython line score-0' onclick='toggleDiv(this)'>+39:                 <span class="n">ds</span><span class="p">[</span><span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="n">ds</span><span class="p">[</span><span class="n">j</span><span class="p">,</span> <span class="n">i</span><span class="p">]</span></pre>
    <pre class='cython code score-0'>        __pyx_t_14 = __pyx_v_j;
            __pyx_t_15 = __pyx_v_i;
            __pyx_t_16 = __pyx_v_i;
            __pyx_t_17 = __pyx_v_j;
            *((double *) ( /* dim=1 */ ((char *) (((double *) ( /* dim=0 */ (__pyx_v_ds.data + __pyx_t_16 * __pyx_v_ds.strides[0]) )) + __pyx_t_17)) )) = (*((double *) ( /* dim=1 */ ((char *) (((double *) ( /* dim=0 */ (__pyx_v_ds.data + __pyx_t_14 * __pyx_v_ds.strides[0]) )) + __pyx_t_15)) )));
            goto __pyx_L8;
          }
          /*else*/ {
    </pre><pre class='cython line score-0'>&#xA0;40:             <span class="k">else</span><span class="p">:</span></pre>
    <pre class='cython line score-0' onclick='toggleDiv(this)'>+41:                 <span class="n">ds</span><span class="p">[</span><span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="n">dist</span><span class="p">(</span><span class="n">vs</span><span class="p">,</span> <span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">)</span></pre>
    <pre class='cython code score-0'>        __pyx_t_18 = __pyx_v_i;
            __pyx_t_19 = __pyx_v_j;
            *((double *) ( /* dim=1 */ ((char *) (((double *) ( /* dim=0 */ (__pyx_v_ds.data + __pyx_t_18 * __pyx_v_ds.strides[0]) )) + __pyx_t_19)) )) = __pyx_v_dist(__pyx_v_vs, __pyx_v_i, __pyx_v_j);
          }
          __pyx_L8:;
        }
      }
    </pre><pre class='cython line score-30' onclick='toggleDiv(this)'>+42:     <span class="k">return</span> <span class="n">np</span><span class="o">.</span><span class="n">asarray</span><span class="p">(</span><span class="n">ds</span><span class="p">)</span></pre>
    <pre class='cython code score-30'>  <span class='pyx_macro_api'>__Pyx_XDECREF</span>(__pyx_r);
      __pyx_t_3 = <span class='pyx_c_api'>__Pyx_GetModuleGlobalName</span>(__pyx_n_s_np);<span class='error_goto'> if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 42; __pyx_clineno = __LINE__; goto __pyx_L1_error;}</span>
      <span class='refnanny'>__Pyx_GOTREF</span>(__pyx_t_3);
      __pyx_t_2 = <span class='pyx_c_api'>__Pyx_PyObject_GetAttrStr</span>(__pyx_t_3, __pyx_n_s_asarray);<span class='error_goto'> if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 42; __pyx_clineno = __LINE__; goto __pyx_L1_error;}</span>
      <span class='refnanny'>__Pyx_GOTREF</span>(__pyx_t_2);
      <span class='pyx_macro_api'>__Pyx_DECREF</span>(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_3 = __pyx_memoryview_fromslice(__pyx_v_ds, 2, (PyObject *(*)(char *)) __pyx_memview_get_double, (int (*)(char *, PyObject *)) __pyx_memview_set_double, 0);;<span class='error_goto'> if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 42; __pyx_clineno = __LINE__; goto __pyx_L1_error;}</span>
      <span class='refnanny'>__Pyx_GOTREF</span>(__pyx_t_3);
      __pyx_t_5 = NULL;
      if (CYTHON_COMPILING_IN_CPYTHON &amp;&amp; unlikely(<span class='py_c_api'>PyMethod_Check</span>(__pyx_t_2))) {
        __pyx_t_5 = <span class='py_macro_api'>PyMethod_GET_SELF</span>(__pyx_t_2);
        if (likely(__pyx_t_5)) {
          PyObject* function = <span class='py_macro_api'>PyMethod_GET_FUNCTION</span>(__pyx_t_2);
          <span class='pyx_macro_api'>__Pyx_INCREF</span>(__pyx_t_5);
          <span class='pyx_macro_api'>__Pyx_INCREF</span>(function);
          <span class='pyx_macro_api'>__Pyx_DECREF_SET</span>(__pyx_t_2, function);
        }
      }
      if (!__pyx_t_5) {
        __pyx_t_1 = <span class='pyx_c_api'>__Pyx_PyObject_CallOneArg</span>(__pyx_t_2, __pyx_t_3);<span class='error_goto'> if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 42; __pyx_clineno = __LINE__; goto __pyx_L1_error;}</span>
        <span class='pyx_macro_api'>__Pyx_DECREF</span>(__pyx_t_3); __pyx_t_3 = 0;
        <span class='refnanny'>__Pyx_GOTREF</span>(__pyx_t_1);
      } else {
        __pyx_t_4 = <span class='py_c_api'>PyTuple_New</span>(1+1);<span class='error_goto'> if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 42; __pyx_clineno = __LINE__; goto __pyx_L1_error;}</span>
        <span class='refnanny'>__Pyx_GOTREF</span>(__pyx_t_4);
        <span class='py_macro_api'>PyTuple_SET_ITEM</span>(__pyx_t_4, 0, __pyx_t_5); <span class='refnanny'>__Pyx_GIVEREF</span>(__pyx_t_5); __pyx_t_5 = NULL;
        <span class='py_macro_api'>PyTuple_SET_ITEM</span>(__pyx_t_4, 0+1, __pyx_t_3);
        <span class='refnanny'>__Pyx_GIVEREF</span>(__pyx_t_3);
        __pyx_t_3 = 0;
        __pyx_t_1 = <span class='pyx_c_api'>__Pyx_PyObject_Call</span>(__pyx_t_2, __pyx_t_4, NULL);<span class='error_goto'> if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 42; __pyx_clineno = __LINE__; goto __pyx_L1_error;}</span>
        <span class='refnanny'>__Pyx_GOTREF</span>(__pyx_t_1);
        <span class='pyx_macro_api'>__Pyx_DECREF</span>(__pyx_t_4); __pyx_t_4 = 0;
      }
      <span class='pyx_macro_api'>__Pyx_DECREF</span>(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_r = __pyx_t_1;
      __pyx_t_1 = 0;
      goto __pyx_L0;
    </pre></div></body></html>



.. code:: python

    %timeit -n 10 py_pairwise(vs, py_euclidean)
    %timeit -n 10 numba_pairwise(vs, numba_euclidean)
    %timeit -n 10 cy_pairwise(vs)


.. parsed-literal::

    10 loops, best of 3: 576 ms per loop
    10 loops, best of 3: 7.2 ms per loop
    10 loops, best of 3: 640 µs per loop


Comparison with optimized C from scipy
--------------------------------------

.. code:: python

    from scipy.spatial.distance import pdist
    
    %timeit -n 10 pdist(vs)


.. parsed-literal::

    10 loops, best of 3: 626 µs per loop


